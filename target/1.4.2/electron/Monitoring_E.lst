
c:/Users/erosn/ownCloud/ParticleProjects/Monitoring_E/target/1.4.2/electron/Monitoring_E.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006180  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080861a0  080861a0  000161a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080861a8  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000b0  20000000  080861ac  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000075c  200000b0  200000b0  000400b0  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  0808625c  0808625c  0003625c  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  08086288  08086288  00036288  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000b194e  00000000  00000000  0003628c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000113ec  00000000  00000000  000e7bda  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00015396  00000000  00000000  000f8fc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002140  00000000  00000000  0010e35c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00003518  00000000  00000000  0011049c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000288b1  00000000  00000000  001139b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00028667  00000000  00000000  0013c265  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000ab7fa  00000000  00000000  001648cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000c448  00000000  00000000  002100c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080020:	4809      	ldr	r0, [pc, #36]	; (8080048 <module_user_pre_init+0x28>)
 8080022:	490a      	ldr	r1, [pc, #40]	; (808004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080026:	4288      	cmp	r0, r1
 8080028:	d005      	beq.n	8080036 <module_user_pre_init+0x16>
 808002a:	4a09      	ldr	r2, [pc, #36]	; (8080050 <module_user_pre_init+0x30>)
 808002c:	4282      	cmp	r2, r0
 808002e:	d002      	beq.n	8080036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080030:	1a12      	subs	r2, r2, r0
 8080032:	f003 feed 	bl	8083e10 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080036:	4807      	ldr	r0, [pc, #28]	; (8080054 <module_user_pre_init+0x34>)
 8080038:	4a07      	ldr	r2, [pc, #28]	; (8080058 <module_user_pre_init+0x38>)
 808003a:	2100      	movs	r1, #0
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f003 fef2 	bl	8083e26 <memset>
    return &link_heap_start;
}
 8080042:	4806      	ldr	r0, [pc, #24]	; (808005c <module_user_pre_init+0x3c>)
 8080044:	bd08      	pop	{r3, pc}
 8080046:	bf00      	nop
 8080048:	20000000 	.word	0x20000000
 808004c:	080861ac 	.word	0x080861ac
 8080050:	200000b0 	.word	0x200000b0
 8080054:	200000b0 	.word	0x200000b0
 8080058:	2000080c 	.word	0x2000080c
 808005c:	2000080c 	.word	0x2000080c

08080060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080062:	f001 fba3 	bl	80817ac <module_user_init_hook>
 8080066:	4b07      	ldr	r3, [pc, #28]	; (8080084 <module_user_init+0x24>)
 8080068:	4c07      	ldr	r4, [pc, #28]	; (8080088 <module_user_init+0x28>)
 808006a:	461e      	mov	r6, r3
 808006c:	1ae4      	subs	r4, r4, r3
 808006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080070:	2500      	movs	r5, #0
 8080072:	42a5      	cmp	r5, r4
 8080074:	d004      	beq.n	8080080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 808007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808007c:	3501      	adds	r5, #1
 808007e:	e7f8      	b.n	8080072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080080:	bd70      	pop	{r4, r5, r6, pc}
 8080082:	bf00      	nop
 8080084:	08086154 	.word	0x08086154
 8080088:	08086194 	.word	0x08086194

0808008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 808008c:	f000 baf6 	b.w	808067c <setup>

08080090 <module_user_loop>:
}

void module_user_loop() {
 8080090:	b508      	push	{r3, lr}
    loop();
 8080092:	f000 f953 	bl	808033c <loop>
    _post_loop();
}
 8080096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 808009a:	f001 bb49 	b.w	8081730 <_post_loop>

0808009e <_Znwj>:
 808009e:	f000 bfcf 	b.w	8081040 <malloc>

080800a2 <_ZdlPv>:
 80800a2:	f000 bfd5 	b.w	8081050 <free>

080800a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a6:	7800      	ldrb	r0, [r0, #0]
 80800a8:	fab0 f080 	clz	r0, r0
 80800ac:	0940      	lsrs	r0, r0, #5
 80800ae:	4770      	bx	lr

080800b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800b0:	2301      	movs	r3, #1
 80800b2:	7003      	strb	r3, [r0, #0]
 80800b4:	4770      	bx	lr

080800b6 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 80800b6:	6803      	ldr	r3, [r0, #0]
 80800b8:	4718      	bx	r3

080800ba <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80800ba:	2a01      	cmp	r2, #1
 80800bc:	d002      	beq.n	80800c4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
 80800be:	2a02      	cmp	r2, #2
 80800c0:	d002      	beq.n	80800c8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
 80800c2:	e004      	b.n	80800ce <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80800c4:	6001      	str	r1, [r0, #0]
	      break;
 80800c6:	e002      	b.n	80800ce <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80800c8:	680b      	ldr	r3, [r1, #0]
 80800ca:	b100      	cbz	r0, 80800ce <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
 80800cc:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80800ce:	2000      	movs	r0, #0
 80800d0:	4770      	bx	lr
	...

080800d4 <_Z18updateAmpVariablesv>:
 * AMP terminal.
 * The globally declared timer is set to trigger this function
 * at a set interval. Depending on the settings, the AMP clamp
 * readings get updated.
 */
void updateAmpVariables(){
 80800d4:	b570      	push	{r4, r5, r6, lr}
 80800d6:	4d08      	ldr	r5, [pc, #32]	; (80800f8 <_Z18updateAmpVariablesv+0x24>)
  for(int i = 0; i < settings.clamps; i++){
 80800d8:	4e08      	ldr	r6, [pc, #32]	; (80800fc <_Z18updateAmpVariablesv+0x28>)
 80800da:	2400      	movs	r4, #0
 80800dc:	78f3      	ldrb	r3, [r6, #3]
 80800de:	429c      	cmp	r4, r3
 80800e0:	da09      	bge.n	80800f6 <_Z18updateAmpVariablesv+0x22>
    double iRMS = monitor.getIrms(i, settings.calibration);
 80800e2:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
 80800e6:	b2e1      	uxtb	r1, r4
 80800e8:	4805      	ldr	r0, [pc, #20]	; (8080100 <_Z18updateAmpVariablesv+0x2c>)
 80800ea:	f000 fc57 	bl	808099c <_ZN14CurrentMonitor7getIrmsEhd>
 * The globally declared timer is set to trigger this function
 * at a set interval. Depending on the settings, the AMP clamp
 * readings get updated.
 */
void updateAmpVariables(){
  for(int i = 0; i < settings.clamps; i++){
 80800ee:	3401      	adds	r4, #1
    double iRMS = monitor.getIrms(i, settings.calibration);
    AMP_READING[i] = iRMS;
 80800f0:	e9e5 0102 	strd	r0, r1, [r5, #8]!
 * The globally declared timer is set to trigger this function
 * at a set interval. Depending on the settings, the AMP clamp
 * readings get updated.
 */
void updateAmpVariables(){
  for(int i = 0; i < settings.clamps; i++){
 80800f4:	e7f2      	b.n	80800dc <_Z18updateAmpVariablesv+0x8>
 80800f6:	bd70      	pop	{r4, r5, r6, pc}
 80800f8:	20000150 	.word	0x20000150
 80800fc:	200000b8 	.word	0x200000b8
 8080100:	20000108 	.word	0x20000108

08080104 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
 8080104:	6943      	ldr	r3, [r0, #20]
 8080106:	b113      	cbz	r3, 808010e <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080108:	6983      	ldr	r3, [r0, #24]
 808010a:	300c      	adds	r0, #12
 808010c:	4718      	bx	r3
 808010e:	4770      	bx	lr

08080110 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
 8080110:	b513      	push	{r0, r1, r4, lr}
 8080112:	4604      	mov	r4, r0
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
 8080114:	2100      	movs	r1, #0
 8080116:	4608      	mov	r0, r1
 8080118:	f000 fdfe 	bl	8080d18 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
 808011c:	a902      	add	r1, sp, #8
 808011e:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
 8080120:	4620      	mov	r0, r4

    static void invoke_timer(os_timer_t timer)
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
 8080122:	f841 3d04 	str.w	r3, [r1, #-4]!
            os_timer_get_id(timer, &id);
 8080126:	f000 fe0f 	bl	8080d48 <os_timer_get_id>
            t = static_cast<Timer*>(id);
 808012a:	9c01      	ldr	r4, [sp, #4]
            if (t) {
 808012c:	b10c      	cbz	r4, 8080132 <_ZN5Timer12invoke_timerEPv+0x22>
                t->running = true;
 808012e:	2301      	movs	r3, #1
 8080130:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
 8080132:	2100      	movs	r1, #0
 8080134:	2001      	movs	r0, #1
 8080136:	f000 fdef 	bl	8080d18 <os_thread_scheduling>
            }
        }
        if (t) {
 808013a:	b12c      	cbz	r4, 8080148 <_ZN5Timer12invoke_timerEPv+0x38>
            t->timeout();
 808013c:	6823      	ldr	r3, [r4, #0]
 808013e:	4620      	mov	r0, r4
 8080140:	689b      	ldr	r3, [r3, #8]
 8080142:	4798      	blx	r3
            t->running = false;
 8080144:	2300      	movs	r3, #0
 8080146:	7123      	strb	r3, [r4, #4]
        }
    }
 8080148:	b002      	add	sp, #8
 808014a:	bd10      	pop	{r4, pc}

0808014c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.10.constprop.16>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
 808014c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808014e:	4605      	mov	r5, r0
 8080150:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8080154:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8080156:	f88d 3000 	strb.w	r3, [sp]
 808015a:	233c      	movs	r3, #60	; 0x3c
 808015c:	f001 fcc0 	bl	8081ae0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
 8080160:	4628      	mov	r0, r5
 8080162:	b003      	add	sp, #12
 8080164:	bd30      	pop	{r4, r5, pc}

08080166 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080166:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8080168:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 808016a:	4604      	mov	r4, r0
    {
      if (_M_manager)
 808016c:	b113      	cbz	r3, 8080174 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808016e:	2203      	movs	r2, #3
 8080170:	4601      	mov	r1, r0
 8080172:	4798      	blx	r3
    }
 8080174:	4620      	mov	r0, r4
 8080176:	bd10      	pop	{r4, pc}

08080178 <_ZN5Timer5_stopEjb>:
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
    }

    bool _stop(unsigned block, bool fromISR=false)
 8080178:	b507      	push	{r0, r1, r2, lr}
    {
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
 808017a:	6880      	ldr	r0, [r0, #8]
 808017c:	2300      	movs	r3, #0
 808017e:	b138      	cbz	r0, 8080190 <_ZN5Timer5_stopEjb+0x18>
 8080180:	e88d 000a 	stmia.w	sp, {r1, r3}
 8080184:	2102      	movs	r1, #2
 8080186:	f000 fde7 	bl	8080d58 <os_timer_change>
 808018a:	fab0 f080 	clz	r0, r0
 808018e:	0940      	lsrs	r0, r0, #5
    }
 8080190:	b003      	add	sp, #12
 8080192:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08080198 <_ZN5TimerD1Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
 8080198:	b538      	push	{r3, r4, r5, lr}
 808019a:	4b10      	ldr	r3, [pc, #64]	; (80801dc <_ZN5TimerD1Ev+0x44>)
 808019c:	4604      	mov	r4, r0
 808019e:	6003      	str	r3, [r0, #0]
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
    }

    void dispose()
    {
        if (handle) {
 80801a0:	6883      	ldr	r3, [r0, #8]
 80801a2:	b1a3      	cbz	r3, 80801ce <_ZN5TimerD1Ev+0x36>
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 80801a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80801a8:	2200      	movs	r2, #0
 80801aa:	f7ff ffe5 	bl	8080178 <_ZN5Timer5_stopEjb>
    {
        if (handle) {
            stop();
            // Make sure the callback will not be called after this object is destroyed.
            // TODO: Consider assigning a higher priority to the timer thread
            os_timer_set_id(handle, nullptr);
 80801ae:	2100      	movs	r1, #0
 80801b0:	68a0      	ldr	r0, [r4, #8]
 80801b2:	f000 fde1 	bl	8080d78 <os_timer_set_id>
            while (running) {
 80801b6:	7923      	ldrb	r3, [r4, #4]
 80801b8:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80801bc:	b113      	cbz	r3, 80801c4 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
 80801be:	f000 fda3 	bl	8080d08 <os_thread_yield>
 80801c2:	e7f8      	b.n	80801b6 <_ZN5TimerD1Ev+0x1e>
            }
            os_timer_destroy(handle, nullptr);
 80801c4:	4629      	mov	r1, r5
 80801c6:	68a0      	ldr	r0, [r4, #8]
 80801c8:	f000 fdb6 	bl	8080d38 <os_timer_destroy>
            handle = nullptr;
 80801cc:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80801ce:	f104 000c 	add.w	r0, r4, #12
 80801d2:	f7ff ffc8 	bl	8080166 <_ZNSt14_Function_baseD1Ev>

    virtual ~Timer() {
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
 80801d6:	4620      	mov	r0, r4
 80801d8:	bd38      	pop	{r3, r4, r5, pc}
 80801da:	bf00      	nop
 80801dc:	08085ac4 	.word	0x08085ac4

080801e0 <_ZN5TimerD0Ev>:
    template <typename T>
    Timer(unsigned period, void (T::*handler)(), T& instance, bool one_shot=false) : Timer(period, std::bind(handler, &instance), one_shot)
    {
    }

    virtual ~Timer() {
 80801e0:	b510      	push	{r4, lr}
 80801e2:	4604      	mov	r4, r0
    		// when the timer is calling the std::function, we cannot dispose of it until the function completes.
		// the call has exited.
		dispose();
    }
 80801e4:	f7ff ffd8 	bl	8080198 <_ZN5TimerD1Ev>
 80801e8:	4620      	mov	r0, r4
 80801ea:	211c      	movs	r1, #28
 80801ec:	f002 fa75 	bl	80826da <_ZdlPvj>
 80801f0:	4620      	mov	r0, r4
 80801f2:	bd10      	pop	{r4, pc}

080801f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80801f4:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80801f6:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80801f8:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80801fa:	b17c      	cbz	r4, 808021c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80801fc:	6863      	ldr	r3, [r4, #4]
 80801fe:	3b01      	subs	r3, #1
 8080200:	6063      	str	r3, [r4, #4]
 8080202:	b95b      	cbnz	r3, 808021c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 8080204:	6823      	ldr	r3, [r4, #0]
 8080206:	4620      	mov	r0, r4
 8080208:	689b      	ldr	r3, [r3, #8]
 808020a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 808020c:	68a3      	ldr	r3, [r4, #8]
 808020e:	3b01      	subs	r3, #1
 8080210:	60a3      	str	r3, [r4, #8]
 8080212:	b91b      	cbnz	r3, 808021c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8080214:	6823      	ldr	r3, [r4, #0]
 8080216:	4620      	mov	r0, r4
 8080218:	68db      	ldr	r3, [r3, #12]
 808021a:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 808021c:	4628      	mov	r0, r5
 808021e:	bd38      	pop	{r3, r4, r5, pc}

08080220 <_Z12processAlarmib>:
/**
 * This is executed each loop() to continually check the state
 * of air dryer alarms. Any changes in alarm state get published
 * as an event to Particle.io.
 */
void processAlarm(int alarmNum, bool alarmState){
 8080220:	b570      	push	{r4, r5, r6, lr}
 8080222:	4605      	mov	r5, r0
 8080224:	b096      	sub	sp, #88	; 0x58
  
  if(alarmState){
 8080226:	460e      	mov	r6, r1
 8080228:	b2c4      	uxtb	r4, r0
 808022a:	2900      	cmp	r1, #0
 808022c:	d043      	beq.n	80802b6 <_Z12processAlarmib+0x96>
    String alarmStr = String("Dryer ") + String(alarmNum+1) + String(" in Alarm");
 808022e:	493c      	ldr	r1, [pc, #240]	; (8080320 <_Z12processAlarmib+0x100>)
 8080230:	a806      	add	r0, sp, #24
 8080232:	f001 f85a 	bl	80812ea <_ZN6StringC1EPK19__FlashStringHelper>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8080236:	a906      	add	r1, sp, #24
 8080238:	a80e      	add	r0, sp, #56	; 0x38
 808023a:	f001 f878 	bl	808132e <_ZN6StringC1ERKS_>
 808023e:	220a      	movs	r2, #10
 8080240:	1c69      	adds	r1, r5, #1
 8080242:	a80a      	add	r0, sp, #40	; 0x28
 8080244:	f001 f88f 	bl	8081366 <_ZN6StringC1Eih>
 8080248:	a90a      	add	r1, sp, #40	; 0x28
 808024a:	a80e      	add	r0, sp, #56	; 0x38
 808024c:	f001 f8cb 	bl	80813e6 <_ZplRK15StringSumHelperRK6String>
 8080250:	4605      	mov	r5, r0
 8080252:	4934      	ldr	r1, [pc, #208]	; (8080324 <_Z12processAlarmib+0x104>)
 8080254:	a812      	add	r0, sp, #72	; 0x48
 8080256:	f001 f848 	bl	80812ea <_ZN6StringC1EPK19__FlashStringHelper>
 808025a:	a912      	add	r1, sp, #72	; 0x48
 808025c:	4628      	mov	r0, r5
 808025e:	f001 f8c2 	bl	80813e6 <_ZplRK15StringSumHelperRK6String>
 8080262:	4601      	mov	r1, r0
 8080264:	a802      	add	r0, sp, #8
 8080266:	f001 f862 	bl	808132e <_ZN6StringC1ERKS_>
 808026a:	a812      	add	r0, sp, #72	; 0x48
 808026c:	f000 fff6 	bl	808125c <_ZN6StringD1Ev>
 8080270:	a80a      	add	r0, sp, #40	; 0x28
 8080272:	f000 fff3 	bl	808125c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8080276:	a80e      	add	r0, sp, #56	; 0x38
 8080278:	f000 fff0 	bl	808125c <_ZN6StringD1Ev>
 808027c:	a806      	add	r0, sp, #24
 808027e:	f000 ffed 	bl	808125c <_ZN6StringD1Ev>

    // Only publish the in alarm state if the previous state was not in alarm
    if(!alarmDetector.getPreviousAlarmState(alarmNum)){
 8080282:	4621      	mov	r1, r4
 8080284:	4828      	ldr	r0, [pc, #160]	; (8080328 <_Z12processAlarmib+0x108>)
 8080286:	f000 fbe9 	bl	8080a5c <_ZN13AlarmDetector21getPreviousAlarmStateEh>
 808028a:	b958      	cbnz	r0, 80802a4 <_Z12processAlarmib+0x84>
 808028c:	4b27      	ldr	r3, [pc, #156]	; (808032c <_Z12processAlarmib+0x10c>)
      Particle.publish(PUBLISH_NAME_ALARM, alarmStr, PRIVATE);
 808028e:	9a02      	ldr	r2, [sp, #8]
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080290:	781b      	ldrb	r3, [r3, #0]
 8080292:	4927      	ldr	r1, [pc, #156]	; (8080330 <_Z12processAlarmib+0x110>)
 8080294:	f88d 0000 	strb.w	r0, [sp]
 8080298:	a812      	add	r0, sp, #72	; 0x48
 808029a:	f7ff ff57 	bl	808014c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.10.constprop.16>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808029e:	a813      	add	r0, sp, #76	; 0x4c
 80802a0:	f7ff ffa8 	bl	80801f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
    alarmDetector.setPreviousAlarmState(alarmNum, true);
 80802a4:	2201      	movs	r2, #1
 80802a6:	4621      	mov	r1, r4
 80802a8:	481f      	ldr	r0, [pc, #124]	; (8080328 <_Z12processAlarmib+0x108>)
 80802aa:	f000 fbda 	bl	8080a62 <_ZN13AlarmDetector21setPreviousAlarmStateEhb>
 * as an event to Particle.io.
 */
void processAlarm(int alarmNum, bool alarmState){
  
  if(alarmState){
    String alarmStr = String("Dryer ") + String(alarmNum+1) + String(" in Alarm");
 80802ae:	a802      	add	r0, sp, #8
 80802b0:	f000 ffd4 	bl	808125c <_ZN6StringD1Ev>
 80802b4:	e032      	b.n	808031c <_Z12processAlarmib+0xfc>
    alarmDetector.setPreviousAlarmState(alarmNum, true);
    return;
  }

  // Only publish the alarm reset state if the preivous state was in alarm
  if(alarmDetector.getPreviousAlarmState(alarmNum)){
 80802b6:	4621      	mov	r1, r4
 80802b8:	481b      	ldr	r0, [pc, #108]	; (8080328 <_Z12processAlarmib+0x108>)
 80802ba:	f000 fbcf 	bl	8080a5c <_ZN13AlarmDetector21getPreviousAlarmStateEh>
 80802be:	b340      	cbz	r0, 8080312 <_Z12processAlarmib+0xf2>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80802c0:	491c      	ldr	r1, [pc, #112]	; (8080334 <_Z12processAlarmib+0x114>)
 80802c2:	a812      	add	r0, sp, #72	; 0x48
 80802c4:	f001 f811 	bl	80812ea <_ZN6StringC1EPK19__FlashStringHelper>
    String resetStr = String("Dryer Alarm " + String(alarmNum+1) + " Reset");
 80802c8:	220a      	movs	r2, #10
 80802ca:	1c69      	adds	r1, r5, #1
 80802cc:	a80e      	add	r0, sp, #56	; 0x38
 80802ce:	f001 f84a 	bl	8081366 <_ZN6StringC1Eih>
 80802d2:	a90e      	add	r1, sp, #56	; 0x38
 80802d4:	a812      	add	r0, sp, #72	; 0x48
 80802d6:	f001 f886 	bl	80813e6 <_ZplRK15StringSumHelperRK6String>
 80802da:	4917      	ldr	r1, [pc, #92]	; (8080338 <_Z12processAlarmib+0x118>)
 80802dc:	f001 f88f 	bl	80813fe <_ZplRK15StringSumHelperPKc>
 80802e0:	4601      	mov	r1, r0
 80802e2:	a80a      	add	r0, sp, #40	; 0x28
 80802e4:	f001 f823 	bl	808132e <_ZN6StringC1ERKS_>
 80802e8:	a80e      	add	r0, sp, #56	; 0x38
 80802ea:	f000 ffb7 	bl	808125c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80802ee:	a812      	add	r0, sp, #72	; 0x48
 80802f0:	f000 ffb4 	bl	808125c <_ZN6StringD1Ev>
 80802f4:	4b0d      	ldr	r3, [pc, #52]	; (808032c <_Z12processAlarmib+0x10c>)
    Particle.publish(PUBLISH_NAME_ALARM, resetStr, PRIVATE);
 80802f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80802f8:	781b      	ldrb	r3, [r3, #0]
 80802fa:	490d      	ldr	r1, [pc, #52]	; (8080330 <_Z12processAlarmib+0x110>)
 80802fc:	a812      	add	r0, sp, #72	; 0x48
 80802fe:	f88d 6000 	strb.w	r6, [sp]
 8080302:	f7ff ff23 	bl	808014c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.10.constprop.16>
 8080306:	a813      	add	r0, sp, #76	; 0x4c
 8080308:	f7ff ff74 	bl	80801f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return;
  }

  // Only publish the alarm reset state if the preivous state was in alarm
  if(alarmDetector.getPreviousAlarmState(alarmNum)){
    String resetStr = String("Dryer Alarm " + String(alarmNum+1) + " Reset");
 808030c:	a80a      	add	r0, sp, #40	; 0x28
 808030e:	f000 ffa5 	bl	808125c <_ZN6StringD1Ev>
    Particle.publish(PUBLISH_NAME_ALARM, resetStr, PRIVATE);
  }
  alarmDetector.setPreviousAlarmState(alarmNum, false);
 8080312:	2200      	movs	r2, #0
 8080314:	4621      	mov	r1, r4
 8080316:	4804      	ldr	r0, [pc, #16]	; (8080328 <_Z12processAlarmib+0x108>)
 8080318:	f000 fba3 	bl	8080a62 <_ZN13AlarmDetector21setPreviousAlarmStateEhb>
}
 808031c:	b016      	add	sp, #88	; 0x58
 808031e:	bd70      	pop	{r4, r5, r6, pc}
 8080320:	08085ad0 	.word	0x08085ad0
 8080324:	08085ad7 	.word	0x08085ad7
 8080328:	200000d2 	.word	0x200000d2
 808032c:	20000150 	.word	0x20000150
 8080330:	08085ae1 	.word	0x08085ae1
 8080334:	08085afc 	.word	0x08085afc
 8080338:	08085aee 	.word	0x08085aee

0808033c <loop>:
  // Timer for Amp Clamp ADC updates
  timer.start();

}

void loop() {
 808033c:	b570      	push	{r4, r5, r6, lr}

  for(int i = 0; i < settings.alarms; i++){
 808033e:	4e12      	ldr	r6, [pc, #72]	; (8080388 <loop+0x4c>)
  // Timer for Amp Clamp ADC updates
  timer.start();

}

void loop() {
 8080340:	b08a      	sub	sp, #40	; 0x28

  for(int i = 0; i < settings.alarms; i++){
 8080342:	2400      	movs	r4, #0
 8080344:	7873      	ldrb	r3, [r6, #1]
 8080346:	429c      	cmp	r4, r3
 8080348:	da10      	bge.n	808036c <loop+0x30>
    // critical
    noInterrupts();
 808034a:	f001 fe72 	bl	8082032 <_Z12noInterruptsv>
    bool pinState = alarmDetector.getAlarmState(i);
 808034e:	b2e1      	uxtb	r1, r4
 8080350:	480e      	ldr	r0, [pc, #56]	; (808038c <loop+0x50>)
 8080352:	f000 fb7f 	bl	8080a54 <_ZN13AlarmDetector13getAlarmStateEh>
 8080356:	4605      	mov	r5, r0
    interrupts();
 8080358:	f001 fe6d 	bl	8082036 <_Z10interruptsv>
    // critical
    processAlarm(i, pinState);
 808035c:	1c29      	adds	r1, r5, #0
 808035e:	4620      	mov	r0, r4
 8080360:	bf18      	it	ne
 8080362:	2101      	movne	r1, #1
 8080364:	f7ff ff5c 	bl	8080220 <_Z12processAlarmib>

}

void loop() {

  for(int i = 0; i < settings.alarms; i++){
 8080368:	3401      	adds	r4, #1
 808036a:	e7eb      	b.n	8080344 <loop+0x8>
    interrupts();
    // critical
    processAlarm(i, pinState);
  }

  CellularSignal sig = Cellular.RSSI();
 808036c:	4908      	ldr	r1, [pc, #32]	; (8080390 <loop+0x54>)
 808036e:	4668      	mov	r0, sp
 8080370:	f001 ff16 	bl	80821a0 <_ZN5spark13CellularClass4RSSIEv>
  signalStrength = sig.getStrength();
 8080374:	4668      	mov	r0, sp
 8080376:	f001 f979 	bl	808166c <_ZNK14CellularSignal11getStrengthEv>
 808037a:	f002 fd81 	bl	8082e80 <__aeabi_f2d>
 808037e:	4b05      	ldr	r3, [pc, #20]	; (8080394 <loop+0x58>)
 8080380:	e9c3 0100 	strd	r0, r1, [r3]

}
 8080384:	b00a      	add	sp, #40	; 0x28
 8080386:	bd70      	pop	{r4, r5, r6, pc}
 8080388:	200000b8 	.word	0x200000b8
 808038c:	200000d2 	.word	0x200000d2
 8080390:	200005b8 	.word	0x200005b8
 8080394:	200000e0 	.word	0x200000e0

08080398 <_Z10alarmReset6String>:
/**
 * This is an exposed method to Particle.io to trigger the
 * alarm Reset relay. Any time the remote reset is triggered
 * the setAlarm 
 */
int alarmReset(String alarmNum){
 8080398:	b510      	push	{r4, lr}
 808039a:	b08c      	sub	sp, #48	; 0x30
 808039c:	4604      	mov	r4, r0
  int resetNum = alarmNum.toInt();
 808039e:	f001 f840 	bl	8081422 <_ZNK6String5toIntEv>
  if(resetNum < 1 || resetNum > settings.relays){
 80803a2:	1e01      	subs	r1, r0, #0
 80803a4:	dd2b      	ble.n	80803fe <_Z10alarmReset6String+0x66>
 80803a6:	4b17      	ldr	r3, [pc, #92]	; (8080404 <_Z10alarmReset6String+0x6c>)
 80803a8:	789b      	ldrb	r3, [r3, #2]
 80803aa:	4299      	cmp	r1, r3
 80803ac:	dc27      	bgt.n	80803fe <_Z10alarmReset6String+0x66>
    return 0;
  }

  remoteAlarmReset.process(resetNum);
 80803ae:	b2c9      	uxtb	r1, r1
 80803b0:	4815      	ldr	r0, [pc, #84]	; (8080408 <_Z10alarmReset6String+0x70>)
 80803b2:	f000 fbfd 	bl	8080bb0 <_ZN16RemoteAlarmReset7processEh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80803b6:	4915      	ldr	r1, [pc, #84]	; (808040c <_Z10alarmReset6String+0x74>)
 80803b8:	a804      	add	r0, sp, #16
 80803ba:	f000 ff96 	bl	80812ea <_ZN6StringC1EPK19__FlashStringHelper>

  Particle.publish(PUBLISH_NAME_ALARM, String("Remote Dryer Alarm " + alarmNum + " Reset Sent"), PRIVATE);
 80803be:	4621      	mov	r1, r4
 80803c0:	a804      	add	r0, sp, #16
 80803c2:	f001 f810 	bl	80813e6 <_ZplRK15StringSumHelperRK6String>
 80803c6:	4912      	ldr	r1, [pc, #72]	; (8080410 <_Z10alarmReset6String+0x78>)
 80803c8:	f001 f819 	bl	80813fe <_ZplRK15StringSumHelperPKc>
 80803cc:	4601      	mov	r1, r0
 80803ce:	a808      	add	r0, sp, #32
 80803d0:	f000 ffad 	bl	808132e <_ZN6StringC1ERKS_>
 80803d4:	4b0f      	ldr	r3, [pc, #60]	; (8080414 <_Z10alarmReset6String+0x7c>)
 80803d6:	2200      	movs	r2, #0
 80803d8:	781b      	ldrb	r3, [r3, #0]
 80803da:	490f      	ldr	r1, [pc, #60]	; (8080418 <_Z10alarmReset6String+0x80>)
 80803dc:	f88d 2000 	strb.w	r2, [sp]
 80803e0:	a802      	add	r0, sp, #8
 80803e2:	9a08      	ldr	r2, [sp, #32]
 80803e4:	f7ff feb2 	bl	808014c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.10.constprop.16>
 80803e8:	a803      	add	r0, sp, #12
 80803ea:	f7ff ff03 	bl	80801f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80803ee:	a808      	add	r0, sp, #32
 80803f0:	f000 ff34 	bl	808125c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80803f4:	a804      	add	r0, sp, #16
 80803f6:	f000 ff31 	bl	808125c <_ZN6StringD1Ev>

  return 1;
 80803fa:	2001      	movs	r0, #1
 80803fc:	e000      	b.n	8080400 <_Z10alarmReset6String+0x68>
 * the setAlarm 
 */
int alarmReset(String alarmNum){
  int resetNum = alarmNum.toInt();
  if(resetNum < 1 || resetNum > settings.relays){
    return 0;
 80803fe:	2000      	movs	r0, #0
  remoteAlarmReset.process(resetNum);

  Particle.publish(PUBLISH_NAME_ALARM, String("Remote Dryer Alarm " + alarmNum + " Reset Sent"), PRIVATE);

  return 1;
}
 8080400:	b00c      	add	sp, #48	; 0x30
 8080402:	bd10      	pop	{r4, pc}
 8080404:	200000b8 	.word	0x200000b8
 8080408:	200000c8 	.word	0x200000c8
 808040c:	08085af5 	.word	0x08085af5
 8080410:	08085b09 	.word	0x08085b09
 8080414:	20000150 	.word	0x20000150
 8080418:	08085ae1 	.word	0x08085ae1

0808041c <_Z13setAlarmCount6String>:
 * This is an exposed method to Particle.io to set the amount
 * of installed Air Dryer Alarms. The settings is saved to 
 * EEPROM.
 * param count: Number of installed Alarms 1 - 4
 */
int setAlarmCount(String count){
 808041c:	b530      	push	{r4, r5, lr}
 808041e:	b091      	sub	sp, #68	; 0x44
  int aCount = count.toInt();
 8080420:	f000 ffff 	bl	8081422 <_ZNK6String5toIntEv>
  if(aCount < 1 || aCount > alarmDetector.getDefaultAlarmCount()){
 8080424:	1e04      	subs	r4, r0, #0
 8080426:	dd04      	ble.n	8080432 <_Z13setAlarmCount6String+0x16>
 8080428:	481c      	ldr	r0, [pc, #112]	; (808049c <_Z13setAlarmCount6String+0x80>)
 808042a:	f000 fb15 	bl	8080a58 <_ZN13AlarmDetector20getDefaultAlarmCountEv>
 808042e:	4284      	cmp	r4, r0
 8080430:	dd01      	ble.n	8080436 <_Z13setAlarmCount6String+0x1a>
    return 0;
 8080432:	2000      	movs	r0, #0
 8080434:	e030      	b.n	8080498 <_Z13setAlarmCount6String+0x7c>
  }

  settings.alarms = aCount;
 8080436:	4d1a      	ldr	r5, [pc, #104]	; (80804a0 <_Z13setAlarmCount6String+0x84>)
 8080438:	706c      	strb	r4, [r5, #1]
  EEPROM.put(0, settings);
 808043a:	f002 f8fd 	bl	8082638 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 808043e:	2210      	movs	r2, #16
 8080440:	4629      	mov	r1, r5
 8080442:	2000      	movs	r0, #0
 8080444:	f000 fc58 	bl	8080cf8 <HAL_EEPROM_Put>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8080448:	4916      	ldr	r1, [pc, #88]	; (80804a4 <_Z13setAlarmCount6String+0x88>)
 808044a:	a808      	add	r0, sp, #32
 808044c:	f000 ff4d 	bl	80812ea <_ZN6StringC1EPK19__FlashStringHelper>

  Particle.publish(PUBLISH_NAME_MSG, String("Alarm Count has been updated to " + String(aCount)), PRIVATE);
 8080450:	220a      	movs	r2, #10
 8080452:	4621      	mov	r1, r4
 8080454:	a804      	add	r0, sp, #16
 8080456:	f000 ff86 	bl	8081366 <_ZN6StringC1Eih>
 808045a:	a904      	add	r1, sp, #16
 808045c:	a808      	add	r0, sp, #32
 808045e:	f000 ffc2 	bl	80813e6 <_ZplRK15StringSumHelperRK6String>
 8080462:	4601      	mov	r1, r0
 8080464:	a80c      	add	r0, sp, #48	; 0x30
 8080466:	f000 ff62 	bl	808132e <_ZN6StringC1ERKS_>
 808046a:	4b0f      	ldr	r3, [pc, #60]	; (80804a8 <_Z13setAlarmCount6String+0x8c>)
 808046c:	2200      	movs	r2, #0
 808046e:	781b      	ldrb	r3, [r3, #0]
 8080470:	490e      	ldr	r1, [pc, #56]	; (80804ac <_Z13setAlarmCount6String+0x90>)
 8080472:	f88d 2000 	strb.w	r2, [sp]
 8080476:	a802      	add	r0, sp, #8
 8080478:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 808047a:	f7ff fe67 	bl	808014c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.10.constprop.16>
 808047e:	a803      	add	r0, sp, #12
 8080480:	f7ff feb8 	bl	80801f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080484:	a80c      	add	r0, sp, #48	; 0x30
 8080486:	f000 fee9 	bl	808125c <_ZN6StringD1Ev>
 808048a:	a804      	add	r0, sp, #16
 808048c:	f000 fee6 	bl	808125c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8080490:	a808      	add	r0, sp, #32
 8080492:	f000 fee3 	bl	808125c <_ZN6StringD1Ev>

  return 1;
 8080496:	2001      	movs	r0, #1
}
 8080498:	b011      	add	sp, #68	; 0x44
 808049a:	bd30      	pop	{r4, r5, pc}
 808049c:	200000d2 	.word	0x200000d2
 80804a0:	200000b8 	.word	0x200000b8
 80804a4:	08085b15 	.word	0x08085b15
 80804a8:	20000150 	.word	0x20000150
 80804ac:	08085b36 	.word	0x08085b36

080804b0 <_Z13setRelayCount6String>:
/**
 * This is an exposed method to Particle.io to set the amount
 * of installed reset Relays. The setting is saved to EEPROM.
 * param count: Number of installed Relays 0 - 4
 */
int setRelayCount(String count){
 80804b0:	b530      	push	{r4, r5, lr}
 80804b2:	b091      	sub	sp, #68	; 0x44
  int rCount = count.toInt();
 80804b4:	f000 ffb5 	bl	8081422 <_ZNK6String5toIntEv>
  if(rCount < 0 || rCount > remoteAlarmReset.getDefaultRelayCount()){
 80804b8:	1e04      	subs	r4, r0, #0
 80804ba:	db04      	blt.n	80804c6 <_Z13setRelayCount6String+0x16>
 80804bc:	481c      	ldr	r0, [pc, #112]	; (8080530 <_Z13setRelayCount6String+0x80>)
 80804be:	f000 fb8f 	bl	8080be0 <_ZN16RemoteAlarmReset20getDefaultRelayCountEv>
 80804c2:	4284      	cmp	r4, r0
 80804c4:	dd01      	ble.n	80804ca <_Z13setRelayCount6String+0x1a>
    return 0;
 80804c6:	2000      	movs	r0, #0
 80804c8:	e030      	b.n	808052c <_Z13setRelayCount6String+0x7c>
  }

  settings.relays = rCount;
 80804ca:	4d1a      	ldr	r5, [pc, #104]	; (8080534 <_Z13setRelayCount6String+0x84>)
 80804cc:	70ac      	strb	r4, [r5, #2]

  EEPROM.put(0, settings);
 80804ce:	f002 f8b3 	bl	8082638 <_Z21__fetch_global_EEPROMv>
 80804d2:	2210      	movs	r2, #16
 80804d4:	4629      	mov	r1, r5
 80804d6:	2000      	movs	r0, #0
 80804d8:	f000 fc0e 	bl	8080cf8 <HAL_EEPROM_Put>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80804dc:	4916      	ldr	r1, [pc, #88]	; (8080538 <_Z13setRelayCount6String+0x88>)
 80804de:	a808      	add	r0, sp, #32
 80804e0:	f000 ff03 	bl	80812ea <_ZN6StringC1EPK19__FlashStringHelper>

  Particle.publish(PUBLISH_NAME_MSG, String("Relay Count has been updated to " + String(rCount)), PRIVATE);
 80804e4:	220a      	movs	r2, #10
 80804e6:	4621      	mov	r1, r4
 80804e8:	a804      	add	r0, sp, #16
 80804ea:	f000 ff3c 	bl	8081366 <_ZN6StringC1Eih>
 80804ee:	a904      	add	r1, sp, #16
 80804f0:	a808      	add	r0, sp, #32
 80804f2:	f000 ff78 	bl	80813e6 <_ZplRK15StringSumHelperRK6String>
 80804f6:	4601      	mov	r1, r0
 80804f8:	a80c      	add	r0, sp, #48	; 0x30
 80804fa:	f000 ff18 	bl	808132e <_ZN6StringC1ERKS_>
 80804fe:	4b0f      	ldr	r3, [pc, #60]	; (808053c <_Z13setRelayCount6String+0x8c>)
 8080500:	2200      	movs	r2, #0
 8080502:	781b      	ldrb	r3, [r3, #0]
 8080504:	490e      	ldr	r1, [pc, #56]	; (8080540 <_Z13setRelayCount6String+0x90>)
 8080506:	f88d 2000 	strb.w	r2, [sp]
 808050a:	a802      	add	r0, sp, #8
 808050c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 808050e:	f7ff fe1d 	bl	808014c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.10.constprop.16>
 8080512:	a803      	add	r0, sp, #12
 8080514:	f7ff fe6e 	bl	80801f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080518:	a80c      	add	r0, sp, #48	; 0x30
 808051a:	f000 fe9f 	bl	808125c <_ZN6StringD1Ev>
 808051e:	a804      	add	r0, sp, #16
 8080520:	f000 fe9c 	bl	808125c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8080524:	a808      	add	r0, sp, #32
 8080526:	f000 fe99 	bl	808125c <_ZN6StringD1Ev>

  return 1;
 808052a:	2001      	movs	r0, #1
}
 808052c:	b011      	add	sp, #68	; 0x44
 808052e:	bd30      	pop	{r4, r5, pc}
 8080530:	200000c8 	.word	0x200000c8
 8080534:	200000b8 	.word	0x200000b8
 8080538:	08085b3f 	.word	0x08085b3f
 808053c:	20000150 	.word	0x20000150
 8080540:	08085b36 	.word	0x08085b36

08080544 <_Z13setClampCount6String>:
 * This is an exposed method to Particle.io to set the amount
 * of AMP clamps that are installed on the monitor. The setting
 * is saved to EEPROM.
 * param count: Number of AMP clamps 1 - 8
 */
int setClampCount(String count){
 8080544:	b530      	push	{r4, r5, lr}
 8080546:	b091      	sub	sp, #68	; 0x44
  int cCount = count.toInt();
 8080548:	f000 ff6b 	bl	8081422 <_ZNK6String5toIntEv>
  if(cCount < 1 || cCount > ampCount){
 808054c:	1e43      	subs	r3, r0, #1
 808054e:	2b07      	cmp	r3, #7
 * of AMP clamps that are installed on the monitor. The setting
 * is saved to EEPROM.
 * param count: Number of AMP clamps 1 - 8
 */
int setClampCount(String count){
  int cCount = count.toInt();
 8080550:	4604      	mov	r4, r0
  if(cCount < 1 || cCount > ampCount){
 8080552:	d831      	bhi.n	80805b8 <_Z13setClampCount6String+0x74>
    return 0;
  }

  settings.clamps = cCount;
 8080554:	4d1a      	ldr	r5, [pc, #104]	; (80805c0 <_Z13setClampCount6String+0x7c>)
 8080556:	70e8      	strb	r0, [r5, #3]
  EEPROM.put(0, settings);
 8080558:	f002 f86e 	bl	8082638 <_Z21__fetch_global_EEPROMv>
 808055c:	2210      	movs	r2, #16
 808055e:	4629      	mov	r1, r5
 8080560:	2000      	movs	r0, #0
 8080562:	f000 fbc9 	bl	8080cf8 <HAL_EEPROM_Put>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8080566:	4917      	ldr	r1, [pc, #92]	; (80805c4 <_Z13setClampCount6String+0x80>)
 8080568:	a808      	add	r0, sp, #32
 808056a:	f000 febe 	bl	80812ea <_ZN6StringC1EPK19__FlashStringHelper>

  Particle.publish(PUBLISH_NAME_MSG, String("Amp Clamp Count has been updated to " + String(cCount)), PRIVATE);
 808056e:	220a      	movs	r2, #10
 8080570:	4621      	mov	r1, r4
 8080572:	a804      	add	r0, sp, #16
 8080574:	f000 fef7 	bl	8081366 <_ZN6StringC1Eih>
 8080578:	a904      	add	r1, sp, #16
 808057a:	a808      	add	r0, sp, #32
 808057c:	f000 ff33 	bl	80813e6 <_ZplRK15StringSumHelperRK6String>
 8080580:	4601      	mov	r1, r0
 8080582:	a80c      	add	r0, sp, #48	; 0x30
 8080584:	f000 fed3 	bl	808132e <_ZN6StringC1ERKS_>
 8080588:	4b0f      	ldr	r3, [pc, #60]	; (80805c8 <_Z13setClampCount6String+0x84>)
 808058a:	2200      	movs	r2, #0
 808058c:	781b      	ldrb	r3, [r3, #0]
 808058e:	490f      	ldr	r1, [pc, #60]	; (80805cc <_Z13setClampCount6String+0x88>)
 8080590:	f88d 2000 	strb.w	r2, [sp]
 8080594:	a802      	add	r0, sp, #8
 8080596:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8080598:	f7ff fdd8 	bl	808014c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.10.constprop.16>
 808059c:	a803      	add	r0, sp, #12
 808059e:	f7ff fe29 	bl	80801f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80805a2:	a80c      	add	r0, sp, #48	; 0x30
 80805a4:	f000 fe5a 	bl	808125c <_ZN6StringD1Ev>
 80805a8:	a804      	add	r0, sp, #16
 80805aa:	f000 fe57 	bl	808125c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80805ae:	a808      	add	r0, sp, #32
 80805b0:	f000 fe54 	bl	808125c <_ZN6StringD1Ev>

  return 1;
 80805b4:	2001      	movs	r0, #1
 80805b6:	e000      	b.n	80805ba <_Z13setClampCount6String+0x76>
 * param count: Number of AMP clamps 1 - 8
 */
int setClampCount(String count){
  int cCount = count.toInt();
  if(cCount < 1 || cCount > ampCount){
    return 0;
 80805b8:	2000      	movs	r0, #0
  EEPROM.put(0, settings);

  Particle.publish(PUBLISH_NAME_MSG, String("Amp Clamp Count has been updated to " + String(cCount)), PRIVATE);

  return 1;
}
 80805ba:	b011      	add	sp, #68	; 0x44
 80805bc:	bd30      	pop	{r4, r5, pc}
 80805be:	bf00      	nop
 80805c0:	200000b8 	.word	0x200000b8
 80805c4:	08085b60 	.word	0x08085b60
 80805c8:	20000150 	.word	0x20000150
 80805cc:	08085b36 	.word	0x08085b36

080805d0 <_Z14setCalibration6String>:
 * This is an exposed method to Particle.io to set the calibration
 * for the AMP clamps. The setting is saved to EEPROM.
 * param num: Calibration value
 */
int setCalibration(String num)
{
 80805d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80805d2:	b091      	sub	sp, #68	; 0x44
  double calibration = num.toFloat();
 80805d4:	f000 ff2a 	bl	808142c <_ZNK6String7toFloatEv>
 80805d8:	f002 fc52 	bl	8082e80 <__aeabi_f2d>
  if(calibration < 1){
 80805dc:	2200      	movs	r2, #0
 80805de:	4b1f      	ldr	r3, [pc, #124]	; (808065c <_Z14setCalibration6String+0x8c>)
 * for the AMP clamps. The setting is saved to EEPROM.
 * param num: Calibration value
 */
int setCalibration(String num)
{
  double calibration = num.toFloat();
 80805e0:	4606      	mov	r6, r0
 80805e2:	460f      	mov	r7, r1
  if(calibration < 1){
 80805e4:	f002 ff12 	bl	808340c <__aeabi_dcmplt>
 80805e8:	4604      	mov	r4, r0
 80805ea:	2800      	cmp	r0, #0
 80805ec:	d133      	bne.n	8080656 <_Z14setCalibration6String+0x86>
    return 0;
  }
  
  settings.calibration = calibration;
 80805ee:	4d1c      	ldr	r5, [pc, #112]	; (8080660 <_Z14setCalibration6String+0x90>)
 80805f0:	e9c5 6702 	strd	r6, r7, [r5, #8]
  EEPROM.put(0, settings);
 80805f4:	f002 f820 	bl	8082638 <_Z21__fetch_global_EEPROMv>
 80805f8:	2210      	movs	r2, #16
 80805fa:	4629      	mov	r1, r5
 80805fc:	4620      	mov	r0, r4
 80805fe:	f000 fb7b 	bl	8080cf8 <HAL_EEPROM_Put>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8080602:	4918      	ldr	r1, [pc, #96]	; (8080664 <_Z14setCalibration6String+0x94>)
 8080604:	a808      	add	r0, sp, #32
 8080606:	f000 fe70 	bl	80812ea <_ZN6StringC1EPK19__FlashStringHelper>

  Particle.publish(PUBLISH_NAME_MSG, String("Calibration has been updated to " + String(calibration)), PRIVATE);
 808060a:	2306      	movs	r3, #6
 808060c:	4632      	mov	r2, r6
 808060e:	9300      	str	r3, [sp, #0]
 8080610:	a804      	add	r0, sp, #16
 8080612:	463b      	mov	r3, r7
 8080614:	f000 feba 	bl	808138c <_ZN6StringC1Edi>
 8080618:	a904      	add	r1, sp, #16
 808061a:	a808      	add	r0, sp, #32
 808061c:	f000 fee3 	bl	80813e6 <_ZplRK15StringSumHelperRK6String>
 8080620:	4601      	mov	r1, r0
 8080622:	a80c      	add	r0, sp, #48	; 0x30
 8080624:	f000 fe83 	bl	808132e <_ZN6StringC1ERKS_>
 8080628:	4b0f      	ldr	r3, [pc, #60]	; (8080668 <_Z14setCalibration6String+0x98>)
 808062a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 808062c:	781b      	ldrb	r3, [r3, #0]
 808062e:	490f      	ldr	r1, [pc, #60]	; (808066c <_Z14setCalibration6String+0x9c>)
 8080630:	a802      	add	r0, sp, #8
 8080632:	f88d 4000 	strb.w	r4, [sp]
 8080636:	f7ff fd89 	bl	808014c <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.10.constprop.16>
 808063a:	a803      	add	r0, sp, #12
 808063c:	f7ff fdda 	bl	80801f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080640:	a80c      	add	r0, sp, #48	; 0x30
 8080642:	f000 fe0b 	bl	808125c <_ZN6StringD1Ev>
 8080646:	a804      	add	r0, sp, #16
 8080648:	f000 fe08 	bl	808125c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808064c:	a808      	add	r0, sp, #32
 808064e:	f000 fe05 	bl	808125c <_ZN6StringD1Ev>

  return 1;
 8080652:	2001      	movs	r0, #1
 8080654:	e000      	b.n	8080658 <_Z14setCalibration6String+0x88>
 */
int setCalibration(String num)
{
  double calibration = num.toFloat();
  if(calibration < 1){
    return 0;
 8080656:	2000      	movs	r0, #0
  EEPROM.put(0, settings);

  Particle.publish(PUBLISH_NAME_MSG, String("Calibration has been updated to " + String(calibration)), PRIVATE);

  return 1;
}
 8080658:	b011      	add	sp, #68	; 0x44
 808065a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808065c:	3ff00000 	.word	0x3ff00000
 8080660:	200000b8 	.word	0x200000b8
 8080664:	08085b85 	.word	0x08085b85
 8080668:	20000150 	.word	0x20000150
 808066c:	08085b36 	.word	0x08085b36

08080670 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 8080670:	4602      	mov	r2, r0
 8080672:	4801      	ldr	r0, [pc, #4]	; (8080678 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
 8080674:	f001 b924 	b.w	80818c0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080678:	08081895 	.word	0x08081895

0808067c <setup>:
int setAlarmCount(String alarmCount);
int setClampCount(String clampCount);
int setCalibration(String num);
void updateAmpVariable();

void setup() {
 808067c:	b570      	push	{r4, r5, r6, lr}
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 808067e:	4c3c      	ldr	r4, [pc, #240]	; (8080770 <setup+0xf4>)
 8080680:	b08e      	sub	sp, #56	; 0x38

  // Get saved settings from EEPROM
  EEPROM.get(0, settings);
 8080682:	f001 ffd9 	bl	8082638 <_Z21__fetch_global_EEPROMv>
 8080686:	2210      	movs	r2, #16
 8080688:	4621      	mov	r1, r4
 808068a:	2000      	movs	r0, #0
 808068c:	f000 fb2c 	bl	8080ce8 <HAL_EEPROM_Get>

  // Check if EEPROM data exists
  if(settings.version != 0){
 8080690:	7823      	ldrb	r3, [r4, #0]
 8080692:	b1bb      	cbz	r3, 80806c4 <setup+0x48>
    settings.version = 0;
 8080694:	2500      	movs	r5, #0
    settings.alarms = alarmDetector.getDefaultAlarmCount();
 8080696:	4837      	ldr	r0, [pc, #220]	; (8080774 <setup+0xf8>)
  // Get saved settings from EEPROM
  EEPROM.get(0, settings);

  // Check if EEPROM data exists
  if(settings.version != 0){
    settings.version = 0;
 8080698:	7025      	strb	r5, [r4, #0]
    settings.alarms = alarmDetector.getDefaultAlarmCount();
 808069a:	f000 f9dd 	bl	8080a58 <_ZN13AlarmDetector20getDefaultAlarmCountEv>
 808069e:	7060      	strb	r0, [r4, #1]
    settings.relays = remoteAlarmReset.getDefaultRelayCount();
 80806a0:	4835      	ldr	r0, [pc, #212]	; (8080778 <setup+0xfc>)
 80806a2:	f000 fa9d 	bl	8080be0 <_ZN16RemoteAlarmReset20getDefaultRelayCountEv>
    settings.clamps = ampCount;
 80806a6:	2308      	movs	r3, #8
 80806a8:	70e3      	strb	r3, [r4, #3]
    settings.calibration = cMonCalibration;
 80806aa:	4b34      	ldr	r3, [pc, #208]	; (808077c <setup+0x100>)

  // Check if EEPROM data exists
  if(settings.version != 0){
    settings.version = 0;
    settings.alarms = alarmDetector.getDefaultAlarmCount();
    settings.relays = remoteAlarmReset.getDefaultRelayCount();
 80806ac:	70a0      	strb	r0, [r4, #2]
    settings.clamps = ampCount;
    settings.calibration = cMonCalibration;
 80806ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80806b2:	e9c4 2302 	strd	r2, r3, [r4, #8]

    EEPROM.put(0, settings);
 80806b6:	f001 ffbf 	bl	8082638 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80806ba:	2210      	movs	r2, #16
 80806bc:	4621      	mov	r1, r4
 80806be:	4628      	mov	r0, r5
 80806c0:	f000 fb1a 	bl	8080cf8 <HAL_EEPROM_Put>
  }

  // Setup Particle Functions
  Particle.function("Reset_Dryer", alarmReset);
 80806c4:	492e      	ldr	r1, [pc, #184]	; (8080780 <setup+0x104>)
 80806c6:	482f      	ldr	r0, [pc, #188]	; (8080784 <setup+0x108>)
 80806c8:	f7ff ffd2 	bl	8080670 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Alarm_Count", setAlarmCount);
 80806cc:	492e      	ldr	r1, [pc, #184]	; (8080788 <setup+0x10c>)
 80806ce:	482f      	ldr	r0, [pc, #188]	; (808078c <setup+0x110>)
 80806d0:	f7ff ffce 	bl	8080670 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Clamp_Count", setClampCount);
 80806d4:	492e      	ldr	r1, [pc, #184]	; (8080790 <setup+0x114>)
 80806d6:	482f      	ldr	r0, [pc, #188]	; (8080794 <setup+0x118>)
 80806d8:	f7ff ffca 	bl	8080670 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Relay_Count", setRelayCount);
 80806dc:	492e      	ldr	r1, [pc, #184]	; (8080798 <setup+0x11c>)
 80806de:	482f      	ldr	r0, [pc, #188]	; (808079c <setup+0x120>)
 80806e0:	f7ff ffc6 	bl	8080670 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Change_Calibration", setCalibration);
 80806e4:	492e      	ldr	r1, [pc, #184]	; (80807a0 <setup+0x124>)
 80806e6:	482f      	ldr	r0, [pc, #188]	; (80807a4 <setup+0x128>)
 80806e8:	f7ff ffc2 	bl	8080670 <_ZN10CloudClass8functionIA19_cIPFi6StringEEEEbRKT_DpT0_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 80806ec:	2300      	movs	r3, #0
 80806ee:	2209      	movs	r2, #9
 80806f0:	492d      	ldr	r1, [pc, #180]	; (80807a8 <setup+0x12c>)
 80806f2:	482e      	ldr	r0, [pc, #184]	; (80807ac <setup+0x130>)
 80806f4:	f000 fc7c 	bl	8080ff0 <spark_variable>
 80806f8:	4e2d      	ldr	r6, [pc, #180]	; (80807b0 <setup+0x134>)

  // Setup Particle Variables
  Particle.variable("Signal_Strength", &signalStrength, DOUBLE);
  for(int i = 0; i < settings.clamps; i++){
 80806fa:	2500      	movs	r5, #0
 80806fc:	78e3      	ldrb	r3, [r4, #3]
 80806fe:	429d      	cmp	r5, r3
 8080700:	da22      	bge.n	8080748 <setup+0xcc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8080702:	492c      	ldr	r1, [pc, #176]	; (80807b4 <setup+0x138>)
 8080704:	a806      	add	r0, sp, #24
 8080706:	f000 fdf0 	bl	80812ea <_ZN6StringC1EPK19__FlashStringHelper>
    Particle.variable(String("Amp_" + String(i)), &AMP_READING[i], DOUBLE);
 808070a:	220a      	movs	r2, #10
 808070c:	4629      	mov	r1, r5
 808070e:	a802      	add	r0, sp, #8
 8080710:	f000 fe29 	bl	8081366 <_ZN6StringC1Eih>
 8080714:	a902      	add	r1, sp, #8
 8080716:	a806      	add	r0, sp, #24
 8080718:	f000 fe65 	bl	80813e6 <_ZplRK15StringSumHelperRK6String>
 808071c:	4601      	mov	r1, r0
 808071e:	a80a      	add	r0, sp, #40	; 0x28
 8080720:	f000 fe05 	bl	808132e <_ZN6StringC1ERKS_>
 8080724:	eb06 01c5 	add.w	r1, r6, r5, lsl #3
 8080728:	2300      	movs	r3, #0
 808072a:	2209      	movs	r2, #9
 808072c:	980a      	ldr	r0, [sp, #40]	; 0x28
 808072e:	f000 fc5f 	bl	8080ff0 <spark_variable>
 8080732:	a80a      	add	r0, sp, #40	; 0x28
 8080734:	f000 fd92 	bl	808125c <_ZN6StringD1Ev>
 8080738:	a802      	add	r0, sp, #8
 808073a:	f000 fd8f 	bl	808125c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808073e:	a806      	add	r0, sp, #24
 8080740:	f000 fd8c 	bl	808125c <_ZN6StringD1Ev>
  Particle.function("Relay_Count", setRelayCount);
  Particle.function("Change_Calibration", setCalibration);

  // Setup Particle Variables
  Particle.variable("Signal_Strength", &signalStrength, DOUBLE);
  for(int i = 0; i < settings.clamps; i++){
 8080744:	3501      	adds	r5, #1
 8080746:	e7d9      	b.n	80806fc <setup+0x80>
    bool changePeriodFromISR(unsigned period) { return _changePeriod(period, 0, true); }

    static const unsigned default_wait = 0x7FFFFFFF;

    bool start(unsigned block=default_wait) { return _start(block, false); }
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 8080748:	4c1b      	ldr	r4, [pc, #108]	; (80807b8 <setup+0x13c>)
 808074a:	2200      	movs	r2, #0
 808074c:	4611      	mov	r1, r2
 808074e:	4620      	mov	r0, r4
 8080750:	f7ff fd12 	bl	8080178 <_ZN5Timer5_stopEjb>
    bool isActive() const { return isValid() && os_timer_is_active(handle, nullptr); }

    bool _start(unsigned block, bool fromISR=false)
    {
        stop(fromISR);
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
 8080754:	68a0      	ldr	r0, [r4, #8]
 8080756:	b140      	cbz	r0, 808076a <setup+0xee>
 8080758:	2300      	movs	r3, #0
 808075a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 808075e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8080762:	4619      	mov	r1, r3
 8080764:	461a      	mov	r2, r3
 8080766:	f000 faf7 	bl	8080d58 <os_timer_change>
  }

  // Timer for Amp Clamp ADC updates
  timer.start();

}
 808076a:	b00e      	add	sp, #56	; 0x38
 808076c:	bd70      	pop	{r4, r5, r6, pc}
 808076e:	bf00      	nop
 8080770:	200000b8 	.word	0x200000b8
 8080774:	200000d2 	.word	0x200000d2
 8080778:	200000c8 	.word	0x200000c8
 808077c:	20000000 	.word	0x20000000
 8080780:	08080399 	.word	0x08080399
 8080784:	08085ba6 	.word	0x08085ba6
 8080788:	0808041d 	.word	0x0808041d
 808078c:	08085bb2 	.word	0x08085bb2
 8080790:	08080545 	.word	0x08080545
 8080794:	08085bbe 	.word	0x08085bbe
 8080798:	080804b1 	.word	0x080804b1
 808079c:	08085bca 	.word	0x08085bca
 80807a0:	080805d1 	.word	0x080805d1
 80807a4:	08085bd6 	.word	0x08085bd6
 80807a8:	200000e0 	.word	0x200000e0
 80807ac:	08085be9 	.word	0x08085be9
 80807b0:	20000158 	.word	0x20000158
 80807b4:	08085bf9 	.word	0x08085bf9
 80807b8:	200000e8 	.word	0x200000e8
 80807bc:	00000000 	.word	0x00000000

080807c0 <_GLOBAL__sub_I___appProductID>:
    double iRMS = monitor.getIrms(i, settings.calibration);
    AMP_READING[i] = iRMS;
  }

  // add publish event here
 80807c0:	b570      	push	{r4, r5, r6, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80807c2:	4b2d      	ldr	r3, [pc, #180]	; (8080878 <_GLOBAL__sub_I___appProductID+0xb8>)
 80807c4:	b088      	sub	sp, #32
 80807c6:	2201      	movs	r2, #1
 80807c8:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80807ca:	f000 fa0d 	bl	8080be8 <HAL_Pin_Map>
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
 80807ce:	f001 fe75 	bl	80824bc <spark_protocol_instance>
 80807d2:	2300      	movs	r3, #0
 80807d4:	461a      	mov	r2, r3
 80807d6:	f642 0170 	movw	r1, #10352	; 0x2870
 80807da:	f001 fe77 	bl	80824cc <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
 80807de:	f001 fe6d 	bl	80824bc <spark_protocol_instance>
 80807e2:	2300      	movs	r3, #0
 80807e4:	461a      	mov	r2, r3
 80807e6:	210d      	movs	r1, #13
 80807e8:	f001 fe78 	bl	80824dc <spark_protocol_set_product_firmware_version>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80807ec:	4b23      	ldr	r3, [pc, #140]	; (808087c <_GLOBAL__sub_I___appProductID+0xbc>)
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80807ee:	ad04      	add	r5, sp, #16
 80807f0:	9304      	str	r3, [sp, #16]
 80807f2:	ae02      	add	r6, sp, #8
{
public:

    typedef std::function<void(void)> timer_callback_fn;

    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
 80807f4:	4c22      	ldr	r4, [pc, #136]	; (8080880 <_GLOBAL__sub_I___appProductID+0xc0>)
 80807f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80807fa:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80807fe:	f104 020c 	add.w	r2, r4, #12
 8080802:	e892 0003 	ldmia.w	r2, {r0, r1}
 8080806:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 808080a:	e896 0003 	ldmia.w	r6, {r0, r1}
 808080e:	e882 0003 	stmia.w	r2, {r0, r1}
 8080812:	4a1c      	ldr	r2, [pc, #112]	; (8080884 <_GLOBAL__sub_I___appProductID+0xc4>)
 8080814:	4b1c      	ldr	r3, [pc, #112]	; (8080888 <_GLOBAL__sub_I___appProductID+0xc8>)
 8080816:	6162      	str	r2, [r4, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8080818:	69a2      	ldr	r2, [r4, #24]
 808081a:	6023      	str	r3, [r4, #0]
 808081c:	9207      	str	r2, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
 808081e:	4a1b      	ldr	r2, [pc, #108]	; (808088c <_GLOBAL__sub_I___appProductID+0xcc>)
 8080820:	2300      	movs	r3, #0
 8080822:	7123      	strb	r3, [r4, #4]
 8080824:	60a3      	str	r3, [r4, #8]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8080826:	9306      	str	r3, [sp, #24]
      __b = _GLIBCXX_MOVE(__tmp);
 8080828:	61a2      	str	r2, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
 808082a:	9301      	str	r3, [sp, #4]
 808082c:	9300      	str	r3, [sp, #0]
 808082e:	4a18      	ldr	r2, [pc, #96]	; (8080890 <_GLOBAL__sub_I___appProductID+0xd0>)
 8080830:	4623      	mov	r3, r4
 8080832:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8080836:	f104 0008 	add.w	r0, r4, #8
 808083a:	f000 fa75 	bl	8080d28 <os_timer_create>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808083e:	4628      	mov	r0, r5
 8080840:	f7ff fc91 	bl	8080166 <_ZNSt14_Function_baseD1Ev>

const uint8_t ampCount = 8;
double AMP_READING[ampCount];
double signalStrength;

Timer timer(2000, updateAmpVariables);
 8080844:	4913      	ldr	r1, [pc, #76]	; (8080894 <_GLOBAL__sub_I___appProductID+0xd4>)
 8080846:	4a14      	ldr	r2, [pc, #80]	; (8080898 <_GLOBAL__sub_I___appProductID+0xd8>)
 8080848:	4620      	mov	r0, r4
 808084a:	f001 ff41 	bl	80826d0 <__aeabi_atexit>
AlarmDetector alarmDetector;
 808084e:	4813      	ldr	r0, [pc, #76]	; (808089c <_GLOBAL__sub_I___appProductID+0xdc>)
 8080850:	f000 f93a 	bl	8080ac8 <_ZN13AlarmDetectorC1Ev>
RemoteAlarmReset remoteAlarmReset;
 8080854:	4812      	ldr	r0, [pc, #72]	; (80808a0 <_GLOBAL__sub_I___appProductID+0xe0>)
 8080856:	f000 f98d 	bl	8080b74 <_ZN16RemoteAlarmResetC1Ev>

CurrentMonitor monitor(3300, 1480);
 808085a:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 808085e:	9300      	str	r3, [sp, #0]
 8080860:	4810      	ldr	r0, [pc, #64]	; (80808a4 <_GLOBAL__sub_I___appProductID+0xe4>)
 8080862:	a303      	add	r3, pc, #12	; (adr r3, 8080870 <_GLOBAL__sub_I___appProductID+0xb0>)
 8080864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080868:	f000 f81e 	bl	80808a8 <_ZN14CurrentMonitorC1Edi>
    double iRMS = monitor.getIrms(i, settings.calibration);
    AMP_READING[i] = iRMS;
  }

  // add publish event here
 808086c:	b008      	add	sp, #32
 808086e:	bd70      	pop	{r4, r5, r6, pc}
 8080870:	00000000 	.word	0x00000000
 8080874:	40a9c800 	.word	0x40a9c800
 8080878:	20000150 	.word	0x20000150
 808087c:	080800d5 	.word	0x080800d5
 8080880:	200000e8 	.word	0x200000e8
 8080884:	080800bb 	.word	0x080800bb
 8080888:	08085ac4 	.word	0x08085ac4
 808088c:	080800b7 	.word	0x080800b7
 8080890:	08080111 	.word	0x08080111
 8080894:	08080199 	.word	0x08080199
 8080898:	200000b0 	.word	0x200000b0
 808089c:	200000d2 	.word	0x200000d2
 80808a0:	200000c8 	.word	0x200000c8
 80808a4:	20000108 	.word	0x20000108

080808a8 <_ZN14CurrentMonitorC1Edi>:
  rBurden = burden;
  vcc = boardVoltage;
  numSamples = samples;
}

CurrentMonitor::CurrentMonitor(const double boardVoltage
 80808a8:	b530      	push	{r4, r5, lr}
 80808aa:	4604      	mov	r4, r0
                ,const int samples)
 80808ac:	4605      	mov	r5, r0
 80808ae:	4907      	ldr	r1, [pc, #28]	; (80808cc <_ZN14CurrentMonitorC1Edi+0x24>)
 80808b0:	6808      	ldr	r0, [r1, #0]
 80808b2:	6849      	ldr	r1, [r1, #4]
 80808b4:	c503      	stmia	r5!, {r0, r1}
{
  vcc = boardVoltage;
 80808b6:	e9c4 2302 	strd	r2, r3, [r4, #8]
  numSamples = samples;
 80808ba:	9b03      	ldr	r3, [sp, #12]
  
  offset = ADC_COUNTS>>1;
 80808bc:	2200      	movs	r2, #0

CurrentMonitor::CurrentMonitor(const double boardVoltage
                ,const int samples)
{
  vcc = boardVoltage;
  numSamples = samples;
 80808be:	62a3      	str	r3, [r4, #40]	; 0x28
  
  offset = ADC_COUNTS>>1;
 80808c0:	4b03      	ldr	r3, [pc, #12]	; (80808d0 <_ZN14CurrentMonitorC1Edi+0x28>)
}
 80808c2:	4620      	mov	r0, r4
                ,const int samples)
{
  vcc = boardVoltage;
  numSamples = samples;
  
  offset = ADC_COUNTS>>1;
 80808c4:	e9c4 2306 	strd	r2, r3, [r4, #24]
}
 80808c8:	bd30      	pop	{r4, r5, pc}
 80808ca:	bf00      	nop
 80808cc:	08085bfe 	.word	0x08085bfe
 80808d0:	40a00000 	.word	0x40a00000

080808d4 <_ZN14CurrentMonitor13calculateIrmsEh>:

  return;
}

void CurrentMonitor::calculateIrms(const uint8_t channel)
{
 80808d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80808d8:	4604      	mov	r4, r0
 80808da:	468a      	mov	sl, r1
  double sum = 0; 
  double filtered;
  unsigned int sample;

  for (unsigned int n = 0; n < numSamples; n++)
 80808dc:	2500      	movs	r5, #0
  return;
}

void CurrentMonitor::calculateIrms(const uint8_t channel)
{
  double sum = 0; 
 80808de:	2600      	movs	r6, #0
 80808e0:	2700      	movs	r7, #0
  double filtered;
  unsigned int sample;

  for (unsigned int n = 0; n < numSamples; n++)
 80808e2:	f8d4 b028 	ldr.w	fp, [r4, #40]	; 0x28
 80808e6:	455d      	cmp	r5, fp
 80808e8:	d22b      	bcs.n	8080942 <_ZN14CurrentMonitor13calculateIrmsEh+0x6e>
  {
    sample = analogRead(hardwareLocation[channel]);
 80808ea:	f814 000a 	ldrb.w	r0, [r4, sl]
 80808ee:	f001 fe5e 	bl	80825ae <analogRead>

    // Digital low pass filter extracts the 2.5 V or 1.65 V dc offset,
    //  then subtract this - signal is now centered on 0 counts.
    offset = (offset + (sample-offset)/1024);
 80808f2:	f002 faa3 	bl	8082e3c <__aeabi_ui2d>
 80808f6:	e9d4 8906 	ldrd	r8, r9, [r4, #24]
 80808fa:	4642      	mov	r2, r8
 80808fc:	464b      	mov	r3, r9
 80808fe:	e9cd 0100 	strd	r0, r1, [sp]
 8080902:	f002 f95d 	bl	8082bc0 <__aeabi_dsub>
 8080906:	2200      	movs	r2, #0
 8080908:	4b21      	ldr	r3, [pc, #132]	; (8080990 <_ZN14CurrentMonitor13calculateIrmsEh+0xbc>)
 808090a:	f002 fb0d 	bl	8082f28 <__aeabi_dmul>
 808090e:	4642      	mov	r2, r8
 8080910:	464b      	mov	r3, r9
 8080912:	f002 f957 	bl	8082bc4 <__adddf3>
 8080916:	4602      	mov	r2, r0
 8080918:	460b      	mov	r3, r1
    filtered = sample - offset;
 808091a:	e9dd 0100 	ldrd	r0, r1, [sp]
  {
    sample = analogRead(hardwareLocation[channel]);

    // Digital low pass filter extracts the 2.5 V or 1.65 V dc offset,
    //  then subtract this - signal is now centered on 0 counts.
    offset = (offset + (sample-offset)/1024);
 808091e:	e9c4 2306 	strd	r2, r3, [r4, #24]
    filtered = sample - offset;
 8080922:	f002 f94d 	bl	8082bc0 <__aeabi_dsub>

    // Root-mean-square method current
    // 1) square current values
    double squared = filtered * filtered;
    // 2) sum
    sum += squared;
 8080926:	4602      	mov	r2, r0
 8080928:	460b      	mov	r3, r1
 808092a:	f002 fafd 	bl	8082f28 <__aeabi_dmul>
 808092e:	4602      	mov	r2, r0
 8080930:	460b      	mov	r3, r1
 8080932:	4630      	mov	r0, r6
 8080934:	4639      	mov	r1, r7
 8080936:	f002 f945 	bl	8082bc4 <__adddf3>
{
  double sum = 0; 
  double filtered;
  unsigned int sample;

  for (unsigned int n = 0; n < numSamples; n++)
 808093a:	3501      	adds	r5, #1

    // Root-mean-square method current
    // 1) square current values
    double squared = filtered * filtered;
    // 2) sum
    sum += squared;
 808093c:	4606      	mov	r6, r0
 808093e:	460f      	mov	r7, r1
{
  double sum = 0; 
  double filtered;
  unsigned int sample;

  for (unsigned int n = 0; n < numSamples; n++)
 8080940:	e7cf      	b.n	80808e2 <_ZN14CurrentMonitor13calculateIrmsEh+0xe>
    double squared = filtered * filtered;
    // 2) sum
    sum += squared;
  }

  double I_RATIO = Ical *((vcc/1000.0) / (ADC_COUNTS));
 8080942:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8080946:	2200      	movs	r2, #0
 8080948:	4b12      	ldr	r3, [pc, #72]	; (8080994 <_ZN14CurrentMonitor13calculateIrmsEh+0xc0>)
 808094a:	f002 fc17 	bl	808317c <__aeabi_ddiv>
 808094e:	2200      	movs	r2, #0
 8080950:	4b11      	ldr	r3, [pc, #68]	; (8080998 <_ZN14CurrentMonitor13calculateIrmsEh+0xc4>)
 8080952:	f002 fae9 	bl	8082f28 <__aeabi_dmul>
 8080956:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 808095a:	f002 fae5 	bl	8082f28 <__aeabi_dmul>
 808095e:	4680      	mov	r8, r0
  iRMS = I_RATIO * sqrt(sum / numSamples);
 8080960:	4658      	mov	r0, fp
    double squared = filtered * filtered;
    // 2) sum
    sum += squared;
  }

  double I_RATIO = Ical *((vcc/1000.0) / (ADC_COUNTS));
 8080962:	4689      	mov	r9, r1
  iRMS = I_RATIO * sqrt(sum / numSamples);
 8080964:	f002 fa6a 	bl	8082e3c <__aeabi_ui2d>
 8080968:	4602      	mov	r2, r0
 808096a:	460b      	mov	r3, r1
 808096c:	4630      	mov	r0, r6
 808096e:	4639      	mov	r1, r7
 8080970:	f002 fc04 	bl	808317c <__aeabi_ddiv>
 8080974:	f001 fffe 	bl	8082974 <sqrt>
 8080978:	4602      	mov	r2, r0
 808097a:	460b      	mov	r3, r1
 808097c:	4640      	mov	r0, r8
 808097e:	4649      	mov	r1, r9
 8080980:	f002 fad2 	bl	8082f28 <__aeabi_dmul>
 8080984:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30

  return;
 8080988:	b003      	add	sp, #12
 808098a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808098e:	bf00      	nop
 8080990:	3f500000 	.word	0x3f500000
 8080994:	408f4000 	.word	0x408f4000
 8080998:	3f300000 	.word	0x3f300000

0808099c <_ZN14CurrentMonitor7getIrmsEhd>:
  return iRMS * vRMS;
}

double CurrentMonitor::getIrms(const uint8_t channel, const double calibration)
{
  if(channel < 0 || channel > maxClampCount - 1){
 808099c:	2907      	cmp	r1, #7
  calculate(channel);
  return iRMS * vRMS;
}

double CurrentMonitor::getIrms(const uint8_t channel, const double calibration)
{
 808099e:	b510      	push	{r4, lr}
 80809a0:	4604      	mov	r4, r0
  if(channel < 0 || channel > maxClampCount - 1){
 80809a2:	d806      	bhi.n	80809b2 <_ZN14CurrentMonitor7getIrmsEhd+0x16>
    return -1;
  }
  Ical = calibration;
 80809a4:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
  calculateIrms(channel);
 80809a8:	f7ff ff94 	bl	80808d4 <_ZN14CurrentMonitor13calculateIrmsEh>
  return iRMS;
 80809ac:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
 80809b0:	bd10      	pop	{r4, pc}
}

double CurrentMonitor::getIrms(const uint8_t channel, const double calibration)
{
  if(channel < 0 || channel > maxClampCount - 1){
    return -1;
 80809b2:	2000      	movs	r0, #0
 80809b4:	4900      	ldr	r1, [pc, #0]	; (80809b8 <_ZN14CurrentMonitor7getIrmsEhd+0x1c>)
  }
  Ical = calibration;
  calculateIrms(channel);
  return iRMS;
}
 80809b6:	bd10      	pop	{r4, pc}
 80809b8:	bff00000 	.word	0xbff00000

080809bc <_GLOBAL__sub_I__ZN14CurrentMonitorC2Eddiidi>:
 80809bc:	f000 b914 	b.w	8080be8 <HAL_Pin_Map>

080809c0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt7_Mem_fnIM13AlarmDetectorFvvEEPS3_EEE9_M_invokeERKSt9_Any_data>:
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80809c0:	6803      	ldr	r3, [r0, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 80809c2:	685a      	ldr	r2, [r3, #4]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80809c4:	6898      	ldr	r0, [r3, #8]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 80809c6:	f012 0f01 	tst.w	r2, #1
 80809ca:	ea4f 0262 	mov.w	r2, r2, asr #1
 80809ce:	bf18      	it	ne
 80809d0:	5881      	ldrne	r1, [r0, r2]
 80809d2:	681b      	ldr	r3, [r3, #0]
 80809d4:	4410      	add	r0, r2
 80809d6:	bf18      	it	ne
 80809d8:	58cb      	ldrne	r3, [r1, r3]
 80809da:	4718      	bx	r3

080809dc <_ZN13AlarmDetector6alarm0Ev>:
const uint8_t AlarmDetector::getAlarmState(uint8_t alarm){
    return alarmState[alarm];
}

void AlarmDetector::alarm0()
{
 80809dc:	b510      	push	{r4, lr}
 80809de:	4604      	mov	r4, r0
    alarmState[0] = digitalRead(hardwareAlarmPin[0]);
 80809e0:	7a00      	ldrb	r0, [r0, #8]
 80809e2:	f001 fdd1 	bl	8082588 <digitalRead>
 80809e6:	b2c0      	uxtb	r0, r0
 80809e8:	7020      	strb	r0, [r4, #0]
 80809ea:	bd10      	pop	{r4, pc}

080809ec <_ZN13AlarmDetector6alarm1Ev>:
}
void AlarmDetector::alarm1()
{
 80809ec:	b510      	push	{r4, lr}
 80809ee:	4604      	mov	r4, r0
    alarmState[1] = digitalRead(hardwareAlarmPin[1]);
 80809f0:	7a40      	ldrb	r0, [r0, #9]
 80809f2:	f001 fdc9 	bl	8082588 <digitalRead>
 80809f6:	b2c0      	uxtb	r0, r0
 80809f8:	7060      	strb	r0, [r4, #1]
 80809fa:	bd10      	pop	{r4, pc}

080809fc <_ZN13AlarmDetector6alarm2Ev>:
}
void AlarmDetector::alarm2()
{
 80809fc:	b510      	push	{r4, lr}
 80809fe:	4604      	mov	r4, r0
    alarmState[2] = digitalRead(hardwareAlarmPin[2]);
 8080a00:	7a80      	ldrb	r0, [r0, #10]
 8080a02:	f001 fdc1 	bl	8082588 <digitalRead>
 8080a06:	b2c0      	uxtb	r0, r0
 8080a08:	70a0      	strb	r0, [r4, #2]
 8080a0a:	bd10      	pop	{r4, pc}

08080a0c <_ZN13AlarmDetector6alarm3Ev>:
}
void AlarmDetector::alarm3()
{
 8080a0c:	b510      	push	{r4, lr}
 8080a0e:	4604      	mov	r4, r0
    alarmState[3] = digitalRead(hardwareAlarmPin[3]);
 8080a10:	7ac0      	ldrb	r0, [r0, #11]
 8080a12:	f001 fdb9 	bl	8082588 <digitalRead>
 8080a16:	b2c0      	uxtb	r0, r0
 8080a18:	70e0      	strb	r0, [r4, #3]
 8080a1a:	bd10      	pop	{r4, pc}

08080a1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM13AlarmDetectorFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8080a1c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8080a1e:	b538      	push	{r3, r4, r5, lr}
 8080a20:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8080a22:	d005      	beq.n	8080a30 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM13AlarmDetectorFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
 8080a24:	2a03      	cmp	r2, #3
 8080a26:	d00f      	beq.n	8080a48 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM13AlarmDetectorFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2c>
 8080a28:	2a01      	cmp	r2, #1
 8080a2a:	d111      	bne.n	8080a50 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM13AlarmDetectorFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x34>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8080a2c:	680b      	ldr	r3, [r1, #0]
 8080a2e:	e009      	b.n	8080a44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM13AlarmDetectorFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8080a30:	200c      	movs	r0, #12
 8080a32:	680d      	ldr	r5, [r1, #0]
 8080a34:	f7ff fb33 	bl	808009e <_Znwj>
 8080a38:	4603      	mov	r3, r0
 8080a3a:	b118      	cbz	r0, 8080a44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM13AlarmDetectorFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
 8080a3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8080a40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8080a44:	6023      	str	r3, [r4, #0]
 8080a46:	e003      	b.n	8080a50 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM13AlarmDetectorFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x34>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8080a48:	210c      	movs	r1, #12
 8080a4a:	6800      	ldr	r0, [r0, #0]
 8080a4c:	f001 fe45 	bl	80826da <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8080a50:	2000      	movs	r0, #0
 8080a52:	bd38      	pop	{r3, r4, r5, pc}

08080a54 <_ZN13AlarmDetector13getAlarmStateEh>:
  attachInterrupt(digitalPinToInterrupt(hardwareAlarmPin[2]), &AlarmDetector::alarm2, this, CHANGE);
  attachInterrupt(digitalPinToInterrupt(hardwareAlarmPin[3]), &AlarmDetector::alarm3, this, CHANGE);
}

const uint8_t AlarmDetector::getAlarmState(uint8_t alarm){
    return alarmState[alarm];
 8080a54:	5c40      	ldrb	r0, [r0, r1]
}
 8080a56:	4770      	bx	lr

08080a58 <_ZN13AlarmDetector20getDefaultAlarmCountEv>:
}

const uint8_t AlarmDetector::getDefaultAlarmCount()
{
    return alarmCount;
}
 8080a58:	2004      	movs	r0, #4
 8080a5a:	4770      	bx	lr

08080a5c <_ZN13AlarmDetector21getPreviousAlarmStateEh>:

const uint8_t AlarmDetector::getPreviousAlarmState(uint8_t alarm){
    return previousAlarmState[alarm];
 8080a5c:	4401      	add	r1, r0
}
 8080a5e:	7908      	ldrb	r0, [r1, #4]
 8080a60:	4770      	bx	lr

08080a62 <_ZN13AlarmDetector21setPreviousAlarmStateEhb>:

void AlarmDetector::setPreviousAlarmState(uint8_t alarm, bool state){
    previousAlarmState[alarm] = state;
 8080a62:	4401      	add	r1, r0
 8080a64:	710a      	strb	r2, [r1, #4]
 8080a66:	4770      	bx	lr

08080a68 <_Z15attachInterruptI13AlarmDetectorEbtMT_FvvEPS1_13InterruptModeah>:
 * GPIO Interrupts
 */
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
 8080a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080a6a:	b089      	sub	sp, #36	; 0x24
 8080a6c:	4604      	mov	r4, r0
 8080a6e:	a802      	add	r0, sp, #8
 8080a70:	e880 0006 	stmia.w	r0, {r1, r2}
 8080a74:	461d      	mov	r5, r3
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8080a76:	200c      	movs	r0, #12
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080a78:	2300      	movs	r3, #0
 8080a7a:	460f      	mov	r7, r1
 8080a7c:	9e03      	ldr	r6, [sp, #12]
 8080a7e:	9306      	str	r3, [sp, #24]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8080a80:	f7ff fb0d 	bl	808009e <_Znwj>
 8080a84:	b110      	cbz	r0, 8080a8c <_Z15attachInterruptI13AlarmDetectorEbtMT_FvvEPS1_13InterruptModeah+0x24>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 8080a86:	6007      	str	r7, [r0, #0]
 8080a88:	6046      	str	r6, [r0, #4]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8080a8a:	6085      	str	r5, [r0, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8080a8c:	4b0c      	ldr	r3, [pc, #48]	; (8080ac0 <_Z15attachInterruptI13AlarmDetectorEbtMT_FvvEPS1_13InterruptModeah+0x58>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8080a8e:	9004      	str	r0, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8080a90:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
 8080a92:	4b0c      	ldr	r3, [pc, #48]	; (8080ac4 <_Z15attachInterruptI13AlarmDetectorEbtMT_FvvEPS1_13InterruptModeah+0x5c>)
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
 8080a94:	4620      	mov	r0, r4
 8080a96:	9306      	str	r3, [sp, #24]
 8080a98:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8080a9c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8080aa0:	9300      	str	r3, [sp, #0]
 8080aa2:	a904      	add	r1, sp, #16
 8080aa4:	f99d 303c 	ldrsb.w	r3, [sp, #60]	; 0x3c
 8080aa8:	f001 faf4 	bl	8082094 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8080aac:	9b06      	ldr	r3, [sp, #24]
 8080aae:	4604      	mov	r4, r0
 8080ab0:	b11b      	cbz	r3, 8080aba <_Z15attachInterruptI13AlarmDetectorEbtMT_FvvEPS1_13InterruptModeah+0x52>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8080ab2:	a904      	add	r1, sp, #16
 8080ab4:	2203      	movs	r2, #3
 8080ab6:	4608      	mov	r0, r1
 8080ab8:	4798      	blx	r3
}
 8080aba:	4620      	mov	r0, r4
 8080abc:	b009      	add	sp, #36	; 0x24
 8080abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8080ac0:	080809c1 	.word	0x080809c1
 8080ac4:	08080a1d 	.word	0x08080a1d

08080ac8 <_ZN13AlarmDetectorC1Ev>:
#include "AlarmDetector.h"

/**
 * Constructor.
 */
AlarmDetector::AlarmDetector()
 8080ac8:	b570      	push	{r4, r5, r6, lr}
 8080aca:	4604      	mov	r4, r0
 8080acc:	2300      	movs	r3, #0
 8080ace:	6003      	str	r3, [r0, #0]
 8080ad0:	6043      	str	r3, [r0, #4]
 8080ad2:	4b22      	ldr	r3, [pc, #136]	; (8080b5c <_ZN13AlarmDetectorC1Ev+0x94>)
 8080ad4:	b08c      	sub	sp, #48	; 0x30
 8080ad6:	681b      	ldr	r3, [r3, #0]
 8080ad8:	1dc5      	adds	r5, r0, #7
 8080ada:	6083      	str	r3, [r0, #8]
 8080adc:	f100 060b 	add.w	r6, r0, #11
{
  for(uint8_t i = 0; i < alarmCount; i++){
      pinMode(hardwareAlarmPin[i], INPUT);
 8080ae0:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8080ae4:	2100      	movs	r1, #0
 8080ae6:	f001 fd25 	bl	8082534 <pinMode>
/**
 * Constructor.
 */
AlarmDetector::AlarmDetector()
{
  for(uint8_t i = 0; i < alarmCount; i++){
 8080aea:	42b5      	cmp	r5, r6
 8080aec:	d1f8      	bne.n	8080ae0 <_ZN13AlarmDetectorC1Ev+0x18>
      pinMode(hardwareAlarmPin[i], INPUT);
  }

  attachInterrupt(digitalPinToInterrupt(hardwareAlarmPin[0]), &AlarmDetector::alarm0, this, CHANGE);
 8080aee:	2500      	movs	r5, #0
 8080af0:	f04f 36ff 	mov.w	r6, #4294967295
 8080af4:	e88d 0060 	stmia.w	sp, {r5, r6}
 8080af8:	4b19      	ldr	r3, [pc, #100]	; (8080b60 <_ZN13AlarmDetectorC1Ev+0x98>)
 8080afa:	9505      	str	r5, [sp, #20]
 8080afc:	9304      	str	r3, [sp, #16]
 8080afe:	9502      	str	r5, [sp, #8]
 8080b00:	aa04      	add	r2, sp, #16
 8080b02:	4623      	mov	r3, r4
 8080b04:	ca06      	ldmia	r2, {r1, r2}
 8080b06:	7a20      	ldrb	r0, [r4, #8]
 8080b08:	f7ff ffae 	bl	8080a68 <_Z15attachInterruptI13AlarmDetectorEbtMT_FvvEPS1_13InterruptModeah>
  attachInterrupt(digitalPinToInterrupt(hardwareAlarmPin[1]), &AlarmDetector::alarm1, this, CHANGE);
 8080b0c:	e88d 0060 	stmia.w	sp, {r5, r6}
 8080b10:	4b14      	ldr	r3, [pc, #80]	; (8080b64 <_ZN13AlarmDetectorC1Ev+0x9c>)
 8080b12:	9507      	str	r5, [sp, #28]
 8080b14:	9306      	str	r3, [sp, #24]
 8080b16:	9502      	str	r5, [sp, #8]
 8080b18:	aa06      	add	r2, sp, #24
 8080b1a:	4623      	mov	r3, r4
 8080b1c:	ca06      	ldmia	r2, {r1, r2}
 8080b1e:	7a60      	ldrb	r0, [r4, #9]
 8080b20:	f7ff ffa2 	bl	8080a68 <_Z15attachInterruptI13AlarmDetectorEbtMT_FvvEPS1_13InterruptModeah>
  attachInterrupt(digitalPinToInterrupt(hardwareAlarmPin[2]), &AlarmDetector::alarm2, this, CHANGE);
 8080b24:	e88d 0060 	stmia.w	sp, {r5, r6}
 8080b28:	4b0f      	ldr	r3, [pc, #60]	; (8080b68 <_ZN13AlarmDetectorC1Ev+0xa0>)
 8080b2a:	9509      	str	r5, [sp, #36]	; 0x24
 8080b2c:	9308      	str	r3, [sp, #32]
 8080b2e:	9502      	str	r5, [sp, #8]
 8080b30:	aa08      	add	r2, sp, #32
 8080b32:	4623      	mov	r3, r4
 8080b34:	ca06      	ldmia	r2, {r1, r2}
 8080b36:	7aa0      	ldrb	r0, [r4, #10]
 8080b38:	f7ff ff96 	bl	8080a68 <_Z15attachInterruptI13AlarmDetectorEbtMT_FvvEPS1_13InterruptModeah>
  attachInterrupt(digitalPinToInterrupt(hardwareAlarmPin[3]), &AlarmDetector::alarm3, this, CHANGE);
 8080b3c:	e88d 0060 	stmia.w	sp, {r5, r6}
 8080b40:	4b0a      	ldr	r3, [pc, #40]	; (8080b6c <_ZN13AlarmDetectorC1Ev+0xa4>)
 8080b42:	950b      	str	r5, [sp, #44]	; 0x2c
 8080b44:	930a      	str	r3, [sp, #40]	; 0x28
 8080b46:	9502      	str	r5, [sp, #8]
 8080b48:	aa0c      	add	r2, sp, #48	; 0x30
 8080b4a:	7ae0      	ldrb	r0, [r4, #11]
 8080b4c:	4623      	mov	r3, r4
 8080b4e:	e912 0006 	ldmdb	r2, {r1, r2}
 8080b52:	f7ff ff89 	bl	8080a68 <_Z15attachInterruptI13AlarmDetectorEbtMT_FvvEPS1_13InterruptModeah>
}
 8080b56:	4620      	mov	r0, r4
 8080b58:	b00c      	add	sp, #48	; 0x30
 8080b5a:	bd70      	pop	{r4, r5, r6, pc}
 8080b5c:	08085c06 	.word	0x08085c06
 8080b60:	080809dd 	.word	0x080809dd
 8080b64:	080809ed 	.word	0x080809ed
 8080b68:	080809fd 	.word	0x080809fd
 8080b6c:	08080a0d 	.word	0x08080a0d

08080b70 <_GLOBAL__sub_I__ZN13AlarmDetectorC2Ev>:
 8080b70:	f000 b83a 	b.w	8080be8 <HAL_Pin_Map>

08080b74 <_ZN16RemoteAlarmResetC1Ev>:
#include "RemoteAlarmReset.h"

/**
 * Constructor.
 */
RemoteAlarmReset::RemoteAlarmReset()
 8080b74:	4603      	mov	r3, r0
 8080b76:	b570      	push	{r4, r5, r6, lr}
 8080b78:	4604      	mov	r4, r0
 8080b7a:	4605      	mov	r5, r0
 8080b7c:	490b      	ldr	r1, [pc, #44]	; (8080bac <_ZN16RemoteAlarmResetC1Ev+0x38>)
 8080b7e:	22c8      	movs	r2, #200	; 0xc8
 8080b80:	f823 2b02 	strh.w	r2, [r3], #2
 8080b84:	680a      	ldr	r2, [r1, #0]
 8080b86:	f100 0608 	add.w	r6, r0, #8
 8080b8a:	f8c0 2002 	str.w	r2, [r0, #2]
 8080b8e:	684a      	ldr	r2, [r1, #4]
 8080b90:	605a      	str	r2, [r3, #4]
{
    for(int i = 0; i < relayCount; i++){
        pinMode(hardwareRelayPin[i], OUTPUT);
 8080b92:	f835 0f02 	ldrh.w	r0, [r5, #2]!
 8080b96:	2101      	movs	r1, #1
 8080b98:	f001 fccc 	bl	8082534 <pinMode>
        digitalWrite(hardwareRelayPin[i], HIGH);
 8080b9c:	2101      	movs	r1, #1
 8080b9e:	8828      	ldrh	r0, [r5, #0]
 8080ba0:	f001 fcd9 	bl	8082556 <digitalWrite>
/**
 * Constructor.
 */
RemoteAlarmReset::RemoteAlarmReset()
{
    for(int i = 0; i < relayCount; i++){
 8080ba4:	42b5      	cmp	r5, r6
 8080ba6:	d1f4      	bne.n	8080b92 <_ZN16RemoteAlarmResetC1Ev+0x1e>
        pinMode(hardwareRelayPin[i], OUTPUT);
        digitalWrite(hardwareRelayPin[i], HIGH);
    }
}
 8080ba8:	4620      	mov	r0, r4
 8080baa:	bd70      	pop	{r4, r5, r6, pc}
 8080bac:	08085c0a 	.word	0x08085c0a

08080bb0 <_ZN16RemoteAlarmReset7processEh>:

void RemoteAlarmReset::process(const uint8_t resetNum){
 8080bb0:	b570      	push	{r4, r5, r6, lr}
 8080bb2:	460d      	mov	r5, r1
 8080bb4:	4604      	mov	r4, r0
    digitalWrite(hardwareRelayPin[resetNum-1], LOW);
 8080bb6:	2100      	movs	r1, #0
 8080bb8:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 8080bbc:	f001 fccb 	bl	8082556 <digitalWrite>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8080bc0:	f000 f882 	bl	8080cc8 <HAL_Timer_Get_Milli_Seconds>
 8080bc4:	4606      	mov	r6, r0
 8080bc6:	f000 f87f 	bl	8080cc8 <HAL_Timer_Get_Milli_Seconds>
    long resetDelay = millis();

    while(millis() - resetDelay < RELAY_DELAY); //wait (this is here instead to delay() so interrupts can occur)
 8080bca:	8823      	ldrh	r3, [r4, #0]
 8080bcc:	1b80      	subs	r0, r0, r6
 8080bce:	4298      	cmp	r0, r3
 8080bd0:	d3f9      	bcc.n	8080bc6 <_ZN16RemoteAlarmReset7processEh+0x16>
  
    digitalWrite(hardwareRelayPin[resetNum-1], HIGH);
 8080bd2:	f834 0015 	ldrh.w	r0, [r4, r5, lsl #1]
 8080bd6:	2101      	movs	r1, #1
}
 8080bd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digitalWrite(hardwareRelayPin[resetNum-1], LOW);
    long resetDelay = millis();

    while(millis() - resetDelay < RELAY_DELAY); //wait (this is here instead to delay() so interrupts can occur)
  
    digitalWrite(hardwareRelayPin[resetNum-1], HIGH);
 8080bdc:	f001 bcbb 	b.w	8082556 <digitalWrite>

08080be0 <_ZN16RemoteAlarmReset20getDefaultRelayCountEv>:
}

const uint8_t RemoteAlarmReset::getDefaultRelayCount(){
    return relayCount;
 8080be0:	2004      	movs	r0, #4
 8080be2:	4770      	bx	lr

08080be4 <_GLOBAL__sub_I__ZN16RemoteAlarmResetC2Ev>:
 8080be4:	f000 b800 	b.w	8080be8 <HAL_Pin_Map>

08080be8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 8080be8:	b508      	push	{r3, lr}
 8080bea:	4b02      	ldr	r3, [pc, #8]	; (8080bf4 <HAL_Pin_Map+0xc>)
 8080bec:	681b      	ldr	r3, [r3, #0]
 8080bee:	681b      	ldr	r3, [r3, #0]
 8080bf0:	9301      	str	r3, [sp, #4]
 8080bf2:	bd08      	pop	{r3, pc}
 8080bf4:	080401b0 	.word	0x080401b0

08080bf8 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 8080bf8:	b508      	push	{r3, lr}
 8080bfa:	4b02      	ldr	r3, [pc, #8]	; (8080c04 <HAL_Validate_Pin_Function+0xc>)
 8080bfc:	681b      	ldr	r3, [r3, #0]
 8080bfe:	685b      	ldr	r3, [r3, #4]
 8080c00:	9301      	str	r3, [sp, #4]
 8080c02:	bd08      	pop	{r3, pc}
 8080c04:	080401b0 	.word	0x080401b0

08080c08 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8080c08:	b508      	push	{r3, lr}
 8080c0a:	4b02      	ldr	r3, [pc, #8]	; (8080c14 <HAL_Pin_Mode+0xc>)
 8080c0c:	681b      	ldr	r3, [r3, #0]
 8080c0e:	689b      	ldr	r3, [r3, #8]
 8080c10:	9301      	str	r3, [sp, #4]
 8080c12:	bd08      	pop	{r3, pc}
 8080c14:	080401b0 	.word	0x080401b0

08080c18 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8080c18:	b508      	push	{r3, lr}
 8080c1a:	4b02      	ldr	r3, [pc, #8]	; (8080c24 <HAL_Get_Pin_Mode+0xc>)
 8080c1c:	681b      	ldr	r3, [r3, #0]
 8080c1e:	68db      	ldr	r3, [r3, #12]
 8080c20:	9301      	str	r3, [sp, #4]
 8080c22:	bd08      	pop	{r3, pc}
 8080c24:	080401b0 	.word	0x080401b0

08080c28 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8080c28:	b508      	push	{r3, lr}
 8080c2a:	4b02      	ldr	r3, [pc, #8]	; (8080c34 <HAL_GPIO_Write+0xc>)
 8080c2c:	681b      	ldr	r3, [r3, #0]
 8080c2e:	691b      	ldr	r3, [r3, #16]
 8080c30:	9301      	str	r3, [sp, #4]
 8080c32:	bd08      	pop	{r3, pc}
 8080c34:	080401b0 	.word	0x080401b0

08080c38 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 8080c38:	b508      	push	{r3, lr}
 8080c3a:	4b02      	ldr	r3, [pc, #8]	; (8080c44 <HAL_GPIO_Read+0xc>)
 8080c3c:	681b      	ldr	r3, [r3, #0]
 8080c3e:	695b      	ldr	r3, [r3, #20]
 8080c40:	9301      	str	r3, [sp, #4]
 8080c42:	bd08      	pop	{r3, pc}
 8080c44:	080401b0 	.word	0x080401b0

08080c48 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 8080c48:	b508      	push	{r3, lr}
 8080c4a:	4b02      	ldr	r3, [pc, #8]	; (8080c54 <HAL_Interrupts_Attach+0xc>)
 8080c4c:	681b      	ldr	r3, [r3, #0]
 8080c4e:	699b      	ldr	r3, [r3, #24]
 8080c50:	9301      	str	r3, [sp, #4]
 8080c52:	bd08      	pop	{r3, pc}
 8080c54:	080401b0 	.word	0x080401b0

08080c58 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 8080c58:	b508      	push	{r3, lr}
 8080c5a:	4b02      	ldr	r3, [pc, #8]	; (8080c64 <HAL_Interrupts_Detach+0xc>)
 8080c5c:	681b      	ldr	r3, [r3, #0]
 8080c5e:	69db      	ldr	r3, [r3, #28]
 8080c60:	9301      	str	r3, [sp, #4]
 8080c62:	bd08      	pop	{r3, pc}
 8080c64:	080401b0 	.word	0x080401b0

08080c68 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
 8080c68:	b508      	push	{r3, lr}
 8080c6a:	4b02      	ldr	r3, [pc, #8]	; (8080c74 <HAL_Interrupts_Enable_All+0xc>)
 8080c6c:	681b      	ldr	r3, [r3, #0]
 8080c6e:	6a1b      	ldr	r3, [r3, #32]
 8080c70:	9301      	str	r3, [sp, #4]
 8080c72:	bd08      	pop	{r3, pc}
 8080c74:	080401b0 	.word	0x080401b0

08080c78 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
 8080c78:	b508      	push	{r3, lr}
 8080c7a:	4b02      	ldr	r3, [pc, #8]	; (8080c84 <HAL_Interrupts_Disable_All+0xc>)
 8080c7c:	681b      	ldr	r3, [r3, #0]
 8080c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8080c80:	9301      	str	r3, [sp, #4]
 8080c82:	bd08      	pop	{r3, pc}
 8080c84:	080401b0 	.word	0x080401b0

08080c88 <HAL_ADC_Read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 8080c88:	b508      	push	{r3, lr}
 8080c8a:	4b02      	ldr	r3, [pc, #8]	; (8080c94 <HAL_ADC_Read+0xc>)
 8080c8c:	681b      	ldr	r3, [r3, #0]
 8080c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080c90:	9301      	str	r3, [sp, #4]
 8080c92:	bd08      	pop	{r3, pc}
 8080c94:	080401b0 	.word	0x080401b0

08080c98 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 8080c98:	b508      	push	{r3, lr}
 8080c9a:	4b02      	ldr	r3, [pc, #8]	; (8080ca4 <HAL_SPI_Init+0xc>)
 8080c9c:	681b      	ldr	r3, [r3, #0]
 8080c9e:	69db      	ldr	r3, [r3, #28]
 8080ca0:	9301      	str	r3, [sp, #4]
 8080ca2:	bd08      	pop	{r3, pc}
 8080ca4:	080401b4 	.word	0x080401b4

08080ca8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 8080ca8:	b508      	push	{r3, lr}
 8080caa:	4b02      	ldr	r3, [pc, #8]	; (8080cb4 <HAL_SPI_Is_Enabled+0xc>)
 8080cac:	681b      	ldr	r3, [r3, #0]
 8080cae:	6a1b      	ldr	r3, [r3, #32]
 8080cb0:	9301      	str	r3, [sp, #4]
 8080cb2:	bd08      	pop	{r3, pc}
 8080cb4:	080401b4 	.word	0x080401b4

08080cb8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8080cb8:	b508      	push	{r3, lr}
 8080cba:	4b02      	ldr	r3, [pc, #8]	; (8080cc4 <HAL_RNG_GetRandomNumber+0xc>)
 8080cbc:	681b      	ldr	r3, [r3, #0]
 8080cbe:	685b      	ldr	r3, [r3, #4]
 8080cc0:	9301      	str	r3, [sp, #4]
 8080cc2:	bd08      	pop	{r3, pc}
 8080cc4:	0804019c 	.word	0x0804019c

08080cc8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8080cc8:	b508      	push	{r3, lr}
 8080cca:	4b02      	ldr	r3, [pc, #8]	; (8080cd4 <HAL_Timer_Get_Milli_Seconds+0xc>)
 8080ccc:	681b      	ldr	r3, [r3, #0]
 8080cce:	695b      	ldr	r3, [r3, #20]
 8080cd0:	9301      	str	r3, [sp, #4]
 8080cd2:	bd08      	pop	{r3, pc}
 8080cd4:	0804019c 	.word	0x0804019c

08080cd8 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 8080cd8:	b508      	push	{r3, lr}
 8080cda:	4b02      	ldr	r3, [pc, #8]	; (8080ce4 <HAL_EEPROM_Init+0xc>)
 8080cdc:	681b      	ldr	r3, [r3, #0]
 8080cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8080ce0:	9301      	str	r3, [sp, #4]
 8080ce2:	bd08      	pop	{r3, pc}
 8080ce4:	0804019c 	.word	0x0804019c

08080ce8 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 8080ce8:	b508      	push	{r3, lr}
 8080cea:	4b02      	ldr	r3, [pc, #8]	; (8080cf4 <HAL_EEPROM_Get+0xc>)
 8080cec:	681b      	ldr	r3, [r3, #0]
 8080cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8080cf0:	9301      	str	r3, [sp, #4]
 8080cf2:	bd08      	pop	{r3, pc}
 8080cf4:	0804019c 	.word	0x0804019c

08080cf8 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 8080cf8:	b508      	push	{r3, lr}
 8080cfa:	4b02      	ldr	r3, [pc, #8]	; (8080d04 <HAL_EEPROM_Put+0xc>)
 8080cfc:	681b      	ldr	r3, [r3, #0]
 8080cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8080d00:	9301      	str	r3, [sp, #4]
 8080d02:	bd08      	pop	{r3, pc}
 8080d04:	0804019c 	.word	0x0804019c

08080d08 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 8080d08:	b508      	push	{r3, lr}
 8080d0a:	4b02      	ldr	r3, [pc, #8]	; (8080d14 <os_thread_yield+0xc>)
 8080d0c:	681b      	ldr	r3, [r3, #0]
 8080d0e:	68db      	ldr	r3, [r3, #12]
 8080d10:	9301      	str	r3, [sp, #4]
 8080d12:	bd08      	pop	{r3, pc}
 8080d14:	080401d0 	.word	0x080401d0

08080d18 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
 8080d18:	b508      	push	{r3, lr}
 8080d1a:	4b02      	ldr	r3, [pc, #8]	; (8080d24 <os_thread_scheduling+0xc>)
 8080d1c:	681b      	ldr	r3, [r3, #0]
 8080d1e:	69db      	ldr	r3, [r3, #28]
 8080d20:	9301      	str	r3, [sp, #4]
 8080d22:	bd08      	pop	{r3, pc}
 8080d24:	080401d0 	.word	0x080401d0

08080d28 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
 8080d28:	b508      	push	{r3, lr}
 8080d2a:	4b02      	ldr	r3, [pc, #8]	; (8080d34 <os_timer_create+0xc>)
 8080d2c:	681b      	ldr	r3, [r3, #0]
 8080d2e:	6a1b      	ldr	r3, [r3, #32]
 8080d30:	9301      	str	r3, [sp, #4]
 8080d32:	bd08      	pop	{r3, pc}
 8080d34:	080401d0 	.word	0x080401d0

08080d38 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
 8080d38:	b508      	push	{r3, lr}
 8080d3a:	4b02      	ldr	r3, [pc, #8]	; (8080d44 <os_timer_destroy+0xc>)
 8080d3c:	681b      	ldr	r3, [r3, #0]
 8080d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8080d40:	9301      	str	r3, [sp, #4]
 8080d42:	bd08      	pop	{r3, pc}
 8080d44:	080401d0 	.word	0x080401d0

08080d48 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
 8080d48:	b508      	push	{r3, lr}
 8080d4a:	4b02      	ldr	r3, [pc, #8]	; (8080d54 <os_timer_get_id+0xc>)
 8080d4c:	681b      	ldr	r3, [r3, #0]
 8080d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8080d50:	9301      	str	r3, [sp, #4]
 8080d52:	bd08      	pop	{r3, pc}
 8080d54:	080401d0 	.word	0x080401d0

08080d58 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
 8080d58:	b508      	push	{r3, lr}
 8080d5a:	4b02      	ldr	r3, [pc, #8]	; (8080d64 <os_timer_change+0xc>)
 8080d5c:	681b      	ldr	r3, [r3, #0]
 8080d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080d60:	9301      	str	r3, [sp, #4]
 8080d62:	bd08      	pop	{r3, pc}
 8080d64:	080401d0 	.word	0x080401d0

08080d68 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 8080d68:	b508      	push	{r3, lr}
 8080d6a:	4b02      	ldr	r3, [pc, #8]	; (8080d74 <os_mutex_create+0xc>)
 8080d6c:	681b      	ldr	r3, [r3, #0]
 8080d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080d70:	9301      	str	r3, [sp, #4]
 8080d72:	bd08      	pop	{r3, pc}
 8080d74:	080401d0 	.word	0x080401d0

08080d78 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
 8080d78:	b508      	push	{r3, lr}
 8080d7a:	4b02      	ldr	r3, [pc, #8]	; (8080d84 <os_timer_set_id+0xc>)
 8080d7c:	681b      	ldr	r3, [r3, #0]
 8080d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8080d80:	9301      	str	r3, [sp, #4]
 8080d82:	bd08      	pop	{r3, pc}
 8080d84:	080401d0 	.word	0x080401d0

08080d88 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 8080d88:	b508      	push	{r3, lr}
 8080d8a:	4b02      	ldr	r3, [pc, #8]	; (8080d94 <HAL_USART_Init+0xc>)
 8080d8c:	681b      	ldr	r3, [r3, #0]
 8080d8e:	699b      	ldr	r3, [r3, #24]
 8080d90:	9301      	str	r3, [sp, #4]
 8080d92:	bd08      	pop	{r3, pc}
 8080d94:	080401c4 	.word	0x080401c4

08080d98 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 8080d98:	b508      	push	{r3, lr}
 8080d9a:	4b02      	ldr	r3, [pc, #8]	; (8080da4 <HAL_USART_Write_Data+0xc>)
 8080d9c:	681b      	ldr	r3, [r3, #0]
 8080d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8080da0:	9301      	str	r3, [sp, #4]
 8080da2:	bd08      	pop	{r3, pc}
 8080da4:	080401c4 	.word	0x080401c4

08080da8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 8080da8:	b508      	push	{r3, lr}
 8080daa:	4b02      	ldr	r3, [pc, #8]	; (8080db4 <HAL_USART_Available_Data+0xc>)
 8080dac:	681b      	ldr	r3, [r3, #0]
 8080dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8080db0:	9301      	str	r3, [sp, #4]
 8080db2:	bd08      	pop	{r3, pc}
 8080db4:	080401c4 	.word	0x080401c4

08080db8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 8080db8:	b508      	push	{r3, lr}
 8080dba:	4b02      	ldr	r3, [pc, #8]	; (8080dc4 <HAL_USART_Read_Data+0xc>)
 8080dbc:	681b      	ldr	r3, [r3, #0]
 8080dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080dc0:	9301      	str	r3, [sp, #4]
 8080dc2:	bd08      	pop	{r3, pc}
 8080dc4:	080401c4 	.word	0x080401c4

08080dc8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 8080dc8:	b508      	push	{r3, lr}
 8080dca:	4b02      	ldr	r3, [pc, #8]	; (8080dd4 <HAL_USART_Peek_Data+0xc>)
 8080dcc:	681b      	ldr	r3, [r3, #0]
 8080dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080dd0:	9301      	str	r3, [sp, #4]
 8080dd2:	bd08      	pop	{r3, pc}
 8080dd4:	080401c4 	.word	0x080401c4

08080dd8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8080dd8:	b508      	push	{r3, lr}
 8080dda:	4b02      	ldr	r3, [pc, #8]	; (8080de4 <HAL_USART_Flush_Data+0xc>)
 8080ddc:	681b      	ldr	r3, [r3, #0]
 8080dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080de0:	9301      	str	r3, [sp, #4]
 8080de2:	bd08      	pop	{r3, pc}
 8080de4:	080401c4 	.word	0x080401c4

08080de8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8080de8:	b508      	push	{r3, lr}
 8080dea:	4b02      	ldr	r3, [pc, #8]	; (8080df4 <HAL_USART_Is_Enabled+0xc>)
 8080dec:	681b      	ldr	r3, [r3, #0]
 8080dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8080df0:	9301      	str	r3, [sp, #4]
 8080df2:	bd08      	pop	{r3, pc}
 8080df4:	080401c4 	.word	0x080401c4

08080df8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8080df8:	b508      	push	{r3, lr}
 8080dfa:	4b02      	ldr	r3, [pc, #8]	; (8080e04 <HAL_USART_Available_Data_For_Write+0xc>)
 8080dfc:	681b      	ldr	r3, [r3, #0]
 8080dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8080e00:	9301      	str	r3, [sp, #4]
 8080e02:	bd08      	pop	{r3, pc}
 8080e04:	080401c4 	.word	0x080401c4

08080e08 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 8080e08:	b508      	push	{r3, lr}
 8080e0a:	4b02      	ldr	r3, [pc, #8]	; (8080e14 <HAL_I2C_Write_Data+0xc>)
 8080e0c:	681b      	ldr	r3, [r3, #0]
 8080e0e:	6a1b      	ldr	r3, [r3, #32]
 8080e10:	9301      	str	r3, [sp, #4]
 8080e12:	bd08      	pop	{r3, pc}
 8080e14:	080401ac 	.word	0x080401ac

08080e18 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 8080e18:	b508      	push	{r3, lr}
 8080e1a:	4b02      	ldr	r3, [pc, #8]	; (8080e24 <HAL_I2C_Available_Data+0xc>)
 8080e1c:	681b      	ldr	r3, [r3, #0]
 8080e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8080e20:	9301      	str	r3, [sp, #4]
 8080e22:	bd08      	pop	{r3, pc}
 8080e24:	080401ac 	.word	0x080401ac

08080e28 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 8080e28:	b508      	push	{r3, lr}
 8080e2a:	4b02      	ldr	r3, [pc, #8]	; (8080e34 <HAL_I2C_Read_Data+0xc>)
 8080e2c:	681b      	ldr	r3, [r3, #0]
 8080e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8080e30:	9301      	str	r3, [sp, #4]
 8080e32:	bd08      	pop	{r3, pc}
 8080e34:	080401ac 	.word	0x080401ac

08080e38 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 8080e38:	b508      	push	{r3, lr}
 8080e3a:	4b02      	ldr	r3, [pc, #8]	; (8080e44 <HAL_I2C_Peek_Data+0xc>)
 8080e3c:	681b      	ldr	r3, [r3, #0]
 8080e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080e40:	9301      	str	r3, [sp, #4]
 8080e42:	bd08      	pop	{r3, pc}
 8080e44:	080401ac 	.word	0x080401ac

08080e48 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 8080e48:	b508      	push	{r3, lr}
 8080e4a:	4b02      	ldr	r3, [pc, #8]	; (8080e54 <HAL_I2C_Flush_Data+0xc>)
 8080e4c:	681b      	ldr	r3, [r3, #0]
 8080e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080e50:	9301      	str	r3, [sp, #4]
 8080e52:	bd08      	pop	{r3, pc}
 8080e54:	080401ac 	.word	0x080401ac

08080e58 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 8080e58:	b508      	push	{r3, lr}
 8080e5a:	4b02      	ldr	r3, [pc, #8]	; (8080e64 <HAL_I2C_Is_Enabled+0xc>)
 8080e5c:	681b      	ldr	r3, [r3, #0]
 8080e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080e60:	9301      	str	r3, [sp, #4]
 8080e62:	bd08      	pop	{r3, pc}
 8080e64:	080401ac 	.word	0x080401ac

08080e68 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 8080e68:	b508      	push	{r3, lr}
 8080e6a:	4b02      	ldr	r3, [pc, #8]	; (8080e74 <HAL_I2C_Init+0xc>)
 8080e6c:	681b      	ldr	r3, [r3, #0]
 8080e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8080e70:	9301      	str	r3, [sp, #4]
 8080e72:	bd08      	pop	{r3, pc}
 8080e74:	080401ac 	.word	0x080401ac

08080e78 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8080e78:	b508      	push	{r3, lr}
 8080e7a:	4b02      	ldr	r3, [pc, #8]	; (8080e84 <inet_gethostbyname+0xc>)
 8080e7c:	681b      	ldr	r3, [r3, #0]
 8080e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8080e80:	9301      	str	r3, [sp, #4]
 8080e82:	bd08      	pop	{r3, pc}
 8080e84:	08060020 	.word	0x08060020

08080e88 <cellular_signal>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
 8080e88:	b508      	push	{r3, lr}
 8080e8a:	4b02      	ldr	r3, [pc, #8]	; (8080e94 <cellular_signal+0xc>)
 8080e8c:	681b      	ldr	r3, [r3, #0]
 8080e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8080e90:	9301      	str	r3, [sp, #4]
 8080e92:	bd08      	pop	{r3, pc}
 8080e94:	08060020 	.word	0x08060020

08080e98 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8080e98:	b508      	push	{r3, lr}
 8080e9a:	4b02      	ldr	r3, [pc, #8]	; (8080ea4 <HAL_USB_USART_Init+0xc>)
 8080e9c:	681b      	ldr	r3, [r3, #0]
 8080e9e:	681b      	ldr	r3, [r3, #0]
 8080ea0:	9301      	str	r3, [sp, #4]
 8080ea2:	bd08      	pop	{r3, pc}
 8080ea4:	0806001c 	.word	0x0806001c

08080ea8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8080ea8:	b508      	push	{r3, lr}
 8080eaa:	4b02      	ldr	r3, [pc, #8]	; (8080eb4 <HAL_USB_USART_Available_Data+0xc>)
 8080eac:	681b      	ldr	r3, [r3, #0]
 8080eae:	691b      	ldr	r3, [r3, #16]
 8080eb0:	9301      	str	r3, [sp, #4]
 8080eb2:	bd08      	pop	{r3, pc}
 8080eb4:	0806001c 	.word	0x0806001c

08080eb8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8080eb8:	b508      	push	{r3, lr}
 8080eba:	4b02      	ldr	r3, [pc, #8]	; (8080ec4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8080ebc:	681b      	ldr	r3, [r3, #0]
 8080ebe:	695b      	ldr	r3, [r3, #20]
 8080ec0:	9301      	str	r3, [sp, #4]
 8080ec2:	bd08      	pop	{r3, pc}
 8080ec4:	0806001c 	.word	0x0806001c

08080ec8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080ec8:	b508      	push	{r3, lr}
 8080eca:	4b02      	ldr	r3, [pc, #8]	; (8080ed4 <HAL_USB_USART_Receive_Data+0xc>)
 8080ecc:	681b      	ldr	r3, [r3, #0]
 8080ece:	699b      	ldr	r3, [r3, #24]
 8080ed0:	9301      	str	r3, [sp, #4]
 8080ed2:	bd08      	pop	{r3, pc}
 8080ed4:	0806001c 	.word	0x0806001c

08080ed8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080ed8:	b508      	push	{r3, lr}
 8080eda:	4b02      	ldr	r3, [pc, #8]	; (8080ee4 <HAL_USB_USART_Send_Data+0xc>)
 8080edc:	681b      	ldr	r3, [r3, #0]
 8080ede:	69db      	ldr	r3, [r3, #28]
 8080ee0:	9301      	str	r3, [sp, #4]
 8080ee2:	bd08      	pop	{r3, pc}
 8080ee4:	0806001c 	.word	0x0806001c

08080ee8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8080ee8:	b508      	push	{r3, lr}
 8080eea:	4b02      	ldr	r3, [pc, #8]	; (8080ef4 <HAL_USB_USART_Flush_Data+0xc>)
 8080eec:	681b      	ldr	r3, [r3, #0]
 8080eee:	6a1b      	ldr	r3, [r3, #32]
 8080ef0:	9301      	str	r3, [sp, #4]
 8080ef2:	bd08      	pop	{r3, pc}
 8080ef4:	0806001c 	.word	0x0806001c

08080ef8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8080ef8:	b508      	push	{r3, lr}
 8080efa:	4b02      	ldr	r3, [pc, #8]	; (8080f04 <set_system_mode+0xc>)
 8080efc:	681b      	ldr	r3, [r3, #0]
 8080efe:	685b      	ldr	r3, [r3, #4]
 8080f00:	9301      	str	r3, [sp, #4]
 8080f02:	bd08      	pop	{r3, pc}
 8080f04:	080401a4 	.word	0x080401a4

08080f08 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8080f08:	b508      	push	{r3, lr}
 8080f0a:	4b02      	ldr	r3, [pc, #8]	; (8080f14 <application_thread_current+0xc>)
 8080f0c:	681b      	ldr	r3, [r3, #0]
 8080f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8080f10:	9301      	str	r3, [sp, #4]
 8080f12:	bd08      	pop	{r3, pc}
 8080f14:	080401a4 	.word	0x080401a4

08080f18 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8080f18:	b508      	push	{r3, lr}
 8080f1a:	4b02      	ldr	r3, [pc, #8]	; (8080f24 <application_thread_invoke+0xc>)
 8080f1c:	681b      	ldr	r3, [r3, #0]
 8080f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8080f20:	9301      	str	r3, [sp, #4]
 8080f22:	bd08      	pop	{r3, pc}
 8080f24:	080401a4 	.word	0x080401a4

08080f28 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8080f28:	b508      	push	{r3, lr}
 8080f2a:	4b03      	ldr	r3, [pc, #12]	; (8080f38 <system_ctrl_set_app_request_handler+0x10>)
 8080f2c:	681b      	ldr	r3, [r3, #0]
 8080f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8080f32:	9301      	str	r3, [sp, #4]
 8080f34:	bd08      	pop	{r3, pc}
 8080f36:	0000      	.short	0x0000
 8080f38:	080401a4 	.word	0x080401a4

08080f3c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8080f3c:	b508      	push	{r3, lr}
 8080f3e:	4b03      	ldr	r3, [pc, #12]	; (8080f4c <system_ctrl_set_result+0x10>)
 8080f40:	681b      	ldr	r3, [r3, #0]
 8080f42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8080f46:	9301      	str	r3, [sp, #4]
 8080f48:	bd08      	pop	{r3, pc}
 8080f4a:	0000      	.short	0x0000
 8080f4c:	080401a4 	.word	0x080401a4

08080f50 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8080f50:	b508      	push	{r3, lr}
 8080f52:	4b02      	ldr	r3, [pc, #8]	; (8080f5c <network_connect+0xc>)
 8080f54:	681b      	ldr	r3, [r3, #0]
 8080f56:	685b      	ldr	r3, [r3, #4]
 8080f58:	9301      	str	r3, [sp, #4]
 8080f5a:	bd08      	pop	{r3, pc}
 8080f5c:	080401c8 	.word	0x080401c8

08080f60 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8080f60:	b508      	push	{r3, lr}
 8080f62:	4b02      	ldr	r3, [pc, #8]	; (8080f6c <network_connecting+0xc>)
 8080f64:	681b      	ldr	r3, [r3, #0]
 8080f66:	689b      	ldr	r3, [r3, #8]
 8080f68:	9301      	str	r3, [sp, #4]
 8080f6a:	bd08      	pop	{r3, pc}
 8080f6c:	080401c8 	.word	0x080401c8

08080f70 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8080f70:	b508      	push	{r3, lr}
 8080f72:	4b02      	ldr	r3, [pc, #8]	; (8080f7c <network_disconnect+0xc>)
 8080f74:	681b      	ldr	r3, [r3, #0]
 8080f76:	68db      	ldr	r3, [r3, #12]
 8080f78:	9301      	str	r3, [sp, #4]
 8080f7a:	bd08      	pop	{r3, pc}
 8080f7c:	080401c8 	.word	0x080401c8

08080f80 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8080f80:	b508      	push	{r3, lr}
 8080f82:	4b02      	ldr	r3, [pc, #8]	; (8080f8c <network_ready+0xc>)
 8080f84:	681b      	ldr	r3, [r3, #0]
 8080f86:	691b      	ldr	r3, [r3, #16]
 8080f88:	9301      	str	r3, [sp, #4]
 8080f8a:	bd08      	pop	{r3, pc}
 8080f8c:	080401c8 	.word	0x080401c8

08080f90 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8080f90:	b508      	push	{r3, lr}
 8080f92:	4b02      	ldr	r3, [pc, #8]	; (8080f9c <network_on+0xc>)
 8080f94:	681b      	ldr	r3, [r3, #0]
 8080f96:	695b      	ldr	r3, [r3, #20]
 8080f98:	9301      	str	r3, [sp, #4]
 8080f9a:	bd08      	pop	{r3, pc}
 8080f9c:	080401c8 	.word	0x080401c8

08080fa0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8080fa0:	b508      	push	{r3, lr}
 8080fa2:	4b02      	ldr	r3, [pc, #8]	; (8080fac <network_off+0xc>)
 8080fa4:	681b      	ldr	r3, [r3, #0]
 8080fa6:	699b      	ldr	r3, [r3, #24]
 8080fa8:	9301      	str	r3, [sp, #4]
 8080faa:	bd08      	pop	{r3, pc}
 8080fac:	080401c8 	.word	0x080401c8

08080fb0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8080fb0:	b508      	push	{r3, lr}
 8080fb2:	4b02      	ldr	r3, [pc, #8]	; (8080fbc <network_listen+0xc>)
 8080fb4:	681b      	ldr	r3, [r3, #0]
 8080fb6:	69db      	ldr	r3, [r3, #28]
 8080fb8:	9301      	str	r3, [sp, #4]
 8080fba:	bd08      	pop	{r3, pc}
 8080fbc:	080401c8 	.word	0x080401c8

08080fc0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8080fc0:	b508      	push	{r3, lr}
 8080fc2:	4b02      	ldr	r3, [pc, #8]	; (8080fcc <network_listening+0xc>)
 8080fc4:	681b      	ldr	r3, [r3, #0]
 8080fc6:	6a1b      	ldr	r3, [r3, #32]
 8080fc8:	9301      	str	r3, [sp, #4]
 8080fca:	bd08      	pop	{r3, pc}
 8080fcc:	080401c8 	.word	0x080401c8

08080fd0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8080fd0:	b508      	push	{r3, lr}
 8080fd2:	4b02      	ldr	r3, [pc, #8]	; (8080fdc <network_set_listen_timeout+0xc>)
 8080fd4:	681b      	ldr	r3, [r3, #0]
 8080fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080fd8:	9301      	str	r3, [sp, #4]
 8080fda:	bd08      	pop	{r3, pc}
 8080fdc:	080401c8 	.word	0x080401c8

08080fe0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8080fe0:	b508      	push	{r3, lr}
 8080fe2:	4b02      	ldr	r3, [pc, #8]	; (8080fec <network_get_listen_timeout+0xc>)
 8080fe4:	681b      	ldr	r3, [r3, #0]
 8080fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080fe8:	9301      	str	r3, [sp, #4]
 8080fea:	bd08      	pop	{r3, pc}
 8080fec:	080401c8 	.word	0x080401c8

08080ff0 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 8080ff0:	b508      	push	{r3, lr}
 8080ff2:	4b02      	ldr	r3, [pc, #8]	; (8080ffc <spark_variable+0xc>)
 8080ff4:	681b      	ldr	r3, [r3, #0]
 8080ff6:	681b      	ldr	r3, [r3, #0]
 8080ff8:	9301      	str	r3, [sp, #4]
 8080ffa:	bd08      	pop	{r3, pc}
 8080ffc:	080401cc 	.word	0x080401cc

08081000 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 8081000:	b508      	push	{r3, lr}
 8081002:	4b02      	ldr	r3, [pc, #8]	; (808100c <spark_function+0xc>)
 8081004:	681b      	ldr	r3, [r3, #0]
 8081006:	685b      	ldr	r3, [r3, #4]
 8081008:	9301      	str	r3, [sp, #4]
 808100a:	bd08      	pop	{r3, pc}
 808100c:	080401cc 	.word	0x080401cc

08081010 <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8081010:	b508      	push	{r3, lr}
 8081012:	4b02      	ldr	r3, [pc, #8]	; (808101c <spark_cloud_flag_connected+0xc>)
 8081014:	681b      	ldr	r3, [r3, #0]
 8081016:	695b      	ldr	r3, [r3, #20]
 8081018:	9301      	str	r3, [sp, #4]
 808101a:	bd08      	pop	{r3, pc}
 808101c:	080401cc 	.word	0x080401cc

08081020 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8081020:	b508      	push	{r3, lr}
 8081022:	4b02      	ldr	r3, [pc, #8]	; (808102c <spark_send_event+0xc>)
 8081024:	681b      	ldr	r3, [r3, #0]
 8081026:	6a1b      	ldr	r3, [r3, #32]
 8081028:	9301      	str	r3, [sp, #4]
 808102a:	bd08      	pop	{r3, pc}
 808102c:	080401cc 	.word	0x080401cc

08081030 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8081030:	b508      	push	{r3, lr}
 8081032:	4b02      	ldr	r3, [pc, #8]	; (808103c <spark_set_random_seed_from_cloud_handler+0xc>)
 8081034:	681b      	ldr	r3, [r3, #0]
 8081036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081038:	9301      	str	r3, [sp, #4]
 808103a:	bd08      	pop	{r3, pc}
 808103c:	080401cc 	.word	0x080401cc

08081040 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8081040:	b508      	push	{r3, lr}
 8081042:	4b02      	ldr	r3, [pc, #8]	; (808104c <malloc+0xc>)
 8081044:	681b      	ldr	r3, [r3, #0]
 8081046:	681b      	ldr	r3, [r3, #0]
 8081048:	9301      	str	r3, [sp, #4]
 808104a:	bd08      	pop	{r3, pc}
 808104c:	080401a0 	.word	0x080401a0

08081050 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8081050:	b508      	push	{r3, lr}
 8081052:	4b02      	ldr	r3, [pc, #8]	; (808105c <free+0xc>)
 8081054:	681b      	ldr	r3, [r3, #0]
 8081056:	685b      	ldr	r3, [r3, #4]
 8081058:	9301      	str	r3, [sp, #4]
 808105a:	bd08      	pop	{r3, pc}
 808105c:	080401a0 	.word	0x080401a0

08081060 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8081060:	b508      	push	{r3, lr}
 8081062:	4b02      	ldr	r3, [pc, #8]	; (808106c <realloc+0xc>)
 8081064:	681b      	ldr	r3, [r3, #0]
 8081066:	689b      	ldr	r3, [r3, #8]
 8081068:	9301      	str	r3, [sp, #4]
 808106a:	bd08      	pop	{r3, pc}
 808106c:	080401a0 	.word	0x080401a0

08081070 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8081070:	b508      	push	{r3, lr}
 8081072:	4b02      	ldr	r3, [pc, #8]	; (808107c <abort+0xc>)
 8081074:	681b      	ldr	r3, [r3, #0]
 8081076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081078:	9301      	str	r3, [sp, #4]
 808107a:	bd08      	pop	{r3, pc}
 808107c:	080401a0 	.word	0x080401a0

08081080 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8081080:	b508      	push	{r3, lr}
 8081082:	4b02      	ldr	r3, [pc, #8]	; (808108c <_malloc_r+0xc>)
 8081084:	681b      	ldr	r3, [r3, #0]
 8081086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081088:	9301      	str	r3, [sp, #4]
 808108a:	bd08      	pop	{r3, pc}
 808108c:	080401a0 	.word	0x080401a0

08081090 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 8081090:	b508      	push	{r3, lr}
 8081092:	4b02      	ldr	r3, [pc, #8]	; (808109c <__errno+0xc>)
 8081094:	681b      	ldr	r3, [r3, #0]
 8081096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081098:	9301      	str	r3, [sp, #4]
 808109a:	bd08      	pop	{r3, pc}
 808109c:	080401a0 	.word	0x080401a0

080810a0 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80810a0:	4770      	bx	lr

080810a2 <_ZN8SPIClassD0Ev>:
 80810a2:	b510      	push	{r4, lr}
 80810a4:	4604      	mov	r4, r0
 80810a6:	2110      	movs	r1, #16
 80810a8:	f001 fb17 	bl	80826da <_ZdlPvj>
 80810ac:	4620      	mov	r0, r4
 80810ae:	bd10      	pop	{r4, pc}

080810b0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80810b0:	b570      	push	{r4, r5, r6, lr}
 80810b2:	4604      	mov	r4, r0
 80810b4:	460e      	mov	r6, r1
 80810b6:	4b07      	ldr	r3, [pc, #28]	; (80810d4 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80810b8:	2500      	movs	r5, #0
 80810ba:	6003      	str	r3, [r0, #0]
 80810bc:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80810c0:	f7ff fe52 	bl	8080d68 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80810c4:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80810c6:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80810c8:	f7ff fde6 	bl	8080c98 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80810cc:	60a5      	str	r5, [r4, #8]
}
 80810ce:	4620      	mov	r0, r4
 80810d0:	bd70      	pop	{r4, r5, r6, pc}
 80810d2:	bf00      	nop
 80810d4:	08085c1c 	.word	0x08085c1c

080810d8 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80810d8:	7900      	ldrb	r0, [r0, #4]
 80810da:	f7ff bde5 	b.w	8080ca8 <HAL_SPI_Is_Enabled>
	...

080810e0 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80810e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80810e4:	4b03      	ldr	r3, [pc, #12]	; (80810f4 <_GLOBAL__sub_I_System+0x14>)
 80810e6:	2000      	movs	r0, #0
 80810e8:	7018      	strb	r0, [r3, #0]
 80810ea:	8058      	strh	r0, [r3, #2]
 80810ec:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80810ee:	f7ff bf03 	b.w	8080ef8 <set_system_mode>
 80810f2:	bf00      	nop
 80810f4:	20000198 	.word	0x20000198

080810f8 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80810f8:	b510      	push	{r4, lr}
 80810fa:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80810fc:	f002 fee7 	bl	8083ece <strlen>
 8081100:	3801      	subs	r0, #1
 8081102:	1823      	adds	r3, r4, r0
 8081104:	4620      	mov	r0, r4
	while(i<j){
 8081106:	4298      	cmp	r0, r3
 8081108:	d206      	bcs.n	8081118 <_Z11str_reversePc+0x20>
		c = *i;
 808110a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 808110c:	7819      	ldrb	r1, [r3, #0]
 808110e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 8081112:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 8081116:	e7f6      	b.n	8081106 <_Z11str_reversePc+0xe>
 8081118:	bd10      	pop	{r4, pc}

0808111a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 808111a:	b570      	push	{r4, r5, r6, lr}
 808111c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 808111e:	1e91      	subs	r1, r2, #2
 8081120:	2922      	cmp	r1, #34	; 0x22
 8081122:	d820      	bhi.n	8081166 <ultoa+0x4c>
 8081124:	4625      	mov	r5, r4
 8081126:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 8081128:	b910      	cbnz	r0, 8081130 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 808112a:	4423      	add	r3, r4
            *ptr++ = '0';
 808112c:	2230      	movs	r2, #48	; 0x30
 808112e:	e00e      	b.n	808114e <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 8081130:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 8081134:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 8081138:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 808113a:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 808113c:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 8081140:	bf94      	ite	ls
 8081142:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 8081144:	3157      	addhi	r1, #87	; 0x57
 8081146:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 808114a:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 808114c:	e7eb      	b.n	8081126 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 808114e:	4299      	cmp	r1, r3
 8081150:	d202      	bcs.n	8081158 <ultoa+0x3e>
            *ptr++ = '0';
 8081152:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8081156:	e7fa      	b.n	808114e <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 8081158:	2300      	movs	r3, #0
	str_reverse(buffer);
 808115a:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 808115c:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 808115e:	f7ff ffcb 	bl	80810f8 <_Z11str_reversePc>
	return buffer;
 8081162:	4620      	mov	r0, r4
 8081164:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 8081166:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 8081168:	bd70      	pop	{r4, r5, r6, pc}

0808116a <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 808116a:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 808116c:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 808116e:	460c      	mov	r4, r1
 8081170:	4615      	mov	r5, r2
	if(a<0){
 8081172:	da0b      	bge.n	808118c <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 8081174:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 8081178:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 808117c:	bf14      	ite	ne
 808117e:	4258      	negne	r0, r3
 8081180:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 8081182:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 8081184:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 8081186:	462a      	mov	r2, r5
 8081188:	4419      	add	r1, r3
 808118a:	e000      	b.n	808118e <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 808118c:	2301      	movs	r3, #1
 808118e:	f7ff ffc4 	bl	808111a <ultoa>
	}
	return buffer;
}
 8081192:	4620      	mov	r0, r4
 8081194:	bd38      	pop	{r3, r4, r5, pc}
	...

08081198 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 8081198:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808119c:	4680      	mov	r8, r0
 808119e:	460d      	mov	r5, r1
 80811a0:	4617      	mov	r7, r2
 80811a2:	461e      	mov	r6, r3
    bool negative = val<0;
    if (negative) {
 80811a4:	2200      	movs	r2, #0
 80811a6:	2300      	movs	r3, #0
 80811a8:	4640      	mov	r0, r8
 80811aa:	4629      	mov	r1, r5
 80811ac:	f002 f92e 	bl	808340c <__aeabi_dcmplt>
 80811b0:	b120      	cbz	r0, 80811bc <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80811b2:	232d      	movs	r3, #45	; 0x2d
 80811b4:	7033      	strb	r3, [r6, #0]
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
    bool negative = val<0;
    if (negative) {
        val = -val;
 80811b6:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 80811ba:	3601      	adds	r6, #1
 80811bc:	2300      	movs	r3, #0
    }
    long scale = 1;
 80811be:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 80811c0:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80811c2:	b2d9      	uxtb	r1, r3
 80811c4:	428f      	cmp	r7, r1
 80811c6:	d902      	bls.n	80811ce <_Z4dtoadhPc+0x36>
        scale *= 10;
 80811c8:	4354      	muls	r4, r2
 80811ca:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80811cc:	e7f9      	b.n	80811c2 <_Z4dtoadhPc+0x2a>
        scale *= 10;
    val *= scale;   // capture all the significant digits
 80811ce:	4620      	mov	r0, r4
 80811d0:	f001 fe44 	bl	8082e5c <__aeabi_i2d>
 80811d4:	4642      	mov	r2, r8
 80811d6:	462b      	mov	r3, r5
 80811d8:	f001 fea6 	bl	8082f28 <__aeabi_dmul>
 80811dc:	4682      	mov	sl, r0
 80811de:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
 80811e0:	f002 fc60 	bl	8083aa4 <__aeabi_d2ulz>
 80811e4:	4680      	mov	r8, r0
 80811e6:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
 80811e8:	f001 fe68 	bl	8082ebc <__aeabi_ul2d>
 80811ec:	4602      	mov	r2, r0
 80811ee:	460b      	mov	r3, r1
 80811f0:	4650      	mov	r0, sl
 80811f2:	4659      	mov	r1, fp
 80811f4:	f001 fce4 	bl	8082bc0 <__aeabi_dsub>
 80811f8:	2200      	movs	r2, #0
 80811fa:	4b17      	ldr	r3, [pc, #92]	; (8081258 <_Z4dtoadhPc+0xc0>)
 80811fc:	f002 f91a 	bl	8083434 <__aeabi_dcmpge>
 8081200:	b118      	cbz	r0, 808120a <_Z4dtoadhPc+0x72>
        fixed++;
 8081202:	f118 0801 	adds.w	r8, r8, #1
 8081206:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
 808120a:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 808120c:	4622      	mov	r2, r4
 808120e:	462b      	mov	r3, r5
 8081210:	4640      	mov	r0, r8
 8081212:	4649      	mov	r1, r9
 8081214:	f002 fc2e 	bl	8083a74 <__aeabi_uldivmod>
 8081218:	2301      	movs	r3, #1
 808121a:	220a      	movs	r2, #10
 808121c:	4631      	mov	r1, r6
 808121e:	f7ff ff7c 	bl	808111a <ultoa>
    if (prec) {
 8081222:	b1af      	cbz	r7, 8081250 <_Z4dtoadhPc+0xb8>
        sout += strlen(sout);
 8081224:	4630      	mov	r0, r6
 8081226:	f002 fe52 	bl	8083ece <strlen>
        *sout++ = '.';
 808122a:	232e      	movs	r3, #46	; 0x2e
 808122c:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
 808122e:	3001      	adds	r0, #1
 8081230:	4406      	add	r6, r0
 8081232:	4622      	mov	r2, r4
 8081234:	462b      	mov	r3, r5
 8081236:	4640      	mov	r0, r8
 8081238:	4649      	mov	r1, r9
 808123a:	f002 fc1b 	bl	8083a74 <__aeabi_uldivmod>
 808123e:	463b      	mov	r3, r7
 8081240:	4610      	mov	r0, r2
 8081242:	4631      	mov	r1, r6
 8081244:	220a      	movs	r2, #10
    }
}
 8081246:	b001      	add	sp, #4
 8081248:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
 808124c:	f7ff bf65 	b.w	808111a <ultoa>
    }
}
 8081250:	b001      	add	sp, #4
 8081252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081256:	bf00      	nop
 8081258:	3fe00000 	.word	0x3fe00000

0808125c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 808125c:	b510      	push	{r4, lr}
 808125e:	4604      	mov	r4, r0
{
	free(buffer);
 8081260:	6800      	ldr	r0, [r0, #0]
 8081262:	f7ff fef5 	bl	8081050 <free>
}
 8081266:	4620      	mov	r0, r4
 8081268:	bd10      	pop	{r4, pc}

0808126a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 808126a:	b510      	push	{r4, lr}
 808126c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 808126e:	6800      	ldr	r0, [r0, #0]
 8081270:	b108      	cbz	r0, 8081276 <_ZN6String10invalidateEv+0xc>
 8081272:	f7ff feed 	bl	8081050 <free>
	buffer = NULL;
 8081276:	2300      	movs	r3, #0
 8081278:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 808127a:	60a3      	str	r3, [r4, #8]
 808127c:	6063      	str	r3, [r4, #4]
 808127e:	bd10      	pop	{r4, pc}

08081280 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8081280:	b538      	push	{r3, r4, r5, lr}
 8081282:	4604      	mov	r4, r0
 8081284:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8081286:	6800      	ldr	r0, [r0, #0]
 8081288:	3101      	adds	r1, #1
 808128a:	f7ff fee9 	bl	8081060 <realloc>
	if (newbuffer) {
 808128e:	b110      	cbz	r0, 8081296 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8081290:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 8081294:	2001      	movs	r0, #1
	}
	return 0;
}
 8081296:	bd38      	pop	{r3, r4, r5, pc}

08081298 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8081298:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 808129a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 808129c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 808129e:	b113      	cbz	r3, 80812a6 <_ZN6String7reserveEj+0xe>
 80812a0:	6843      	ldr	r3, [r0, #4]
 80812a2:	428b      	cmp	r3, r1
 80812a4:	d207      	bcs.n	80812b6 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80812a6:	4620      	mov	r0, r4
 80812a8:	f7ff ffea 	bl	8081280 <_ZN6String12changeBufferEj>
 80812ac:	b120      	cbz	r0, 80812b8 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80812ae:	68a3      	ldr	r3, [r4, #8]
 80812b0:	b90b      	cbnz	r3, 80812b6 <_ZN6String7reserveEj+0x1e>
 80812b2:	6822      	ldr	r2, [r4, #0]
 80812b4:	7013      	strb	r3, [r2, #0]
 80812b6:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80812b8:	bd10      	pop	{r4, pc}

080812ba <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80812ba:	b570      	push	{r4, r5, r6, lr}
 80812bc:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80812be:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80812c0:	4604      	mov	r4, r0
 80812c2:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80812c4:	f7ff ffe8 	bl	8081298 <_ZN6String7reserveEj>
 80812c8:	b918      	cbnz	r0, 80812d2 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80812ca:	4620      	mov	r0, r4
 80812cc:	f7ff ffcd 	bl	808126a <_ZN6String10invalidateEv>
		return *this;
 80812d0:	e009      	b.n	80812e6 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80812d2:	462a      	mov	r2, r5
 80812d4:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80812d6:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80812d8:	6820      	ldr	r0, [r4, #0]
 80812da:	f002 fd99 	bl	8083e10 <memcpy>
	buffer[len] = 0;
 80812de:	6822      	ldr	r2, [r4, #0]
 80812e0:	68a3      	ldr	r3, [r4, #8]
 80812e2:	2100      	movs	r1, #0
 80812e4:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80812e6:	4620      	mov	r0, r4
 80812e8:	bd70      	pop	{r4, r5, r6, pc}

080812ea <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80812ea:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80812ec:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80812ee:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80812f0:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80812f2:	6043      	str	r3, [r0, #4]
	len = 0;
 80812f4:	6083      	str	r3, [r0, #8]
	flags = 0;
 80812f6:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80812f8:	460d      	mov	r5, r1
 80812fa:	b139      	cbz	r1, 808130c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80812fc:	4608      	mov	r0, r1
 80812fe:	f002 fde6 	bl	8083ece <strlen>
 8081302:	4629      	mov	r1, r5
 8081304:	4602      	mov	r2, r0
 8081306:	4620      	mov	r0, r4
 8081308:	f7ff ffd7 	bl	80812ba <_ZN6String4copyEPKcj>
}
 808130c:	4620      	mov	r0, r4
 808130e:	bd38      	pop	{r3, r4, r5, pc}

08081310 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8081310:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 8081312:	b510      	push	{r4, lr}
 8081314:	460b      	mov	r3, r1
 8081316:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8081318:	d007      	beq.n	808132a <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 808131a:	6809      	ldr	r1, [r1, #0]
 808131c:	b119      	cbz	r1, 8081326 <_ZN6StringaSERKS_+0x16>
 808131e:	689a      	ldr	r2, [r3, #8]
 8081320:	f7ff ffcb 	bl	80812ba <_ZN6String4copyEPKcj>
 8081324:	e001      	b.n	808132a <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 8081326:	f7ff ffa0 	bl	808126a <_ZN6String10invalidateEv>

	return *this;
}
 808132a:	4620      	mov	r0, r4
 808132c:	bd10      	pop	{r4, pc}

0808132e <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 808132e:	b510      	push	{r4, lr}
 8081330:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8081332:	2300      	movs	r3, #0
 8081334:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8081336:	6043      	str	r3, [r0, #4]
	len = 0;
 8081338:	6083      	str	r3, [r0, #8]
	flags = 0;
 808133a:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 808133c:	f7ff ffe8 	bl	8081310 <_ZN6StringaSERKS_>
}
 8081340:	4620      	mov	r0, r4
 8081342:	bd10      	pop	{r4, pc}

08081344 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 8081344:	b538      	push	{r3, r4, r5, lr}
 8081346:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 8081348:	460c      	mov	r4, r1
 808134a:	b141      	cbz	r1, 808135e <_ZN6StringaSEPKc+0x1a>
 808134c:	4608      	mov	r0, r1
 808134e:	f002 fdbe 	bl	8083ece <strlen>
 8081352:	4621      	mov	r1, r4
 8081354:	4602      	mov	r2, r0
 8081356:	4628      	mov	r0, r5
 8081358:	f7ff ffaf 	bl	80812ba <_ZN6String4copyEPKcj>
 808135c:	e001      	b.n	8081362 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 808135e:	f7ff ff84 	bl	808126a <_ZN6String10invalidateEv>

	return *this;
}
 8081362:	4628      	mov	r0, r5
 8081364:	bd38      	pop	{r3, r4, r5, pc}

08081366 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8081366:	b510      	push	{r4, lr}
 8081368:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808136a:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 808136c:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808136e:	6023      	str	r3, [r4, #0]
	capacity = 0;
 8081370:	6063      	str	r3, [r4, #4]
	len = 0;
 8081372:	60a3      	str	r3, [r4, #8]
	flags = 0;
 8081374:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8081376:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 8081378:	a901      	add	r1, sp, #4
 808137a:	f7ff fef6 	bl	808116a <itoa>
	*this = buf;
 808137e:	a901      	add	r1, sp, #4
 8081380:	4620      	mov	r0, r4
 8081382:	f7ff ffdf 	bl	8081344 <_ZN6StringaSEPKc>
}
 8081386:	4620      	mov	r0, r4
 8081388:	b00a      	add	sp, #40	; 0x28
 808138a:	bd10      	pop	{r4, pc}

0808138c <_ZN6StringC1Edi>:
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
 808138c:	b510      	push	{r4, lr}
 808138e:	4604      	mov	r4, r0
 8081390:	b08a      	sub	sp, #40	; 0x28
 8081392:	4619      	mov	r1, r3
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8081394:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
 8081396:	4610      	mov	r0, r2
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8081398:	6023      	str	r3, [r4, #0]
	capacity = 0;
 808139a:	6063      	str	r3, [r4, #4]
	len = 0;
 808139c:	60a3      	str	r3, [r4, #8]
	flags = 0;
 808139e:	7323      	strb	r3, [r4, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 80813a0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80813a4:	ab01      	add	r3, sp, #4
 80813a6:	f7ff fef7 	bl	8081198 <_Z4dtoadhPc>
        *this = buf;
 80813aa:	a901      	add	r1, sp, #4
 80813ac:	4620      	mov	r0, r4
 80813ae:	f7ff ffc9 	bl	8081344 <_ZN6StringaSEPKc>
}
 80813b2:	4620      	mov	r0, r4
 80813b4:	b00a      	add	sp, #40	; 0x28
 80813b6:	bd10      	pop	{r4, pc}

080813b8 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80813b8:	b570      	push	{r4, r5, r6, lr}
 80813ba:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80813bc:	460e      	mov	r6, r1
 80813be:	b909      	cbnz	r1, 80813c4 <_ZN6String6concatEPKcj+0xc>
 80813c0:	2000      	movs	r0, #0
 80813c2:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80813c4:	b16a      	cbz	r2, 80813e2 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 80813c6:	6883      	ldr	r3, [r0, #8]
 80813c8:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 80813ca:	4629      	mov	r1, r5
 80813cc:	f7ff ff64 	bl	8081298 <_ZN6String7reserveEj>
 80813d0:	2800      	cmp	r0, #0
 80813d2:	d0f5      	beq.n	80813c0 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80813d4:	6820      	ldr	r0, [r4, #0]
 80813d6:	68a3      	ldr	r3, [r4, #8]
 80813d8:	4631      	mov	r1, r6
 80813da:	4418      	add	r0, r3
 80813dc:	f002 fd54 	bl	8083e88 <strcpy>
	len = newlen;
 80813e0:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 80813e2:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80813e4:	bd70      	pop	{r4, r5, r6, pc}

080813e6 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80813e6:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80813e8:	688a      	ldr	r2, [r1, #8]
 80813ea:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80813ec:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80813ee:	f7ff ffe3 	bl	80813b8 <_ZN6String6concatEPKcj>
 80813f2:	b910      	cbnz	r0, 80813fa <_ZplRK15StringSumHelperRK6String+0x14>
 80813f4:	4620      	mov	r0, r4
 80813f6:	f7ff ff38 	bl	808126a <_ZN6String10invalidateEv>
	return a;
}
 80813fa:	4620      	mov	r0, r4
 80813fc:	bd10      	pop	{r4, pc}

080813fe <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80813fe:	b538      	push	{r3, r4, r5, lr}
 8081400:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 8081402:	460d      	mov	r5, r1
 8081404:	b141      	cbz	r1, 8081418 <_ZplRK15StringSumHelperPKc+0x1a>
 8081406:	4608      	mov	r0, r1
 8081408:	f002 fd61 	bl	8083ece <strlen>
 808140c:	4629      	mov	r1, r5
 808140e:	4602      	mov	r2, r0
 8081410:	4620      	mov	r0, r4
 8081412:	f7ff ffd1 	bl	80813b8 <_ZN6String6concatEPKcj>
 8081416:	b910      	cbnz	r0, 808141e <_ZplRK15StringSumHelperPKc+0x20>
 8081418:	4620      	mov	r0, r4
 808141a:	f7ff ff26 	bl	808126a <_ZN6String10invalidateEv>
	return a;
}
 808141e:	4620      	mov	r0, r4
 8081420:	bd38      	pop	{r3, r4, r5, pc}

08081422 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 8081422:	6800      	ldr	r0, [r0, #0]
 8081424:	b108      	cbz	r0, 808142a <_ZNK6String5toIntEv+0x8>
 8081426:	f002 bcdc 	b.w	8083de2 <atol>
	return 0;
}
 808142a:	4770      	bx	lr

0808142c <_ZNK6String7toFloatEv>:


float String::toFloat(void) const
{
 808142c:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
 808142e:	6800      	ldr	r0, [r0, #0]
 8081430:	b120      	cbz	r0, 808143c <_ZNK6String7toFloatEv+0x10>
 8081432:	f002 fcd3 	bl	8083ddc <atof>
 8081436:	f002 f86f 	bl	8083518 <__aeabi_d2f>
 808143a:	bd08      	pop	{r3, pc}
	return 0;
 808143c:	2000      	movs	r0, #0
}
 808143e:	bd08      	pop	{r3, pc}

08081440 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8081440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081442:	4606      	mov	r6, r0
 8081444:	460d      	mov	r5, r1
 8081446:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8081448:	2400      	movs	r4, #0
  while (size--) {
 808144a:	42bd      	cmp	r5, r7
 808144c:	d00c      	beq.n	8081468 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 808144e:	6833      	ldr	r3, [r6, #0]
 8081450:	f815 1b01 	ldrb.w	r1, [r5], #1
 8081454:	689b      	ldr	r3, [r3, #8]
 8081456:	4630      	mov	r0, r6
 8081458:	4798      	blx	r3
     if (chunk>=0)
 808145a:	2800      	cmp	r0, #0
 808145c:	db01      	blt.n	8081462 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 808145e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 8081460:	e7f3      	b.n	808144a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8081462:	2c00      	cmp	r4, #0
 8081464:	bf08      	it	eq
 8081466:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 8081468:	4620      	mov	r0, r4
 808146a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808146c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 808146c:	b570      	push	{r4, r5, r6, lr}
 808146e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8081470:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8081472:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8081474:	b149      	cbz	r1, 808148a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8081476:	f002 fd2a 	bl	8083ece <strlen>
 808147a:	682b      	ldr	r3, [r5, #0]
 808147c:	4602      	mov	r2, r0
 808147e:	4621      	mov	r1, r4
 8081480:	4628      	mov	r0, r5
    }
 8081482:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 8081486:	68db      	ldr	r3, [r3, #12]
 8081488:	4718      	bx	r3
    }
 808148a:	bd70      	pop	{r4, r5, r6, pc}

0808148c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 808148c:	6803      	ldr	r3, [r0, #0]
 808148e:	689b      	ldr	r3, [r3, #8]
 8081490:	4718      	bx	r3

08081492 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8081492:	2a01      	cmp	r2, #1
 8081494:	bf98      	it	ls
 8081496:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8081498:	b530      	push	{r4, r5, lr}
 808149a:	460b      	mov	r3, r1
 808149c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 808149e:	2100      	movs	r1, #0
 80814a0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80814a4:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80814a8:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80814ac:	fb05 3312 	mls	r3, r5, r2, r3
 80814b0:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80814b2:	2b09      	cmp	r3, #9
 80814b4:	bf94      	ite	ls
 80814b6:	3330      	addls	r3, #48	; 0x30
 80814b8:	3337      	addhi	r3, #55	; 0x37
 80814ba:	b2db      	uxtb	r3, r3
 80814bc:	4621      	mov	r1, r4
 80814be:	f804 3901 	strb.w	r3, [r4], #-1
 80814c2:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80814c4:	2d00      	cmp	r5, #0
 80814c6:	d1ef      	bne.n	80814a8 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80814c8:	f7ff ffd0 	bl	808146c <_ZN5Print5writeEPKc>
}
 80814cc:	b00b      	add	sp, #44	; 0x2c
 80814ce:	bd30      	pop	{r4, r5, pc}

080814d0 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80814d0:	b410      	push	{r4}
  if (base == 0) return write(n);
 80814d2:	b922      	cbnz	r2, 80814de <_ZN5Print5printEmi+0xe>
 80814d4:	6803      	ldr	r3, [r0, #0]
 80814d6:	b2c9      	uxtb	r1, r1
 80814d8:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80814da:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80814dc:	4718      	bx	r3
  else return printNumber(n, base);
 80814de:	b2d2      	uxtb	r2, r2
}
 80814e0:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80814e2:	f7ff bfd6 	b.w	8081492 <_ZN5Print11printNumberEmh>

080814e6 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80814e6:	f7ff bff3 	b.w	80814d0 <_ZN5Print5printEmi>

080814ea <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80814ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80814ee:	4607      	mov	r7, r0
 80814f0:	460e      	mov	r6, r1
  if (base == 0) {
 80814f2:	4615      	mov	r5, r2
 80814f4:	b92a      	cbnz	r2, 8081502 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80814f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80814fa:	6803      	ldr	r3, [r0, #0]
 80814fc:	b2c9      	uxtb	r1, r1
 80814fe:	689b      	ldr	r3, [r3, #8]
 8081500:	4718      	bx	r3
  } else if (base == 10) {
 8081502:	2a0a      	cmp	r2, #10
 8081504:	d102      	bne.n	808150c <_ZN5Print5printEli+0x22>
    if (n < 0) {
 8081506:	2900      	cmp	r1, #0
 8081508:	da01      	bge.n	808150e <_ZN5Print5printEli+0x24>
 808150a:	e004      	b.n	8081516 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 808150c:	b2d2      	uxtb	r2, r2
  }
}
 808150e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8081512:	f7ff bfbe 	b.w	8081492 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 8081516:	212d      	movs	r1, #45	; 0x2d
 8081518:	f7ff ffb8 	bl	808148c <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 808151c:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 808151e:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 8081520:	4271      	negs	r1, r6
 8081522:	4638      	mov	r0, r7
 8081524:	f7ff ffb5 	bl	8081492 <_ZN5Print11printNumberEmh>
 8081528:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 808152a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808152e <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 808152e:	f7ff bfdc 	b.w	80814ea <_ZN5Print5printEli>

08081532 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8081532:	680b      	ldr	r3, [r1, #0]
 8081534:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 8081536:	b113      	cbz	r3, 808153e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8081538:	685a      	ldr	r2, [r3, #4]
 808153a:	3201      	adds	r2, #1
 808153c:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 808153e:	4770      	bx	lr

08081540 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8081540:	4a01      	ldr	r2, [pc, #4]	; (8081548 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8081542:	4b02      	ldr	r3, [pc, #8]	; (808154c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8081544:	601a      	str	r2, [r3, #0]
 8081546:	4770      	bx	lr
 8081548:	08085c9a 	.word	0x08085c9a
 808154c:	200001a0 	.word	0x200001a0

08081550 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8081550:	4b02      	ldr	r3, [pc, #8]	; (808155c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8081552:	681a      	ldr	r2, [r3, #0]
 8081554:	4b02      	ldr	r3, [pc, #8]	; (8081560 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8081556:	601a      	str	r2, [r3, #0]
 8081558:	4770      	bx	lr
 808155a:	bf00      	nop
 808155c:	20000008 	.word	0x20000008
 8081560:	200001a4 	.word	0x200001a4

08081564 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8081564:	b510      	push	{r4, lr}
 8081566:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081568:	f7fe fdfd 	bl	8080166 <_ZNSt14_Function_baseD1Ev>
 808156c:	4620      	mov	r0, r4
 808156e:	bd10      	pop	{r4, pc}

08081570 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 8081570:	b513      	push	{r0, r1, r4, lr}
 8081572:	460b      	mov	r3, r1
 8081574:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081576:	c803      	ldmia	r0, {r0, r1}
 8081578:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 808157c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8081580:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8081584:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8081588:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 808158c:	b002      	add	sp, #8
 808158e:	bd10      	pop	{r4, pc}

08081590 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081590:	4803      	ldr	r0, [pc, #12]	; (80815a0 <_GLOBAL__sub_I_RGB+0x10>)
 8081592:	2300      	movs	r3, #0
 8081594:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8081596:	4a03      	ldr	r2, [pc, #12]	; (80815a4 <_GLOBAL__sub_I_RGB+0x14>)
 8081598:	4903      	ldr	r1, [pc, #12]	; (80815a8 <_GLOBAL__sub_I_RGB+0x18>)
 808159a:	f001 b899 	b.w	80826d0 <__aeabi_atexit>
 808159e:	bf00      	nop
 80815a0:	200001a8 	.word	0x200001a8
 80815a4:	200000b0 	.word	0x200000b0
 80815a8:	08081565 	.word	0x08081565

080815ac <_ZN14CellularSignalD1Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 80815ac:	4770      	bx	lr

080815ae <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
 80815ae:	7d00      	ldrb	r0, [r0, #20]
 80815b0:	4770      	bx	lr
	...

080815b4 <_ZNK14CellularSignal16getStrengthValueEv>:

    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
 80815b4:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
 80815b6:	7d03      	ldrb	r3, [r0, #20]
 80815b8:	b11b      	cbz	r3, 80815c2 <_ZNK14CellularSignal16getStrengthValueEv+0xe>
 80815ba:	6980      	ldr	r0, [r0, #24]
 80815bc:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80815c0:	d101      	bne.n	80815c6 <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
 80815c2:	2000      	movs	r0, #0
 80815c4:	bd08      	pop	{r3, pc}
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
 80815c6:	f002 f8b1 	bl	808372c <__aeabi_i2f>
 80815ca:	4902      	ldr	r1, [pc, #8]	; (80815d4 <_ZNK14CellularSignal16getStrengthValueEv+0x20>)
 80815cc:	f002 f9b6 	bl	808393c <__aeabi_fdiv>
    }

    return 0.0f;
}
 80815d0:	bd08      	pop	{r3, pc}
 80815d2:	bf00      	nop
 80815d4:	42c80000 	.word	0x42c80000

080815d8 <_ZNK14CellularSignal15getQualityValueEv>:

    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
 80815d8:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
 80815da:	7d03      	ldrb	r3, [r0, #20]
 80815dc:	b11b      	cbz	r3, 80815e6 <_ZNK14CellularSignal15getQualityValueEv+0xe>
 80815de:	6a00      	ldr	r0, [r0, #32]
 80815e0:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80815e4:	d101      	bne.n	80815ea <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
 80815e6:	2000      	movs	r0, #0
 80815e8:	bd08      	pop	{r3, pc}
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
 80815ea:	f002 f89f 	bl	808372c <__aeabi_i2f>
 80815ee:	4902      	ldr	r1, [pc, #8]	; (80815f8 <_ZNK14CellularSignal15getQualityValueEv+0x20>)
 80815f0:	f002 f9a4 	bl	808393c <__aeabi_fdiv>
    }

    return 0.0f;
}
 80815f4:	bd08      	pop	{r3, pc}
 80815f6:	bf00      	nop
 80815f8:	42c80000 	.word	0x42c80000

080815fc <_ZNK14CellularSignal7printToER5Print>:

size_t CellularSignal::printTo(Print& p) const
{
 80815fc:	b570      	push	{r4, r5, r6, lr}
 80815fe:	460d      	mov	r5, r1
 8081600:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 8081602:	220a      	movs	r2, #10
 8081604:	6881      	ldr	r1, [r0, #8]
 8081606:	4628      	mov	r0, r5
 8081608:	f7ff ff91 	bl	808152e <_ZN5Print5printEii>
    n += p.print(',');
 808160c:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 808160e:	4604      	mov	r4, r0
    n += p.print(',');
 8081610:	4628      	mov	r0, r5
 8081612:	f7ff ff3b 	bl	808148c <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
 8081616:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
 8081618:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
 808161a:	68f1      	ldr	r1, [r6, #12]
 808161c:	4628      	mov	r0, r5
 808161e:	f7ff ff86 	bl	808152e <_ZN5Print5printEii>
    return n;
}
 8081622:	4420      	add	r0, r4
 8081624:	bd70      	pop	{r4, r5, r6, pc}

08081626 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
 8081626:	f1a0 0004 	sub.w	r0, r0, #4
 808162a:	f7ff bfe7 	b.w	80815fc <_ZNK14CellularSignal7printToER5Print>

0808162e <_ZN14CellularSignalD0Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 808162e:	b510      	push	{r4, lr}
 8081630:	4604      	mov	r4, r0
 8081632:	2128      	movs	r1, #40	; 0x28
 8081634:	f001 f851 	bl	80826da <_ZdlPvj>
 8081638:	4620      	mov	r0, r4
 808163a:	bd10      	pop	{r4, pc}

0808163c <_ZNK14CellularSignal10getQualityEv>:

    return 0.0f;
}

float CellularSignal::getQuality() const
{
 808163c:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
 808163e:	7d03      	ldrb	r3, [r0, #20]
 8081640:	b15b      	cbz	r3, 808165a <_ZNK14CellularSignal10getQualityEv+0x1e>
 8081642:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8081644:	2800      	cmp	r0, #0
 8081646:	db08      	blt.n	808165a <_ZNK14CellularSignal10getQualityEv+0x1e>
        return (float)sig_.quality / 65535.0f * 100.0f;
 8081648:	f002 f870 	bl	808372c <__aeabi_i2f>
 808164c:	4904      	ldr	r1, [pc, #16]	; (8081660 <_ZNK14CellularSignal10getQualityEv+0x24>)
 808164e:	f002 f975 	bl	808393c <__aeabi_fdiv>
 8081652:	4904      	ldr	r1, [pc, #16]	; (8081664 <_ZNK14CellularSignal10getQualityEv+0x28>)
 8081654:	f002 f8be 	bl	80837d4 <__aeabi_fmul>
 8081658:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 808165a:	4803      	ldr	r0, [pc, #12]	; (8081668 <_ZNK14CellularSignal10getQualityEv+0x2c>)
}
 808165c:	bd08      	pop	{r3, pc}
 808165e:	bf00      	nop
 8081660:	477fff00 	.word	0x477fff00
 8081664:	42c80000 	.word	0x42c80000
 8081668:	bf800000 	.word	0xbf800000

0808166c <_ZNK14CellularSignal11getStrengthEv>:
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
 808166c:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
 808166e:	7d03      	ldrb	r3, [r0, #20]
 8081670:	b15b      	cbz	r3, 808168a <_ZNK14CellularSignal11getStrengthEv+0x1e>
 8081672:	69c0      	ldr	r0, [r0, #28]
 8081674:	2800      	cmp	r0, #0
 8081676:	db08      	blt.n	808168a <_ZNK14CellularSignal11getStrengthEv+0x1e>
        return (float)sig_.strength / 65535.0f * 100.0f;
 8081678:	f002 f858 	bl	808372c <__aeabi_i2f>
 808167c:	4904      	ldr	r1, [pc, #16]	; (8081690 <_ZNK14CellularSignal11getStrengthEv+0x24>)
 808167e:	f002 f95d 	bl	808393c <__aeabi_fdiv>
 8081682:	4904      	ldr	r1, [pc, #16]	; (8081694 <_ZNK14CellularSignal11getStrengthEv+0x28>)
 8081684:	f002 f8a6 	bl	80837d4 <__aeabi_fmul>
 8081688:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 808168a:	4803      	ldr	r0, [pc, #12]	; (8081698 <_ZNK14CellularSignal11getStrengthEv+0x2c>)
}
 808168c:	bd08      	pop	{r3, pc}
 808168e:	bf00      	nop
 8081690:	477fff00 	.word	0x477fff00
 8081694:	42c80000 	.word	0x42c80000
 8081698:	bf800000 	.word	0xbf800000

0808169c <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
 808169c:	b530      	push	{r4, r5, lr}
    sig_ = sig;
 808169e:	460d      	mov	r5, r1
 80816a0:	f100 0410 	add.w	r4, r0, #16
 80816a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80816a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80816a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80816ac:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
 80816b0:	2001      	movs	r0, #1
 80816b2:	bd30      	pop	{r4, r5, pc}

080816b4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80816b4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80816b6:	4b18      	ldr	r3, [pc, #96]	; (8081718 <serialEventRun+0x64>)
 80816b8:	b133      	cbz	r3, 80816c8 <serialEventRun+0x14>
 80816ba:	f000 fc4f 	bl	8081f5c <_Z16_fetch_usbserialv>
 80816be:	6803      	ldr	r3, [r0, #0]
 80816c0:	691b      	ldr	r3, [r3, #16]
 80816c2:	4798      	blx	r3
 80816c4:	2800      	cmp	r0, #0
 80816c6:	dc1e      	bgt.n	8081706 <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80816c8:	4b14      	ldr	r3, [pc, #80]	; (808171c <serialEventRun+0x68>)
 80816ca:	b133      	cbz	r3, 80816da <serialEventRun+0x26>
 80816cc:	f000 fe16 	bl	80822fc <_Z22__fetch_global_Serial1v>
 80816d0:	6803      	ldr	r3, [r0, #0]
 80816d2:	691b      	ldr	r3, [r3, #16]
 80816d4:	4798      	blx	r3
 80816d6:	2800      	cmp	r0, #0
 80816d8:	dc18      	bgt.n	808170c <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80816da:	4b11      	ldr	r3, [pc, #68]	; (8081720 <serialEventRun+0x6c>)
 80816dc:	b10b      	cbz	r3, 80816e2 <serialEventRun+0x2e>
 80816de:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 80816e2:	4b10      	ldr	r3, [pc, #64]	; (8081724 <serialEventRun+0x70>)
 80816e4:	b10b      	cbz	r3, 80816ea <serialEventRun+0x36>
 80816e6:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 80816ea:	4b0f      	ldr	r3, [pc, #60]	; (8081728 <serialEventRun+0x74>)
 80816ec:	b10b      	cbz	r3, 80816f2 <serialEventRun+0x3e>
 80816ee:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80816f2:	4b0e      	ldr	r3, [pc, #56]	; (808172c <serialEventRun+0x78>)
 80816f4:	b17b      	cbz	r3, 8081716 <serialEventRun+0x62>
 80816f6:	f000 fc6d 	bl	8081fd4 <_Z17_fetch_usbserial1v>
 80816fa:	6803      	ldr	r3, [r0, #0]
 80816fc:	691b      	ldr	r3, [r3, #16]
 80816fe:	4798      	blx	r3
 8081700:	2800      	cmp	r0, #0
 8081702:	dc06      	bgt.n	8081712 <serialEventRun+0x5e>
 8081704:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8081706:	f3af 8000 	nop.w
 808170a:	e7dd      	b.n	80816c8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 808170c:	f3af 8000 	nop.w
 8081710:	e7e3      	b.n	80816da <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 8081712:	f3af 8000 	nop.w
 8081716:	bd08      	pop	{r3, pc}
	...

08081730 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8081730:	b508      	push	{r3, lr}
	serialEventRun();
 8081732:	f7ff ffbf 	bl	80816b4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8081736:	f7ff fac7 	bl	8080cc8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 808173a:	4b01      	ldr	r3, [pc, #4]	; (8081740 <_post_loop+0x10>)
 808173c:	6018      	str	r0, [r3, #0]
 808173e:	bd08      	pop	{r3, pc}
 8081740:	20000740 	.word	0x20000740

08081744 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8081744:	4802      	ldr	r0, [pc, #8]	; (8081750 <_Z33system_initialize_user_backup_ramv+0xc>)
 8081746:	4a03      	ldr	r2, [pc, #12]	; (8081754 <_Z33system_initialize_user_backup_ramv+0x10>)
 8081748:	4903      	ldr	r1, [pc, #12]	; (8081758 <_Z33system_initialize_user_backup_ramv+0x14>)
 808174a:	1a12      	subs	r2, r2, r0
 808174c:	f002 bb60 	b.w	8083e10 <memcpy>
 8081750:	40024000 	.word	0x40024000
 8081754:	40024004 	.word	0x40024004
 8081758:	080861a8 	.word	0x080861a8

0808175c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 808175c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 808175e:	2300      	movs	r3, #0
 8081760:	9300      	str	r3, [sp, #0]
 8081762:	461a      	mov	r2, r3
 8081764:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8081768:	f7ff fbe8 	bl	8080f3c <system_ctrl_set_result>
}
 808176c:	b003      	add	sp, #12
 808176e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08081774 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 8081774:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8081776:	8843      	ldrh	r3, [r0, #2]
 8081778:	2b0a      	cmp	r3, #10
 808177a:	d008      	beq.n	808178e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 808177c:	2b50      	cmp	r3, #80	; 0x50
 808177e:	d109      	bne.n	8081794 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 8081780:	4b09      	ldr	r3, [pc, #36]	; (80817a8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8081782:	681b      	ldr	r3, [r3, #0]
 8081784:	b13b      	cbz	r3, 8081796 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 8081786:	b003      	add	sp, #12
 8081788:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 808178c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 808178e:	f7ff ffe5 	bl	808175c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 8081792:	e006      	b.n	80817a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8081794:	2300      	movs	r3, #0
 8081796:	9300      	str	r3, [sp, #0]
 8081798:	461a      	mov	r2, r3
 808179a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 808179e:	f7ff fbcd 	bl	8080f3c <system_ctrl_set_result>
        break;
    }
}
 80817a2:	b003      	add	sp, #12
 80817a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80817a8:	200001b8 	.word	0x200001b8

080817ac <module_user_init_hook>:

void module_user_init_hook()
{
 80817ac:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80817ae:	4c10      	ldr	r4, [pc, #64]	; (80817f0 <module_user_init_hook+0x44>)
 80817b0:	4d10      	ldr	r5, [pc, #64]	; (80817f4 <module_user_init_hook+0x48>)
 80817b2:	6823      	ldr	r3, [r4, #0]
 80817b4:	42ab      	cmp	r3, r5
 80817b6:	4b10      	ldr	r3, [pc, #64]	; (80817f8 <module_user_init_hook+0x4c>)
 80817b8:	bf0c      	ite	eq
 80817ba:	2201      	moveq	r2, #1
 80817bc:	2200      	movne	r2, #0
 80817be:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80817c0:	d002      	beq.n	80817c8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80817c2:	f7ff ffbf 	bl	8081744 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80817c6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80817c8:	f7ff fa76 	bl	8080cb8 <HAL_RNG_GetRandomNumber>
 80817cc:	4604      	mov	r4, r0
    srand(seed);
 80817ce:	f002 fb33 	bl	8083e38 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80817d2:	4b0a      	ldr	r3, [pc, #40]	; (80817fc <module_user_init_hook+0x50>)
 80817d4:	b113      	cbz	r3, 80817dc <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80817d6:	4620      	mov	r0, r4
 80817d8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80817dc:	2100      	movs	r1, #0
 80817de:	4807      	ldr	r0, [pc, #28]	; (80817fc <module_user_init_hook+0x50>)
 80817e0:	f7ff fc26 	bl	8081030 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80817e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80817e8:	2100      	movs	r1, #0
 80817ea:	4805      	ldr	r0, [pc, #20]	; (8081800 <module_user_init_hook+0x54>)
 80817ec:	f7ff bb9c 	b.w	8080f28 <system_ctrl_set_app_request_handler>
 80817f0:	40024000 	.word	0x40024000
 80817f4:	9a271c1e 	.word	0x9a271c1e
 80817f8:	200001bc 	.word	0x200001bc
 80817fc:	00000000 	.word	0x00000000
 8081800:	08081775 	.word	0x08081775

08081804 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8081804:	4770      	bx	lr

08081806 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 8081806:	2000      	movs	r0, #0
 8081808:	4770      	bx	lr

0808180a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808180a:	b510      	push	{r4, lr}
 808180c:	4604      	mov	r4, r0
 808180e:	2110      	movs	r1, #16
 8081810:	f000 ff63 	bl	80826da <_ZdlPvj>
 8081814:	4620      	mov	r0, r4
 8081816:	bd10      	pop	{r4, pc}

08081818 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 8081818:	b508      	push	{r3, lr}
      { delete this; }
 808181a:	b108      	cbz	r0, 8081820 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 808181c:	f7ff fff5 	bl	808180a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8081820:	bd08      	pop	{r3, pc}

08081822 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8081822:	2200      	movs	r2, #0
 8081824:	6002      	str	r2, [r0, #0]
 8081826:	f64f 729c 	movw	r2, #65436	; 0xff9c
 808182a:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 808182c:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808182e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8081832:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8081834:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081836:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 8081838:	680c      	ldr	r4, [r1, #0]
 808183a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 808183c:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 808183e:	bd10      	pop	{r4, pc}

08081840 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 8081840:	b510      	push	{r4, lr}
 8081842:	4604      	mov	r4, r0
    free((void*)msg_);
 8081844:	6800      	ldr	r0, [r0, #0]
 8081846:	f7ff fc03 	bl	8081050 <free>
}
 808184a:	4620      	mov	r0, r4
 808184c:	bd10      	pop	{r4, pc}

0808184e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 808184e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8081850:	68c4      	ldr	r4, [r0, #12]
 8081852:	b1f4      	cbz	r4, 8081892 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 8081854:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8081856:	2b02      	cmp	r3, #2
 8081858:	d103      	bne.n	8081862 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 808185a:	f104 000c 	add.w	r0, r4, #12
 808185e:	f7ff ffef 	bl	8081840 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 8081862:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 8081864:	b135      	cbz	r5, 8081874 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081866:	4628      	mov	r0, r5
 8081868:	f7fe fc7d 	bl	8080166 <_ZNSt14_Function_baseD1Ev>
 808186c:	2110      	movs	r1, #16
 808186e:	4628      	mov	r0, r5
 8081870:	f000 ff33 	bl	80826da <_ZdlPvj>
 8081874:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8081876:	b135      	cbz	r5, 8081886 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 8081878:	4628      	mov	r0, r5
 808187a:	f7fe fc74 	bl	8080166 <_ZNSt14_Function_baseD1Ev>
 808187e:	2110      	movs	r1, #16
 8081880:	4628      	mov	r0, r5
 8081882:	f000 ff2a 	bl	80826da <_ZdlPvj>
 8081886:	4620      	mov	r0, r4
 8081888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808188c:	2114      	movs	r1, #20
 808188e:	f000 bf24 	b.w	80826da <_ZdlPvj>
 8081892:	bd38      	pop	{r3, r4, r5, pc}

08081894 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 8081894:	b510      	push	{r4, lr}
 8081896:	b088      	sub	sp, #32
 8081898:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 808189a:	4668      	mov	r0, sp
 808189c:	f7ff fd25 	bl	80812ea <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80818a0:	4669      	mov	r1, sp
 80818a2:	a804      	add	r0, sp, #16
 80818a4:	f7ff fd43 	bl	808132e <_ZN6StringC1ERKS_>
 80818a8:	a804      	add	r0, sp, #16
 80818aa:	47a0      	blx	r4
 80818ac:	4604      	mov	r4, r0
 80818ae:	a804      	add	r0, sp, #16
 80818b0:	f7ff fcd4 	bl	808125c <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80818b4:	4668      	mov	r0, sp
 80818b6:	f7ff fcd1 	bl	808125c <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80818ba:	4620      	mov	r0, r4
 80818bc:	b008      	add	sp, #32
 80818be:	bd10      	pop	{r4, pc}

080818c0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80818c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80818c2:	4607      	mov	r7, r0
 80818c4:	460e      	mov	r6, r1
 80818c6:	4615      	mov	r5, r2
 80818c8:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80818ca:	2410      	movs	r4, #16
 80818cc:	4622      	mov	r2, r4
 80818ce:	2100      	movs	r1, #0
 80818d0:	4668      	mov	r0, sp
 80818d2:	f002 faa8 	bl	8083e26 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80818d6:	2200      	movs	r2, #0
 80818d8:	4669      	mov	r1, sp
 80818da:	4610      	mov	r0, r2
         size = sizeof(*this);
 80818dc:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 80818e0:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80818e2:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80818e4:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80818e6:	f7ff fb8b 	bl	8081000 <spark_function>
}
 80818ea:	b005      	add	sp, #20
 80818ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080818ee <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80818ee:	b513      	push	{r0, r1, r4, lr}
 80818f0:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80818f2:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80818f6:	2300      	movs	r3, #0
 80818f8:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80818fa:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80818fc:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80818fe:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081900:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 8081902:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8081904:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081906:	f7fe fc75 	bl	80801f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808190a:	4620      	mov	r0, r4
 808190c:	b002      	add	sp, #8
 808190e:	bd10      	pop	{r4, pc}

08081910 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8081910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081912:	460c      	mov	r4, r1
 8081914:	4606      	mov	r6, r0
 8081916:	460f      	mov	r7, r1
 8081918:	f854 3b04 	ldr.w	r3, [r4], #4
 808191c:	ad02      	add	r5, sp, #8
 808191e:	f845 3d08 	str.w	r3, [r5, #-8]!
 8081922:	4621      	mov	r1, r4
 8081924:	a801      	add	r0, sp, #4
 8081926:	f7ff fe04 	bl	8081532 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 808192a:	4629      	mov	r1, r5
 808192c:	4630      	mov	r0, r6
 808192e:	f7ff ffde 	bl	80818ee <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081932:	a801      	add	r0, sp, #4
 8081934:	f7fe fc5e 	bl	80801f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081938:	4620      	mov	r0, r4
 808193a:	f7fe fc5b 	bl	80801f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 808193e:	4638      	mov	r0, r7
 8081940:	2108      	movs	r1, #8
 8081942:	f000 feca 	bl	80826da <_ZdlPvj>
        return p;
    }
 8081946:	4630      	mov	r0, r6
 8081948:	b003      	add	sp, #12
 808194a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808194c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 808194c:	b538      	push	{r3, r4, r5, lr}
 808194e:	2300      	movs	r3, #0
 8081950:	4604      	mov	r4, r0
 8081952:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081954:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8081956:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081958:	f7fe fba1 	bl	808009e <_Znwj>
 808195c:	b128      	cbz	r0, 808196a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 808195e:	2301      	movs	r3, #1
 8081960:	6043      	str	r3, [r0, #4]
 8081962:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 8081964:	4b02      	ldr	r3, [pc, #8]	; (8081970 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8081966:	60c5      	str	r5, [r0, #12]
 8081968:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808196a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 808196c:	4620      	mov	r0, r4
 808196e:	bd38      	pop	{r3, r4, r5, pc}
 8081970:	08085d6c 	.word	0x08085d6c

08081974 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081974:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8081976:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081978:	b90a      	cbnz	r2, 808197e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 808197a:	f000 feb0 	bl	80826de <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808197e:	68c3      	ldr	r3, [r0, #12]
    }
 8081980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081984:	4718      	bx	r3

08081986 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8081986:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081988:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 808198a:	f100 0110 	add.w	r1, r0, #16
 808198e:	f7ff fff1 	bl	8081974 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8081992:	bd08      	pop	{r3, pc}

08081994 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081994:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8081996:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081998:	b90a      	cbnz	r2, 808199e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 808199a:	f000 fea0 	bl	80826de <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808199e:	68c3      	ldr	r3, [r0, #12]
    }
 80819a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80819a4:	4718      	bx	r3

080819a6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80819a6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80819a8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80819aa:	f100 0110 	add.w	r1, r0, #16
 80819ae:	f7ff fff1 	bl	8081994 <_ZNKSt8functionIFvRKbEEclES1_>
 80819b2:	bd08      	pop	{r3, pc}

080819b4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80819b4:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80819b6:	2300      	movs	r3, #0
 80819b8:	6083      	str	r3, [r0, #8]
 80819ba:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80819bc:	4604      	mov	r4, r0
 80819be:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80819c0:	b12b      	cbz	r3, 80819ce <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80819c2:	2202      	movs	r2, #2
 80819c4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80819c6:	68eb      	ldr	r3, [r5, #12]
 80819c8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80819ca:	68ab      	ldr	r3, [r5, #8]
 80819cc:	60a3      	str	r3, [r4, #8]
	}
    }
 80819ce:	4620      	mov	r0, r4
 80819d0:	bd38      	pop	{r3, r4, r5, pc}
	...

080819d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80819d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80819d6:	b089      	sub	sp, #36	; 0x24
 80819d8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80819da:	4668      	mov	r0, sp
 80819dc:	f7ff ff21 	bl	8081822 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80819e0:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80819e4:	2300      	movs	r3, #0
 80819e6:	f88d 3008 	strb.w	r3, [sp, #8]
 80819ea:	e8d4 3f4f 	ldrexb	r3, [r4]
 80819ee:	2b00      	cmp	r3, #0
 80819f0:	d103      	bne.n	80819fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80819f2:	e8c4 2f41 	strexb	r1, r2, [r4]
 80819f6:	2900      	cmp	r1, #0
 80819f8:	d1f7      	bne.n	80819ea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80819fa:	d002      	beq.n	8081a02 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80819fc:	f88d 3008 	strb.w	r3, [sp, #8]
 8081a00:	e063      	b.n	8081aca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 8081a02:	f114 050c 	adds.w	r5, r4, #12
 8081a06:	d003      	beq.n	8081a10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 8081a08:	4669      	mov	r1, sp
 8081a0a:	4628      	mov	r0, r5
 8081a0c:	f7ff ff09 	bl	8081822 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8081a10:	f3bf 8f5f 	dmb	sy
 8081a14:	2301      	movs	r3, #1
 8081a16:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8081a18:	f3bf 8f5f 	dmb	sy
 8081a1c:	f104 0308 	add.w	r3, r4, #8
 8081a20:	2000      	movs	r0, #0
 8081a22:	e853 6f00 	ldrex	r6, [r3]
 8081a26:	e843 0200 	strex	r2, r0, [r3]
 8081a2a:	2a00      	cmp	r2, #0
 8081a2c:	d1f9      	bne.n	8081a22 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 8081a2e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8081a32:	2e00      	cmp	r6, #0
 8081a34:	d049      	beq.n	8081aca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8081a36:	f7ff fa67 	bl	8080f08 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8081a3a:	b120      	cbz	r0, 8081a46 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8081a3c:	4629      	mov	r1, r5
 8081a3e:	4630      	mov	r0, r6
 8081a40:	f7ff ff98 	bl	8081974 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8081a44:	e03a      	b.n	8081abc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8081a46:	4631      	mov	r1, r6
 8081a48:	a802      	add	r0, sp, #8
 8081a4a:	f7ff ffb3 	bl	80819b4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8081a4e:	68e0      	ldr	r0, [r4, #12]
 8081a50:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8081a54:	b108      	cbz	r0, 8081a5a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 8081a56:	f002 fa1f 	bl	8083e98 <strdup>
 8081a5a:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8081a5c:	2010      	movs	r0, #16
 8081a5e:	f8ad 501c 	strh.w	r5, [sp, #28]
 8081a62:	f7fe fb1c 	bl	808009e <_Znwj>
 8081a66:	4605      	mov	r5, r0
 8081a68:	b1e8      	cbz	r0, 8081aa6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081a6a:	2700      	movs	r7, #0
 8081a6c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081a6e:	2018      	movs	r0, #24
 8081a70:	f7fe fb15 	bl	808009e <_Znwj>
 8081a74:	4604      	mov	r4, r0
 8081a76:	b188      	cbz	r0, 8081a9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8081a78:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081a7a:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8081a7c:	a802      	add	r0, sp, #8
 8081a7e:	f7ff fd77 	bl	8081570 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081a82:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8081a84:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8081a86:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081a88:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8081a8a:	9204      	str	r2, [sp, #16]
 8081a8c:	68e2      	ldr	r2, [r4, #12]
 8081a8e:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 8081a90:	60e3      	str	r3, [r4, #12]
 8081a92:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081a96:	9205      	str	r2, [sp, #20]
 8081a98:	f7ff fec3 	bl	8081822 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081a9c:	4b0d      	ldr	r3, [pc, #52]	; (8081ad4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081a9e:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081aa0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8081aa2:	4b0d      	ldr	r3, [pc, #52]	; (8081ad8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 8081aa4:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 8081aa6:	a806      	add	r0, sp, #24
 8081aa8:	f7ff feca 	bl	8081840 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081aac:	a802      	add	r0, sp, #8
 8081aae:	f7fe fb5a 	bl	8080166 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8081ab2:	2200      	movs	r2, #0
 8081ab4:	4629      	mov	r1, r5
 8081ab6:	4809      	ldr	r0, [pc, #36]	; (8081adc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 8081ab8:	f7ff fa2e 	bl	8080f18 <application_thread_invoke>
 8081abc:	4630      	mov	r0, r6
 8081abe:	f7fe fb52 	bl	8080166 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8081ac2:	2110      	movs	r1, #16
 8081ac4:	4630      	mov	r0, r6
 8081ac6:	f000 fe08 	bl	80826da <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 8081aca:	4668      	mov	r0, sp
 8081acc:	f7ff feb8 	bl	8081840 <_ZN8particle5ErrorD1Ev>
    }
 8081ad0:	b009      	add	sp, #36	; 0x24
 8081ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081ad4:	08081987 	.word	0x08081987
 8081ad8:	08081bfd 	.word	0x08081bfd
 8081adc:	08082349 	.word	0x08082349

08081ae0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8081ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081ae4:	b08b      	sub	sp, #44	; 0x2c
 8081ae6:	4606      	mov	r6, r0
 8081ae8:	460f      	mov	r7, r1
 8081aea:	4690      	mov	r8, r2
 8081aec:	4699      	mov	r9, r3
 8081aee:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8081af2:	f7ff fa8d 	bl	8081010 <spark_cloud_flag_connected>
 8081af6:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 8081af8:	4683      	mov	fp, r0
 8081afa:	bb30      	cbnz	r0, 8081b4a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8081afc:	f64f 732e 	movw	r3, #65326	; 0xff2e
 8081b00:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8081b02:	a905      	add	r1, sp, #20
 8081b04:	4628      	mov	r0, r5
 8081b06:	f8ad 3018 	strh.w	r3, [sp, #24]
 8081b0a:	f7ff fe8a 	bl	8081822 <_ZN8particle5ErrorC1EOS0_>
 8081b0e:	2014      	movs	r0, #20
 8081b10:	f7fe fac5 	bl	808009e <_Znwj>
 8081b14:	4604      	mov	r4, r0
 8081b16:	b158      	cbz	r0, 8081b30 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8081b18:	2302      	movs	r3, #2
 8081b1a:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8081b1c:	2301      	movs	r3, #1
 8081b1e:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8081b20:	f8c0 b004 	str.w	fp, [r0, #4]
 8081b24:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 8081b28:	4629      	mov	r1, r5
 8081b2a:	300c      	adds	r0, #12
 8081b2c:	f7ff fe79 	bl	8081822 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 8081b30:	4630      	mov	r0, r6
 8081b32:	4621      	mov	r1, r4
 8081b34:	f840 4b04 	str.w	r4, [r0], #4
 8081b38:	f7ff ff08 	bl	808194c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8081b3c:	4628      	mov	r0, r5
 8081b3e:	f7ff fe7f 	bl	8081840 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 8081b42:	a805      	add	r0, sp, #20
 8081b44:	f7ff fe7c 	bl	8081840 <_ZN8particle5ErrorD1Ev>
 8081b48:	e052      	b.n	8081bf0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8081b4a:	2400      	movs	r4, #0
 8081b4c:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8081b4e:	2014      	movs	r0, #20
 8081b50:	606c      	str	r4, [r5, #4]
 8081b52:	60ac      	str	r4, [r5, #8]
 8081b54:	9307      	str	r3, [sp, #28]
 8081b56:	f7fe faa2 	bl	808009e <_Znwj>
 8081b5a:	4601      	mov	r1, r0
 8081b5c:	b118      	cbz	r0, 8081b66 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 8081b5e:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8081b60:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8081b62:	6044      	str	r4, [r0, #4]
 8081b64:	6084      	str	r4, [r0, #8]
 8081b66:	a804      	add	r0, sp, #16
 8081b68:	9103      	str	r1, [sp, #12]
 8081b6a:	f7ff feef 	bl	808194c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 8081b6e:	4b22      	ldr	r3, [pc, #136]	; (8081bf8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8081b70:	2008      	movs	r0, #8
 8081b72:	9308      	str	r3, [sp, #32]
 8081b74:	f7fe fa93 	bl	808009e <_Znwj>
 8081b78:	4604      	mov	r4, r0
 8081b7a:	b128      	cbz	r0, 8081b88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081b7c:	9b03      	ldr	r3, [sp, #12]
 8081b7e:	a904      	add	r1, sp, #16
 8081b80:	f840 3b04 	str.w	r3, [r0], #4
 8081b84:	f7ff fcd5 	bl	8081532 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8081b88:	9500      	str	r5, [sp, #0]
 8081b8a:	fa5f f38a 	uxtb.w	r3, sl
 8081b8e:	464a      	mov	r2, r9
 8081b90:	4641      	mov	r1, r8
 8081b92:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 8081b94:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8081b96:	f7ff fa43 	bl	8081020 <spark_send_event>
 8081b9a:	b920      	cbnz	r0, 8081ba6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8081b9c:	9b03      	ldr	r3, [sp, #12]
 8081b9e:	785b      	ldrb	r3, [r3, #1]
 8081ba0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8081ba4:	b183      	cbz	r3, 8081bc8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 8081ba6:	9b03      	ldr	r3, [sp, #12]
 8081ba8:	a904      	add	r1, sp, #16
 8081baa:	a806      	add	r0, sp, #24
 8081bac:	9305      	str	r3, [sp, #20]
 8081bae:	f7ff fcc0 	bl	8081532 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 8081bb2:	a905      	add	r1, sp, #20
 8081bb4:	4630      	mov	r0, r6
 8081bb6:	f7ff fe9a 	bl	80818ee <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081bba:	a806      	add	r0, sp, #24
 8081bbc:	f7fe fb1a 	bl	80801f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081bc0:	a804      	add	r0, sp, #16
 8081bc2:	f7fe fb17 	bl	80801f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081bc6:	e013      	b.n	8081bf0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 8081bc8:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 8081bcc:	a905      	add	r1, sp, #20
 8081bce:	a803      	add	r0, sp, #12
 8081bd0:	9205      	str	r2, [sp, #20]
 8081bd2:	f8ad 3018 	strh.w	r3, [sp, #24]
 8081bd6:	f7ff fefd 	bl	80819d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8081bda:	a805      	add	r0, sp, #20
 8081bdc:	f7ff fe30 	bl	8081840 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8081be0:	a805      	add	r0, sp, #20
 8081be2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8081be4:	f7ff fe94 	bl	8081910 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 8081be8:	a806      	add	r0, sp, #24
 8081bea:	f7fe fb03 	bl	80801f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081bee:	e7da      	b.n	8081ba6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 8081bf0:	4630      	mov	r0, r6
 8081bf2:	b00b      	add	sp, #44	; 0x2c
 8081bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081bf8:	08081d6d 	.word	0x08081d6d

08081bfc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8081bfc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8081bfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081c00:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8081c02:	d006      	beq.n	8081c12 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 8081c04:	2a03      	cmp	r2, #3
 8081c06:	d017      	beq.n	8081c38 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 8081c08:	2a01      	cmp	r2, #1
 8081c0a:	d122      	bne.n	8081c52 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081c0c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8081c0e:	6003      	str	r3, [r0, #0]
	      break;
 8081c10:	e01f      	b.n	8081c52 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081c12:	2018      	movs	r0, #24
 8081c14:	680e      	ldr	r6, [r1, #0]
 8081c16:	f7fe fa42 	bl	808009e <_Znwj>
 8081c1a:	4605      	mov	r5, r0
 8081c1c:	b150      	cbz	r0, 8081c34 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8081c1e:	4631      	mov	r1, r6
 8081c20:	f7ff fec8 	bl	80819b4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8081c24:	6930      	ldr	r0, [r6, #16]
 8081c26:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8081c2a:	b108      	cbz	r0, 8081c30 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8081c2c:	f002 f934 	bl	8083e98 <strdup>
 8081c30:	6128      	str	r0, [r5, #16]
 8081c32:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081c34:	6025      	str	r5, [r4, #0]
 8081c36:	e00c      	b.n	8081c52 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8081c38:	6804      	ldr	r4, [r0, #0]
 8081c3a:	b154      	cbz	r4, 8081c52 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 8081c3c:	f104 0010 	add.w	r0, r4, #16
 8081c40:	f7ff fdfe 	bl	8081840 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081c44:	4620      	mov	r0, r4
 8081c46:	f7fe fa8e 	bl	8080166 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8081c4a:	2118      	movs	r1, #24
 8081c4c:	4620      	mov	r0, r4
 8081c4e:	f000 fd44 	bl	80826da <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8081c52:	2000      	movs	r0, #0
 8081c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081c56 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8081c56:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081c58:	2300      	movs	r3, #0
 8081c5a:	6083      	str	r3, [r0, #8]
 8081c5c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8081c5e:	4604      	mov	r4, r0
 8081c60:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8081c62:	b12b      	cbz	r3, 8081c70 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8081c64:	2202      	movs	r2, #2
 8081c66:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8081c68:	68eb      	ldr	r3, [r5, #12]
 8081c6a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8081c6c:	68ab      	ldr	r3, [r5, #8]
 8081c6e:	60a3      	str	r3, [r4, #8]
	}
    }
 8081c70:	4620      	mov	r0, r4
 8081c72:	bd38      	pop	{r3, r4, r5, pc}

08081c74 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8081c74:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8081c76:	b570      	push	{r4, r5, r6, lr}
 8081c78:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8081c7a:	d006      	beq.n	8081c8a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 8081c7c:	2a03      	cmp	r2, #3
 8081c7e:	d011      	beq.n	8081ca4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 8081c80:	2a01      	cmp	r2, #1
 8081c82:	d118      	bne.n	8081cb6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081c84:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8081c86:	6003      	str	r3, [r0, #0]
	      break;
 8081c88:	e015      	b.n	8081cb6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081c8a:	2014      	movs	r0, #20
 8081c8c:	680e      	ldr	r6, [r1, #0]
 8081c8e:	f7fe fa06 	bl	808009e <_Znwj>
 8081c92:	4605      	mov	r5, r0
 8081c94:	b120      	cbz	r0, 8081ca0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8081c96:	4631      	mov	r1, r6
 8081c98:	f7ff ffdd 	bl	8081c56 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8081c9c:	7c33      	ldrb	r3, [r6, #16]
 8081c9e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081ca0:	6025      	str	r5, [r4, #0]
 8081ca2:	e008      	b.n	8081cb6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8081ca4:	6804      	ldr	r4, [r0, #0]
 8081ca6:	b134      	cbz	r4, 8081cb6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081ca8:	4620      	mov	r0, r4
 8081caa:	f7fe fa5c 	bl	8080166 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8081cae:	2114      	movs	r1, #20
 8081cb0:	4620      	mov	r0, r4
 8081cb2:	f000 fd12 	bl	80826da <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8081cb6:	2000      	movs	r0, #0
 8081cb8:	bd70      	pop	{r4, r5, r6, pc}
	...

08081cbc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 8081cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081cbe:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8081cc0:	f3bf 8f5f 	dmb	sy
 8081cc4:	b087      	sub	sp, #28
 8081cc6:	2300      	movs	r3, #0
 8081cc8:	e850 6f00 	ldrex	r6, [r0]
 8081ccc:	e840 3200 	strex	r2, r3, [r0]
 8081cd0:	2a00      	cmp	r2, #0
 8081cd2:	d1f9      	bne.n	8081cc8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 8081cd4:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8081cd8:	2e00      	cmp	r6, #0
 8081cda:	d03f      	beq.n	8081d5c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8081cdc:	4618      	mov	r0, r3
 8081cde:	f7ff f913 	bl	8080f08 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8081ce2:	4607      	mov	r7, r0
 8081ce4:	b120      	cbz	r0, 8081cf0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8081ce6:	4621      	mov	r1, r4
 8081ce8:	4630      	mov	r0, r6
 8081cea:	f7ff fe53 	bl	8081994 <_ZNKSt8functionIFvRKbEEclES1_>
 8081cee:	e02e      	b.n	8081d4e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8081cf0:	4631      	mov	r1, r6
 8081cf2:	a801      	add	r0, sp, #4
 8081cf4:	f7ff ffaf 	bl	8081c56 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8081cf8:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8081cfa:	2010      	movs	r0, #16
 8081cfc:	f88d 3014 	strb.w	r3, [sp, #20]
 8081d00:	f7fe f9cd 	bl	808009e <_Znwj>
 8081d04:	4605      	mov	r5, r0
 8081d06:	b1d0      	cbz	r0, 8081d3e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081d08:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081d0a:	2014      	movs	r0, #20
 8081d0c:	f7fe f9c7 	bl	808009e <_Znwj>
 8081d10:	4604      	mov	r4, r0
 8081d12:	b178      	cbz	r0, 8081d34 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081d14:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8081d16:	4601      	mov	r1, r0
 8081d18:	a801      	add	r0, sp, #4
 8081d1a:	f7ff fc29 	bl	8081570 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081d1e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8081d20:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8081d22:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081d24:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8081d26:	9203      	str	r2, [sp, #12]
 8081d28:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8081d2a:	60e3      	str	r3, [r4, #12]
 8081d2c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081d30:	9204      	str	r2, [sp, #16]
 8081d32:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081d34:	4b0a      	ldr	r3, [pc, #40]	; (8081d60 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081d36:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081d38:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8081d3a:	4b0a      	ldr	r3, [pc, #40]	; (8081d64 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 8081d3c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081d3e:	a801      	add	r0, sp, #4
 8081d40:	f7fe fa11 	bl	8080166 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8081d44:	2200      	movs	r2, #0
 8081d46:	4629      	mov	r1, r5
 8081d48:	4807      	ldr	r0, [pc, #28]	; (8081d68 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 8081d4a:	f7ff f8e5 	bl	8080f18 <application_thread_invoke>
 8081d4e:	4630      	mov	r0, r6
 8081d50:	f7fe fa09 	bl	8080166 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8081d54:	2110      	movs	r1, #16
 8081d56:	4630      	mov	r0, r6
 8081d58:	f000 fcbf 	bl	80826da <_ZdlPvj>
        }
    }
 8081d5c:	b007      	add	sp, #28
 8081d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081d60:	080819a7 	.word	0x080819a7
 8081d64:	08081c75 	.word	0x08081c75
 8081d68:	08082349 	.word	0x08082349

08081d6c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8081d6c:	b530      	push	{r4, r5, lr}
 8081d6e:	4604      	mov	r4, r0
 8081d70:	b085      	sub	sp, #20
 8081d72:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8081d74:	4668      	mov	r0, sp
 8081d76:	4611      	mov	r1, r2
 8081d78:	f7ff fdca 	bl	8081910 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8081d7c:	b17c      	cbz	r4, 8081d9e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 8081d7e:	b224      	sxth	r4, r4
 8081d80:	4628      	mov	r0, r5
 8081d82:	b10d      	cbz	r5, 8081d88 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 8081d84:	f002 f888 	bl	8083e98 <strdup>
 8081d88:	9002      	str	r0, [sp, #8]
 8081d8a:	a902      	add	r1, sp, #8
 8081d8c:	4668      	mov	r0, sp
 8081d8e:	f8ad 400c 	strh.w	r4, [sp, #12]
 8081d92:	f7ff fe1f 	bl	80819d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8081d96:	a802      	add	r0, sp, #8
 8081d98:	f7ff fd52 	bl	8081840 <_ZN8particle5ErrorD1Ev>
 8081d9c:	e01d      	b.n	8081dda <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8081d9e:	f04f 0201 	mov.w	r2, #1
 8081da2:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8081da4:	f88d 4008 	strb.w	r4, [sp, #8]
 8081da8:	e8d0 3f4f 	ldrexb	r3, [r0]
 8081dac:	42a3      	cmp	r3, r4
 8081dae:	d103      	bne.n	8081db8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 8081db0:	e8c0 2f41 	strexb	r1, r2, [r0]
 8081db4:	2900      	cmp	r1, #0
 8081db6:	d1f7      	bne.n	8081da8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 8081db8:	d002      	beq.n	8081dc0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 8081dba:	f88d 3008 	strb.w	r3, [sp, #8]
 8081dbe:	e00c      	b.n	8081dda <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 8081dc0:	f110 010c 	adds.w	r1, r0, #12
 8081dc4:	f04f 0301 	mov.w	r3, #1
 8081dc8:	bf18      	it	ne
 8081dca:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8081dcc:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 8081dd0:	3004      	adds	r0, #4
 8081dd2:	f800 3c03 	strb.w	r3, [r0, #-3]
 8081dd6:	f7ff ff71 	bl	8081cbc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 8081dda:	a801      	add	r0, sp, #4
 8081ddc:	f7fe fa0a 	bl	80801f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 8081de0:	b005      	add	sp, #20
 8081de2:	bd30      	pop	{r4, r5, pc}

08081de4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8081de4:	4770      	bx	lr

08081de6 <_ZN9IPAddressD0Ev>:
 8081de6:	b510      	push	{r4, lr}
 8081de8:	4604      	mov	r4, r0
 8081dea:	2108      	movs	r1, #8
 8081dec:	f000 fc75 	bl	80826da <_ZdlPvj>
 8081df0:	4620      	mov	r0, r4
 8081df2:	bd10      	pop	{r4, pc}

08081df4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8081df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081df6:	460f      	mov	r7, r1
 8081df8:	f100 0608 	add.w	r6, r0, #8
 8081dfc:	1d05      	adds	r5, r0, #4
 8081dfe:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8081e00:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8081e04:	220a      	movs	r2, #10
 8081e06:	4638      	mov	r0, r7
 8081e08:	f7ff fb6d 	bl	80814e6 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8081e0c:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8081e0e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8081e10:	d007      	beq.n	8081e22 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 8081e12:	2c00      	cmp	r4, #0
 8081e14:	d0f4      	beq.n	8081e00 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8081e16:	212e      	movs	r1, #46	; 0x2e
 8081e18:	4638      	mov	r0, r7
 8081e1a:	f7ff fb37 	bl	808148c <_ZN5Print5printEc>
 8081e1e:	4404      	add	r4, r0
 8081e20:	e7ee      	b.n	8081e00 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 8081e22:	4620      	mov	r0, r4
 8081e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08081e28 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 8081e28:	4a02      	ldr	r2, [pc, #8]	; (8081e34 <_ZN9IPAddressC1Ev+0xc>)
 8081e2a:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8081e2c:	2200      	movs	r2, #0
 8081e2e:	6042      	str	r2, [r0, #4]
{
    clear();
}
 8081e30:	4770      	bx	lr
 8081e32:	bf00      	nop
 8081e34:	08085d88 	.word	0x08085d88

08081e38 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 8081e38:	4a02      	ldr	r2, [pc, #8]	; (8081e44 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8081e3a:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 8081e3c:	680a      	ldr	r2, [r1, #0]
 8081e3e:	6042      	str	r2, [r0, #4]
}
 8081e40:	4770      	bx	lr
 8081e42:	bf00      	nop
 8081e44:	08085d88 	.word	0x08085d88

08081e48 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8081e48:	4a01      	ldr	r2, [pc, #4]	; (8081e50 <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 8081e4a:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8081e4c:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 8081e4e:	4770      	bx	lr
 8081e50:	08085d88 	.word	0x08085d88

08081e54 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 8081e54:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8081e56:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8081e5a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8081e5e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8081e62:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8081e66:	6041      	str	r1, [r0, #4]
 8081e68:	bd10      	pop	{r4, pc}
	...

08081e6c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8081e6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8081e6e:	4d04      	ldr	r5, [pc, #16]	; (8081e80 <_ZN9IPAddressC1Ehhhh+0x14>)
 8081e70:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8081e72:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8081e76:	9500      	str	r5, [sp, #0]
 8081e78:	f7ff ffec 	bl	8081e54 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8081e7c:	b003      	add	sp, #12
 8081e7e:	bd30      	pop	{r4, r5, pc}
 8081e80:	08085d88 	.word	0x08085d88

08081e84 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8081e84:	7441      	strb	r1, [r0, #17]
 8081e86:	4770      	bx	lr

08081e88 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8081e88:	4770      	bx	lr

08081e8a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 8081e8a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8081e8c:	2100      	movs	r1, #0
 8081e8e:	7c00      	ldrb	r0, [r0, #16]
 8081e90:	f7ff f81a 	bl	8080ec8 <HAL_USB_USART_Receive_Data>
}
 8081e94:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8081e98:	bf28      	it	cs
 8081e9a:	f04f 30ff 	movcs.w	r0, #4294967295
 8081e9e:	bd08      	pop	{r3, pc}

08081ea0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 8081ea0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8081ea2:	2101      	movs	r1, #1
 8081ea4:	7c00      	ldrb	r0, [r0, #16]
 8081ea6:	f7ff f80f 	bl	8080ec8 <HAL_USB_USART_Receive_Data>
}
 8081eaa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8081eae:	bf28      	it	cs
 8081eb0:	f04f 30ff 	movcs.w	r0, #4294967295
 8081eb4:	bd08      	pop	{r3, pc}

08081eb6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 8081eb6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8081eb8:	7c00      	ldrb	r0, [r0, #16]
 8081eba:	f7fe fffd 	bl	8080eb8 <HAL_USB_USART_Available_Data_For_Write>
}
 8081ebe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8081ec2:	bd08      	pop	{r3, pc}

08081ec4 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 8081ec4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8081ec6:	7c00      	ldrb	r0, [r0, #16]
 8081ec8:	f7fe ffee 	bl	8080ea8 <HAL_USB_USART_Available_Data>
}
 8081ecc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8081ed0:	bd08      	pop	{r3, pc}

08081ed2 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 8081ed2:	7c00      	ldrb	r0, [r0, #16]
 8081ed4:	f7ff b808 	b.w	8080ee8 <HAL_USB_USART_Flush_Data>

08081ed8 <_ZN9USBSerialD0Ev>:
 8081ed8:	b510      	push	{r4, lr}
 8081eda:	4604      	mov	r4, r0
 8081edc:	2114      	movs	r1, #20
 8081ede:	f000 fbfc 	bl	80826da <_ZdlPvj>
 8081ee2:	4620      	mov	r0, r4
 8081ee4:	bd10      	pop	{r4, pc}

08081ee6 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8081ee6:	b538      	push	{r3, r4, r5, lr}
 8081ee8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8081eea:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8081eec:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8081eee:	f7fe ffe3 	bl	8080eb8 <HAL_USB_USART_Available_Data_For_Write>
 8081ef2:	2800      	cmp	r0, #0
 8081ef4:	dc01      	bgt.n	8081efa <_ZN9USBSerial5writeEh+0x14>
 8081ef6:	7c60      	ldrb	r0, [r4, #17]
 8081ef8:	b128      	cbz	r0, 8081f06 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8081efa:	4629      	mov	r1, r5
 8081efc:	7c20      	ldrb	r0, [r4, #16]
 8081efe:	f7fe ffeb 	bl	8080ed8 <HAL_USB_USART_Send_Data>
 8081f02:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 8081f06:	bd38      	pop	{r3, r4, r5, pc}

08081f08 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8081f08:	b510      	push	{r4, lr}
 8081f0a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8081f0c:	2300      	movs	r3, #0
 8081f0e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8081f10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8081f14:	60a3      	str	r3, [r4, #8]
 8081f16:	4b05      	ldr	r3, [pc, #20]	; (8081f2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8081f18:	4608      	mov	r0, r1
 8081f1a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8081f1c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8081f1e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8081f20:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 8081f22:	4611      	mov	r1, r2
 8081f24:	f7fe ffb8 	bl	8080e98 <HAL_USB_USART_Init>
}
 8081f28:	4620      	mov	r0, r4
 8081f2a:	bd10      	pop	{r4, pc}
 8081f2c:	08085d9c 	.word	0x08085d9c

08081f30 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8081f30:	b510      	push	{r4, lr}
 8081f32:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8081f34:	2214      	movs	r2, #20
 8081f36:	2100      	movs	r1, #0
 8081f38:	f001 ff75 	bl	8083e26 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8081f3c:	4b05      	ldr	r3, [pc, #20]	; (8081f54 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8081f3e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8081f40:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8081f42:	4b05      	ldr	r3, [pc, #20]	; (8081f58 <_Z19acquireSerialBufferv+0x28>)
 8081f44:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8081f46:	f240 1301 	movw	r3, #257	; 0x101
 8081f4a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8081f4c:	2381      	movs	r3, #129	; 0x81
 8081f4e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8081f50:	bd10      	pop	{r4, pc}
 8081f52:	bf00      	nop
 8081f54:	20000245 	.word	0x20000245
 8081f58:	200001c4 	.word	0x200001c4

08081f5c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8081f5c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8081f5e:	4d0e      	ldr	r5, [pc, #56]	; (8081f98 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8081f60:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8081f62:	a801      	add	r0, sp, #4
 8081f64:	f7ff ffe4 	bl	8081f30 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8081f68:	6829      	ldr	r1, [r5, #0]
 8081f6a:	f011 0401 	ands.w	r4, r1, #1
 8081f6e:	d110      	bne.n	8081f92 <_Z16_fetch_usbserialv+0x36>
 8081f70:	4628      	mov	r0, r5
 8081f72:	f7fe f898 	bl	80800a6 <__cxa_guard_acquire>
 8081f76:	b160      	cbz	r0, 8081f92 <_Z16_fetch_usbserialv+0x36>
 8081f78:	aa01      	add	r2, sp, #4
 8081f7a:	4621      	mov	r1, r4
 8081f7c:	4807      	ldr	r0, [pc, #28]	; (8081f9c <_Z16_fetch_usbserialv+0x40>)
 8081f7e:	f7ff ffc3 	bl	8081f08 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8081f82:	4628      	mov	r0, r5
 8081f84:	f7fe f894 	bl	80800b0 <__cxa_guard_release>
 8081f88:	4a05      	ldr	r2, [pc, #20]	; (8081fa0 <_Z16_fetch_usbserialv+0x44>)
 8081f8a:	4906      	ldr	r1, [pc, #24]	; (8081fa4 <_Z16_fetch_usbserialv+0x48>)
 8081f8c:	4803      	ldr	r0, [pc, #12]	; (8081f9c <_Z16_fetch_usbserialv+0x40>)
 8081f8e:	f000 fb9f 	bl	80826d0 <__aeabi_atexit>
	return _usbserial;
}
 8081f92:	4802      	ldr	r0, [pc, #8]	; (8081f9c <_Z16_fetch_usbserialv+0x40>)
 8081f94:	b007      	add	sp, #28
 8081f96:	bd30      	pop	{r4, r5, pc}
 8081f98:	200001c0 	.word	0x200001c0
 8081f9c:	20000348 	.word	0x20000348
 8081fa0:	200000b0 	.word	0x200000b0
 8081fa4:	08081e89 	.word	0x08081e89

08081fa8 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8081fa8:	b510      	push	{r4, lr}
 8081faa:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8081fac:	2214      	movs	r2, #20
 8081fae:	2100      	movs	r1, #0
 8081fb0:	f001 ff39 	bl	8083e26 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8081fb4:	4b05      	ldr	r3, [pc, #20]	; (8081fcc <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8081fb6:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8081fb8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8081fba:	4b05      	ldr	r3, [pc, #20]	; (8081fd0 <_Z23acquireUSBSerial1Bufferv+0x28>)
 8081fbc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8081fbe:	f240 1301 	movw	r3, #257	; 0x101
 8081fc2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8081fc4:	2381      	movs	r3, #129	; 0x81
 8081fc6:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8081fc8:	bd10      	pop	{r4, pc}
 8081fca:	bf00      	nop
 8081fcc:	200003f8 	.word	0x200003f8
 8081fd0:	20000360 	.word	0x20000360

08081fd4 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8081fd4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8081fd6:	4c0e      	ldr	r4, [pc, #56]	; (8082010 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8081fd8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8081fda:	a801      	add	r0, sp, #4
 8081fdc:	f7ff ffe4 	bl	8081fa8 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8081fe0:	6823      	ldr	r3, [r4, #0]
 8081fe2:	07db      	lsls	r3, r3, #31
 8081fe4:	d410      	bmi.n	8082008 <_Z17_fetch_usbserial1v+0x34>
 8081fe6:	4620      	mov	r0, r4
 8081fe8:	f7fe f85d 	bl	80800a6 <__cxa_guard_acquire>
 8081fec:	b160      	cbz	r0, 8082008 <_Z17_fetch_usbserial1v+0x34>
 8081fee:	aa01      	add	r2, sp, #4
 8081ff0:	2101      	movs	r1, #1
 8081ff2:	4808      	ldr	r0, [pc, #32]	; (8082014 <_Z17_fetch_usbserial1v+0x40>)
 8081ff4:	f7ff ff88 	bl	8081f08 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8081ff8:	4620      	mov	r0, r4
 8081ffa:	f7fe f859 	bl	80800b0 <__cxa_guard_release>
 8081ffe:	4a06      	ldr	r2, [pc, #24]	; (8082018 <_Z17_fetch_usbserial1v+0x44>)
 8082000:	4906      	ldr	r1, [pc, #24]	; (808201c <_Z17_fetch_usbserial1v+0x48>)
 8082002:	4804      	ldr	r0, [pc, #16]	; (8082014 <_Z17_fetch_usbserial1v+0x40>)
 8082004:	f000 fb64 	bl	80826d0 <__aeabi_atexit>
  return _usbserial1;
}
 8082008:	4802      	ldr	r0, [pc, #8]	; (8082014 <_Z17_fetch_usbserial1v+0x40>)
 808200a:	b006      	add	sp, #24
 808200c:	bd10      	pop	{r4, pc}
 808200e:	bf00      	nop
 8082010:	2000035c 	.word	0x2000035c
 8082014:	200003e4 	.word	0x200003e4
 8082018:	200000b0 	.word	0x200000b0
 808201c:	08081e89 	.word	0x08081e89

08082020 <_Z29call_wiring_interrupt_handlerPv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082020:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
 8082022:	b510      	push	{r4, lr}
 8082024:	b90a      	cbnz	r2, 808202a <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
 8082026:	f000 fb5a 	bl	80826de <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808202a:	68c3      	ldr	r3, [r0, #12]
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
 808202c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8082030:	4718      	bx	r3

08082032 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
 8082032:	f7fe be21 	b.w	8080c78 <HAL_Interrupts_Disable_All>

08082036 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
 8082036:	f7fe be17 	b.w	8080c68 <HAL_Interrupts_Enable_All>

0808203a <_ZNSt8functionIFvvEEC1ERKS1_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808203a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808203c:	2300      	movs	r3, #0
 808203e:	6083      	str	r3, [r0, #8]
 8082040:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8082042:	4604      	mov	r4, r0
 8082044:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8082046:	b12b      	cbz	r3, 8082054 <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8082048:	2202      	movs	r2, #2
 808204a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808204c:	68eb      	ldr	r3, [r5, #12]
 808204e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8082050:	68ab      	ldr	r3, [r5, #8]
 8082052:	60a3      	str	r3, [r4, #8]
	}
    }
 8082054:	4620      	mov	r0, r4
 8082056:	bd38      	pop	{r3, r4, r5, pc}

08082058 <_Z16allocate_handlertRSt8functionIFvvEE>:
#include "system_error.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
 8082058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
 808205a:	4b0d      	ldr	r3, [pc, #52]	; (8082090 <_Z16allocate_handlertRSt8functionIFvvEE+0x38>)
#include "system_error.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
 808205c:	4606      	mov	r6, r0
    delete handlers[pin];
 808205e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
#include "system_error.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
 8082062:	460f      	mov	r7, r1
 8082064:	461c      	mov	r4, r3
    delete handlers[pin];
 8082066:	b135      	cbz	r5, 8082076 <_Z16allocate_handlertRSt8functionIFvvEE+0x1e>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082068:	4628      	mov	r0, r5
 808206a:	f7fe f87c 	bl	8080166 <_ZNSt14_Function_baseD1Ev>
 808206e:	2110      	movs	r1, #16
 8082070:	4628      	mov	r0, r5
 8082072:	f000 fb32 	bl	80826da <_ZdlPvj>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
 8082076:	2010      	movs	r0, #16
 8082078:	f7fe f811 	bl	808009e <_Znwj>
 808207c:	4605      	mov	r5, r0
 808207e:	b110      	cbz	r0, 8082086 <_Z16allocate_handlertRSt8functionIFvvEE+0x2e>
 8082080:	4639      	mov	r1, r7
 8082082:	f7ff ffda 	bl	808203a <_ZNSt8functionIFvvEEC1ERKS1_>
 8082086:	f844 5026 	str.w	r5, [r4, r6, lsl #2]
}
 808208a:	4628      	mov	r0, r5
 808208c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808208e:	bf00      	nop
 8082090:	200004fc 	.word	0x200004fc

08082094 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
  }
  return nullptr;
}

bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 8082094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082096:	460c      	mov	r4, r1
 8082098:	4605      	mov	r5, r0
 808209a:	b085      	sub	sp, #20
 808209c:	4617      	mov	r7, r2
 808209e:	461e      	mov	r6, r3
    HAL_Interrupts_Detach(pin);
 80820a0:	f7fe fdda 	bl	8080c58 <HAL_Interrupts_Detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
 80820a4:	4621      	mov	r1, r4
 80820a6:	4628      	mov	r0, r5
 80820a8:	f7ff ffd6 	bl	8082058 <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
 80820ac:	4604      	mov	r4, r0
 80820ae:	b1d0      	cbz	r0, 80820e6 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x52>
        HAL_InterruptExtraConfiguration extra = {0};
 80820b0:	2100      	movs	r1, #0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80820b2:	2304      	movs	r3, #4
  if (priority >= 0) {
 80820b4:	428e      	cmp	r6, r1
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
 80820b6:	9103      	str	r1, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80820b8:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 80820bc:	bfb4      	ite	lt
 80820be:	460b      	movlt	r3, r1
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80820c0:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
{
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80820c4:	4602      	mov	r2, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80820c6:	bfa4      	itt	ge
 80820c8:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 80820cc:	ab03      	addge	r3, sp, #12
{
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80820ce:	9300      	str	r3, [sp, #0]
 80820d0:	4907      	ldr	r1, [pc, #28]	; (80820f0 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x5c>)
 80820d2:	463b      	mov	r3, r7
 80820d4:	4628      	mov	r0, r5

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80820d6:	bfa8      	it	ge
 80820d8:	f88d 600d 	strbge.w	r6, [sp, #13]
{
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80820dc:	f7fe fdb4 	bl	8080c48 <HAL_Interrupts_Attach>
 80820e0:	b108      	cbz	r0, 80820e6 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x52>
            return false;
 80820e2:	2000      	movs	r0, #0
 80820e4:	e002      	b.n	80820ec <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>
        }
    }
    return handler!=NULL;
 80820e6:	1c20      	adds	r0, r4, #0
 80820e8:	bf18      	it	ne
 80820ea:	2001      	movne	r0, #1
}
 80820ec:	b005      	add	sp, #20
 80820ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80820f0:	08082021 	.word	0x08082021

080820f4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 80820f4:	2200      	movs	r2, #0
 80820f6:	4611      	mov	r1, r2
 80820f8:	6840      	ldr	r0, [r0, #4]
 80820fa:	f7fe bf41 	b.w	8080f80 <network_ready>

080820fe <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80820fe:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 8082102:	2600      	movs	r6, #0
 8082104:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8082106:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082108:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808210a:	4688      	mov	r8, r1
 808210c:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 808210e:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082112:	f001 fedc 	bl	8083ece <strlen>
 8082116:	9600      	str	r6, [sp, #0]
 8082118:	b281      	uxth	r1, r0
 808211a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 808211e:	4622      	mov	r2, r4
 8082120:	4638      	mov	r0, r7
 8082122:	f7fe fea9 	bl	8080e78 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8082126:	b120      	cbz	r0, 8082132 <_ZN5spark13CellularClass7resolveEPKc+0x34>
 8082128:	4631      	mov	r1, r6
 808212a:	4628      	mov	r0, r5
 808212c:	f7ff fe8c 	bl	8081e48 <_ZN9IPAddressC1Em>
 8082130:	e003      	b.n	808213a <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 8082132:	4621      	mov	r1, r4
 8082134:	4628      	mov	r0, r5
 8082136:	f7ff fe7f 	bl	8081e38 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 808213a:	4628      	mov	r0, r5
 808213c:	b004      	add	sp, #16
 808213e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08082142 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 8082142:	2200      	movs	r2, #0
 8082144:	4611      	mov	r1, r2
 8082146:	6840      	ldr	r0, [r0, #4]
 8082148:	f7fe bf3a 	b.w	8080fc0 <network_listening>

0808214c <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 808214c:	2200      	movs	r2, #0
 808214e:	4611      	mov	r1, r2
 8082150:	6840      	ldr	r0, [r0, #4]
 8082152:	f7fe bf45 	b.w	8080fe0 <network_get_listen_timeout>

08082156 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 8082156:	2200      	movs	r2, #0
 8082158:	6840      	ldr	r0, [r0, #4]
 808215a:	f7fe bf39 	b.w	8080fd0 <network_set_listen_timeout>

0808215e <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 808215e:	2200      	movs	r2, #0
 8082160:	f081 0101 	eor.w	r1, r1, #1
 8082164:	6840      	ldr	r0, [r0, #4]
 8082166:	f7fe bf23 	b.w	8080fb0 <network_listen>

0808216a <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 808216a:	2300      	movs	r3, #0
 808216c:	461a      	mov	r2, r3
 808216e:	4619      	mov	r1, r3
 8082170:	6840      	ldr	r0, [r0, #4]
 8082172:	f7fe bf15 	b.w	8080fa0 <network_off>

08082176 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8082176:	2300      	movs	r3, #0
 8082178:	461a      	mov	r2, r3
 808217a:	4619      	mov	r1, r3
 808217c:	6840      	ldr	r0, [r0, #4]
 808217e:	f7fe bf07 	b.w	8080f90 <network_on>

08082182 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 8082182:	2200      	movs	r2, #0
 8082184:	4611      	mov	r1, r2
 8082186:	6840      	ldr	r0, [r0, #4]
 8082188:	f7fe beea 	b.w	8080f60 <network_connecting>

0808218c <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 808218c:	2200      	movs	r2, #0
 808218e:	2102      	movs	r1, #2
 8082190:	6840      	ldr	r0, [r0, #4]
 8082192:	f7fe beed 	b.w	8080f70 <network_disconnect>

08082196 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 8082196:	2300      	movs	r3, #0
 8082198:	461a      	mov	r2, r3
 808219a:	6840      	ldr	r0, [r0, #4]
 808219c:	f7fe bed8 	b.w	8080f50 <network_connect>

080821a0 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
 80821a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80821a2:	460f      	mov	r7, r1
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
 80821a4:	4b1a      	ldr	r3, [pc, #104]	; (8082210 <_ZN5spark13CellularClass4RSSIEv+0x70>)
 80821a6:	2500      	movs	r5, #0
 80821a8:	6003      	str	r3, [r0, #0]
 80821aa:	2618      	movs	r6, #24
 80821ac:	3328      	adds	r3, #40	; 0x28
 80821ae:	b089      	sub	sp, #36	; 0x24
 80821b0:	6043      	str	r3, [r0, #4]
 80821b2:	6085      	str	r5, [r0, #8]
 80821b4:	60c5      	str	r5, [r0, #12]
 80821b6:	4632      	mov	r2, r6
 80821b8:	4629      	mov	r1, r5
 80821ba:	4604      	mov	r4, r0
 80821bc:	3010      	adds	r0, #16
 80821be:	f001 fe32 	bl	8083e26 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 80821c2:	462a      	mov	r2, r5
 80821c4:	4629      	mov	r1, r5
 80821c6:	6878      	ldr	r0, [r7, #4]
 80821c8:	f7fe feda 	bl	8080f80 <network_ready>
 80821cc:	b908      	cbnz	r0, 80821d2 <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
 80821ce:	60a0      	str	r0, [r4, #8]
            return sig;
 80821d0:	e01b      	b.n	808220a <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
 80821d2:	4629      	mov	r1, r5
 80821d4:	4632      	mov	r2, r6
 80821d6:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
 80821d8:	9500      	str	r5, [sp, #0]
 80821da:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
 80821dc:	f001 fe23 	bl	8083e26 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 80821e0:	a902      	add	r1, sp, #8
 80821e2:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
 80821e4:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 80821e8:	f7fe fe4e 	bl	8080e88 <cellular_signal>
 80821ec:	b110      	cbz	r0, 80821f4 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
 80821ee:	2301      	movs	r3, #1
 80821f0:	60a3      	str	r3, [r4, #8]
            return sig;
 80821f2:	e00a      	b.n	808220a <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
 80821f4:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
 80821f6:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
 80821f8:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
 80821fa:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
 80821fc:	b90b      	cbnz	r3, 8082202 <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
 80821fe:	2302      	movs	r3, #2
 8082200:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
 8082202:	a902      	add	r1, sp, #8
 8082204:	4620      	mov	r0, r4
 8082206:	f7ff fa49 	bl	808169c <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
 808220a:	4620      	mov	r0, r4
 808220c:	b009      	add	sp, #36	; 0x24
 808220e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082210:	08085d38 	.word	0x08085d38

08082214 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8082214:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8082216:	4c08      	ldr	r4, [pc, #32]	; (8082238 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8082218:	2528      	movs	r5, #40	; 0x28
 808221a:	462a      	mov	r2, r5
 808221c:	2100      	movs	r1, #0
 808221e:	4620      	mov	r0, r4
 8082220:	f001 fe01 	bl	8083e26 <memset>
        cid = -1;
 8082224:	f04f 33ff 	mov.w	r3, #4294967295
 8082228:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 808222a:	4b04      	ldr	r3, [pc, #16]	; (808223c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
 808222c:	2204      	movs	r2, #4
 808222e:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8082230:	4a03      	ldr	r2, [pc, #12]	; (8082240 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
        size = sizeof(*this);
 8082232:	8025      	strh	r5, [r4, #0]
 8082234:	601a      	str	r2, [r3, #0]
 8082236:	bd38      	pop	{r3, r4, r5, pc}
 8082238:	200005c0 	.word	0x200005c0
 808223c:	200005b8 	.word	0x200005b8
 8082240:	08085dcc 	.word	0x08085dcc

08082244 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8082244:	4770      	bx	lr

08082246 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8082246:	7441      	strb	r1, [r0, #17]
 8082248:	4770      	bx	lr

0808224a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 808224a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 808224c:	7c00      	ldrb	r0, [r0, #16]
 808224e:	f7fe fdd3 	bl	8080df8 <HAL_USART_Available_Data_For_Write>
}
 8082252:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082256:	bd08      	pop	{r3, pc}

08082258 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 8082258:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 808225a:	7c00      	ldrb	r0, [r0, #16]
 808225c:	f7fe fda4 	bl	8080da8 <HAL_USART_Available_Data>
}
 8082260:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8082264:	bd08      	pop	{r3, pc}

08082266 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 8082266:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 8082268:	7c00      	ldrb	r0, [r0, #16]
 808226a:	f7fe fdad 	bl	8080dc8 <HAL_USART_Peek_Data>
}
 808226e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8082272:	bf28      	it	cs
 8082274:	f04f 30ff 	movcs.w	r0, #4294967295
 8082278:	bd08      	pop	{r3, pc}

0808227a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 808227a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 808227c:	7c00      	ldrb	r0, [r0, #16]
 808227e:	f7fe fd9b 	bl	8080db8 <HAL_USART_Read_Data>
}
 8082282:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8082286:	bf28      	it	cs
 8082288:	f04f 30ff 	movcs.w	r0, #4294967295
 808228c:	bd08      	pop	{r3, pc}

0808228e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 808228e:	7c00      	ldrb	r0, [r0, #16]
 8082290:	f7fe bda2 	b.w	8080dd8 <HAL_USART_Flush_Data>

08082294 <_ZN11USARTSerialD0Ev>:
 8082294:	b510      	push	{r4, lr}
 8082296:	4604      	mov	r4, r0
 8082298:	2114      	movs	r1, #20
 808229a:	f000 fa1e 	bl	80826da <_ZdlPvj>
 808229e:	4620      	mov	r0, r4
 80822a0:	bd10      	pop	{r4, pc}

080822a2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80822a2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80822a4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80822a6:	4604      	mov	r4, r0
 80822a8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80822aa:	b925      	cbnz	r5, 80822b6 <_ZN11USARTSerial5writeEh+0x14>
 80822ac:	7c00      	ldrb	r0, [r0, #16]
 80822ae:	f7fe fda3 	bl	8080df8 <HAL_USART_Available_Data_For_Write>
 80822b2:	2800      	cmp	r0, #0
 80822b4:	dd05      	ble.n	80822c2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80822b6:	4631      	mov	r1, r6
 80822b8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80822ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80822be:	f7fe bd6b 	b.w	8080d98 <HAL_USART_Write_Data>
  }
  return 0;
}
 80822c2:	4628      	mov	r0, r5
 80822c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080822c8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80822c8:	b510      	push	{r4, lr}
 80822ca:	4604      	mov	r4, r0
 80822cc:	4608      	mov	r0, r1
 80822ce:	4611      	mov	r1, r2
 80822d0:	2200      	movs	r2, #0
 80822d2:	6062      	str	r2, [r4, #4]
 80822d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80822d8:	60a2      	str	r2, [r4, #8]
 80822da:	4a05      	ldr	r2, [pc, #20]	; (80822f0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80822dc:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80822de:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80822e0:	2201      	movs	r2, #1
 80822e2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80822e4:	461a      	mov	r2, r3
 80822e6:	f7fe fd4f 	bl	8080d88 <HAL_USART_Init>
}
 80822ea:	4620      	mov	r0, r4
 80822ec:	bd10      	pop	{r4, pc}
 80822ee:	bf00      	nop
 80822f0:	08085e00 	.word	0x08085e00

080822f4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80822f4:	7c00      	ldrb	r0, [r0, #16]
 80822f6:	f7fe bd77 	b.w	8080de8 <HAL_USART_Is_Enabled>
	...

080822fc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80822fc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80822fe:	4d0c      	ldr	r5, [pc, #48]	; (8082330 <_Z22__fetch_global_Serial1v+0x34>)
 8082300:	6829      	ldr	r1, [r5, #0]
 8082302:	f011 0401 	ands.w	r4, r1, #1
 8082306:	d111      	bne.n	808232c <_Z22__fetch_global_Serial1v+0x30>
 8082308:	4628      	mov	r0, r5
 808230a:	f7fd fecc 	bl	80800a6 <__cxa_guard_acquire>
 808230e:	b168      	cbz	r0, 808232c <_Z22__fetch_global_Serial1v+0x30>
 8082310:	4a08      	ldr	r2, [pc, #32]	; (8082334 <_Z22__fetch_global_Serial1v+0x38>)
 8082312:	4621      	mov	r1, r4
 8082314:	4b08      	ldr	r3, [pc, #32]	; (8082338 <_Z22__fetch_global_Serial1v+0x3c>)
 8082316:	4809      	ldr	r0, [pc, #36]	; (808233c <_Z22__fetch_global_Serial1v+0x40>)
 8082318:	f7ff ffd6 	bl	80822c8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 808231c:	4628      	mov	r0, r5
 808231e:	f7fd fec7 	bl	80800b0 <__cxa_guard_release>
 8082322:	4a07      	ldr	r2, [pc, #28]	; (8082340 <_Z22__fetch_global_Serial1v+0x44>)
 8082324:	4907      	ldr	r1, [pc, #28]	; (8082344 <_Z22__fetch_global_Serial1v+0x48>)
 8082326:	4805      	ldr	r0, [pc, #20]	; (808233c <_Z22__fetch_global_Serial1v+0x40>)
 8082328:	f000 f9d2 	bl	80826d0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 808232c:	4803      	ldr	r0, [pc, #12]	; (808233c <_Z22__fetch_global_Serial1v+0x40>)
 808232e:	bd38      	pop	{r3, r4, r5, pc}
 8082330:	20000680 	.word	0x20000680
 8082334:	20000684 	.word	0x20000684
 8082338:	200005fc 	.word	0x200005fc
 808233c:	200005e8 	.word	0x200005e8
 8082340:	200000b0 	.word	0x200000b0
 8082344:	08082245 	.word	0x08082245

08082348 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8082348:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808234a:	6883      	ldr	r3, [r0, #8]
 808234c:	4604      	mov	r4, r0
 808234e:	b90b      	cbnz	r3, 8082354 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8082350:	f000 f9c5 	bl	80826de <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082354:	68c3      	ldr	r3, [r0, #12]
 8082356:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8082358:	68a3      	ldr	r3, [r4, #8]
 808235a:	b11b      	cbz	r3, 8082364 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808235c:	2203      	movs	r2, #3
 808235e:	4621      	mov	r1, r4
 8082360:	4620      	mov	r0, r4
 8082362:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8082364:	4620      	mov	r0, r4
}
 8082366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 808236a:	2110      	movs	r1, #16
 808236c:	f000 b9b5 	b.w	80826da <_ZdlPvj>

08082370 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 8082370:	4770      	bx	lr

08082372 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8082372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082374:	4606      	mov	r6, r0
 8082376:	4615      	mov	r5, r2
 8082378:	460c      	mov	r4, r1
 808237a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 808237c:	42bc      	cmp	r4, r7
 808237e:	d006      	beq.n	808238e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8082380:	6833      	ldr	r3, [r6, #0]
 8082382:	f814 1b01 	ldrb.w	r1, [r4], #1
 8082386:	689b      	ldr	r3, [r3, #8]
 8082388:	4630      	mov	r0, r6
 808238a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 808238c:	e7f6      	b.n	808237c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 808238e:	4628      	mov	r0, r5
 8082390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082392 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 8082392:	2200      	movs	r2, #0
 8082394:	7c00      	ldrb	r0, [r0, #16]
 8082396:	f7fe bd37 	b.w	8080e08 <HAL_I2C_Write_Data>

0808239a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 808239a:	2100      	movs	r1, #0
 808239c:	7c00      	ldrb	r0, [r0, #16]
 808239e:	f7fe bd3b 	b.w	8080e18 <HAL_I2C_Available_Data>

080823a2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80823a2:	2100      	movs	r1, #0
 80823a4:	7c00      	ldrb	r0, [r0, #16]
 80823a6:	f7fe bd3f 	b.w	8080e28 <HAL_I2C_Read_Data>

080823aa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80823aa:	2100      	movs	r1, #0
 80823ac:	7c00      	ldrb	r0, [r0, #16]
 80823ae:	f7fe bd43 	b.w	8080e38 <HAL_I2C_Peek_Data>

080823b2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80823b2:	2100      	movs	r1, #0
 80823b4:	7c00      	ldrb	r0, [r0, #16]
 80823b6:	f7fe bd47 	b.w	8080e48 <HAL_I2C_Flush_Data>

080823ba <_ZN7TwoWireD0Ev>:
 80823ba:	b510      	push	{r4, lr}
 80823bc:	4604      	mov	r4, r0
 80823be:	2114      	movs	r1, #20
 80823c0:	f000 f98b 	bl	80826da <_ZdlPvj>
 80823c4:	4620      	mov	r0, r4
 80823c6:	bd10      	pop	{r4, pc}

080823c8 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80823c8:	b510      	push	{r4, lr}
 80823ca:	4604      	mov	r4, r0
 80823cc:	4608      	mov	r0, r1
 80823ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80823d2:	60a3      	str	r3, [r4, #8]
 80823d4:	4b04      	ldr	r3, [pc, #16]	; (80823e8 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80823d6:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80823d8:	7420      	strb	r0, [r4, #16]
 80823da:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80823dc:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80823de:	f7fe fd43 	bl	8080e68 <HAL_I2C_Init>

}
 80823e2:	4620      	mov	r0, r4
 80823e4:	bd10      	pop	{r4, pc}
 80823e6:	bf00      	nop
 80823e8:	08085e30 	.word	0x08085e30

080823ec <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80823ec:	2100      	movs	r1, #0
 80823ee:	7c00      	ldrb	r0, [r0, #16]
 80823f0:	f7fe bd32 	b.w	8080e58 <HAL_I2C_Is_Enabled>

080823f4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80823f4:	2300      	movs	r3, #0
 80823f6:	461a      	mov	r2, r3
 80823f8:	6840      	ldr	r0, [r0, #4]
 80823fa:	f7fe bda9 	b.w	8080f50 <network_connect>

080823fe <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80823fe:	2200      	movs	r2, #0
 8082400:	2102      	movs	r1, #2
 8082402:	6840      	ldr	r0, [r0, #4]
 8082404:	f7fe bdb4 	b.w	8080f70 <network_disconnect>

08082408 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8082408:	2200      	movs	r2, #0
 808240a:	4611      	mov	r1, r2
 808240c:	6840      	ldr	r0, [r0, #4]
 808240e:	f7fe bda7 	b.w	8080f60 <network_connecting>

08082412 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 8082412:	2200      	movs	r2, #0
 8082414:	4611      	mov	r1, r2
 8082416:	6840      	ldr	r0, [r0, #4]
 8082418:	f7fe bdb2 	b.w	8080f80 <network_ready>

0808241c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 808241c:	2300      	movs	r3, #0
 808241e:	461a      	mov	r2, r3
 8082420:	4619      	mov	r1, r3
 8082422:	6840      	ldr	r0, [r0, #4]
 8082424:	f7fe bdb4 	b.w	8080f90 <network_on>

08082428 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8082428:	2300      	movs	r3, #0
 808242a:	461a      	mov	r2, r3
 808242c:	4619      	mov	r1, r3
 808242e:	6840      	ldr	r0, [r0, #4]
 8082430:	f7fe bdb6 	b.w	8080fa0 <network_off>

08082434 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8082434:	2200      	movs	r2, #0
 8082436:	f081 0101 	eor.w	r1, r1, #1
 808243a:	6840      	ldr	r0, [r0, #4]
 808243c:	f7fe bdb8 	b.w	8080fb0 <network_listen>

08082440 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8082440:	2200      	movs	r2, #0
 8082442:	6840      	ldr	r0, [r0, #4]
 8082444:	f7fe bdc4 	b.w	8080fd0 <network_set_listen_timeout>

08082448 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8082448:	2200      	movs	r2, #0
 808244a:	4611      	mov	r1, r2
 808244c:	6840      	ldr	r0, [r0, #4]
 808244e:	f7fe bdc7 	b.w	8080fe0 <network_get_listen_timeout>

08082452 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 8082452:	2200      	movs	r2, #0
 8082454:	4611      	mov	r1, r2
 8082456:	6840      	ldr	r0, [r0, #4]
 8082458:	f7fe bdb2 	b.w	8080fc0 <network_listening>

0808245c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 808245c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808245e:	4617      	mov	r7, r2
 8082460:	b087      	sub	sp, #28
 8082462:	4605      	mov	r5, r0
    IPAddress addr;
 8082464:	a804      	add	r0, sp, #16
 8082466:	f7ff fcdf 	bl	8081e28 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 808246a:	2600      	movs	r6, #0
 808246c:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808246e:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8082470:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082474:	f001 fd2b 	bl	8083ece <strlen>
 8082478:	4b0a      	ldr	r3, [pc, #40]	; (80824a4 <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 808247a:	9600      	str	r6, [sp, #0]
 808247c:	b281      	uxth	r1, r0
 808247e:	685b      	ldr	r3, [r3, #4]
 8082480:	4622      	mov	r2, r4
 8082482:	4638      	mov	r0, r7
 8082484:	f7fe fcf8 	bl	8080e78 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8082488:	b120      	cbz	r0, 8082494 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 808248a:	4631      	mov	r1, r6
 808248c:	4628      	mov	r0, r5
 808248e:	f7ff fcdb 	bl	8081e48 <_ZN9IPAddressC1Em>
 8082492:	e003      	b.n	808249c <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 8082494:	4621      	mov	r1, r4
 8082496:	4628      	mov	r0, r5
 8082498:	f7ff fcce 	bl	8081e38 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 808249c:	4628      	mov	r0, r5
 808249e:	b007      	add	sp, #28
 80824a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80824a2:	bf00      	nop
 80824a4:	200005b8 	.word	0x200005b8

080824a8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80824a8:	4b02      	ldr	r3, [pc, #8]	; (80824b4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80824aa:	4a03      	ldr	r2, [pc, #12]	; (80824b8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80824ac:	601a      	str	r2, [r3, #0]
 80824ae:	2200      	movs	r2, #0
 80824b0:	605a      	str	r2, [r3, #4]
 80824b2:	4770      	bx	lr
 80824b4:	20000708 	.word	0x20000708
 80824b8:	08085e58 	.word	0x08085e58

080824bc <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
 80824bc:	b508      	push	{r3, lr}
 80824be:	4b02      	ldr	r3, [pc, #8]	; (80824c8 <spark_protocol_instance+0xc>)
 80824c0:	681b      	ldr	r3, [r3, #0]
 80824c2:	681b      	ldr	r3, [r3, #0]
 80824c4:	9301      	str	r3, [sp, #4]
 80824c6:	bd08      	pop	{r3, pc}
 80824c8:	0802019c 	.word	0x0802019c

080824cc <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
 80824cc:	b508      	push	{r3, lr}
 80824ce:	4b02      	ldr	r3, [pc, #8]	; (80824d8 <spark_protocol_set_product_id+0xc>)
 80824d0:	681b      	ldr	r3, [r3, #0]
 80824d2:	685b      	ldr	r3, [r3, #4]
 80824d4:	9301      	str	r3, [sp, #4]
 80824d6:	bd08      	pop	{r3, pc}
 80824d8:	0802019c 	.word	0x0802019c

080824dc <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
 80824dc:	b508      	push	{r3, lr}
 80824de:	4b02      	ldr	r3, [pc, #8]	; (80824e8 <spark_protocol_set_product_firmware_version+0xc>)
 80824e0:	681b      	ldr	r3, [r3, #0]
 80824e2:	689b      	ldr	r3, [r3, #8]
 80824e4:	9301      	str	r3, [sp, #4]
 80824e6:	bd08      	pop	{r3, pc}
 80824e8:	0802019c 	.word	0x0802019c

080824ec <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80824ec:	b510      	push	{r4, lr}
 80824ee:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80824f0:	480f      	ldr	r0, [pc, #60]	; (8082530 <pinAvailable+0x44>)
 80824f2:	f7fe fdf1 	bl	80810d8 <_ZN8SPIClass9isEnabledEv>
 80824f6:	b128      	cbz	r0, 8082504 <pinAvailable+0x18>
 80824f8:	f1a4 030d 	sub.w	r3, r4, #13
 80824fc:	2b02      	cmp	r3, #2
 80824fe:	d801      	bhi.n	8082504 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 8082500:	2000      	movs	r0, #0
 8082502:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 8082504:	f000 f8c4 	bl	8082690 <_Z19__fetch_global_Wirev>
 8082508:	f7ff ff70 	bl	80823ec <_ZN7TwoWire9isEnabledEv>
 808250c:	b108      	cbz	r0, 8082512 <pinAvailable+0x26>
 808250e:	2c01      	cmp	r4, #1
 8082510:	d9f6      	bls.n	8082500 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 8082512:	f7ff fef3 	bl	80822fc <_Z22__fetch_global_Serial1v>
 8082516:	f7ff feed 	bl	80822f4 <_ZN11USARTSerial9isEnabledEv>
 808251a:	b118      	cbz	r0, 8082524 <pinAvailable+0x38>
 808251c:	f1a4 0312 	sub.w	r3, r4, #18
 8082520:	2b01      	cmp	r3, #1
 8082522:	d9ed      	bls.n	8082500 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 8082524:	2c2e      	cmp	r4, #46	; 0x2e
 8082526:	bf8c      	ite	hi
 8082528:	2000      	movhi	r0, #0
 808252a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 808252c:	bd10      	pop	{r4, pc}
 808252e:	bf00      	nop
 8082530:	20000710 	.word	0x20000710

08082534 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8082534:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 8082536:	b538      	push	{r3, r4, r5, lr}
 8082538:	4604      	mov	r4, r0
 808253a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 808253c:	d80a      	bhi.n	8082554 <pinMode+0x20>
 808253e:	29ff      	cmp	r1, #255	; 0xff
 8082540:	d008      	beq.n	8082554 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8082542:	f7ff ffd3 	bl	80824ec <pinAvailable>
 8082546:	b128      	cbz	r0, 8082554 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8082548:	4629      	mov	r1, r5
 808254a:	4620      	mov	r0, r4
}
 808254c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8082550:	f7fe bb5a 	b.w	8080c08 <HAL_Pin_Mode>
 8082554:	bd38      	pop	{r3, r4, r5, pc}

08082556 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8082556:	b538      	push	{r3, r4, r5, lr}
 8082558:	4604      	mov	r4, r0
 808255a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 808255c:	f7fe fb5c 	bl	8080c18 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8082560:	28ff      	cmp	r0, #255	; 0xff
 8082562:	d010      	beq.n	8082586 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 8082564:	2806      	cmp	r0, #6
 8082566:	d804      	bhi.n	8082572 <digitalWrite+0x1c>
 8082568:	234d      	movs	r3, #77	; 0x4d
 808256a:	fa23 f000 	lsr.w	r0, r3, r0
 808256e:	07c3      	lsls	r3, r0, #31
 8082570:	d409      	bmi.n	8082586 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8082572:	4620      	mov	r0, r4
 8082574:	f7ff ffba 	bl	80824ec <pinAvailable>
 8082578:	b128      	cbz	r0, 8082586 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 808257a:	4629      	mov	r1, r5
 808257c:	4620      	mov	r0, r4
}
 808257e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 8082582:	f7fe bb51 	b.w	8080c28 <HAL_GPIO_Write>
 8082586:	bd38      	pop	{r3, r4, r5, pc}

08082588 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 8082588:	b510      	push	{r4, lr}
 808258a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 808258c:	f7fe fb44 	bl	8080c18 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 8082590:	3804      	subs	r0, #4
 8082592:	b2c0      	uxtb	r0, r0
 8082594:	2801      	cmp	r0, #1
 8082596:	d908      	bls.n	80825aa <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 8082598:	4620      	mov	r0, r4
 808259a:	f7ff ffa7 	bl	80824ec <pinAvailable>
 808259e:	b120      	cbz	r0, 80825aa <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80825a0:	4620      	mov	r0, r4
}
 80825a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80825a6:	f7fe bb47 	b.w	8080c38 <HAL_GPIO_Read>
}
 80825aa:	2000      	movs	r0, #0
 80825ac:	bd10      	pop	{r4, pc}

080825ae <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80825ae:	b510      	push	{r4, lr}
 80825b0:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80825b2:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80825b4:	bf9c      	itt	ls
 80825b6:	340a      	addls	r4, #10
 80825b8:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80825ba:	4620      	mov	r0, r4
 80825bc:	f7ff ff96 	bl	80824ec <pinAvailable>
 80825c0:	b150      	cbz	r0, 80825d8 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80825c2:	2103      	movs	r1, #3
 80825c4:	4620      	mov	r0, r4
 80825c6:	f7fe fb17 	bl	8080bf8 <HAL_Validate_Pin_Function>
 80825ca:	2803      	cmp	r0, #3
 80825cc:	d104      	bne.n	80825d8 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80825ce:	4620      	mov	r0, r4
}
 80825d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80825d4:	f7fe bb58 	b.w	8080c88 <HAL_ADC_Read>
}
 80825d8:	2000      	movs	r0, #0
 80825da:	bd10      	pop	{r4, pc}

080825dc <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80825dc:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80825de:	4e11      	ldr	r6, [pc, #68]	; (8082624 <_GLOBAL__sub_I_SPI+0x48>)
 80825e0:	4d11      	ldr	r5, [pc, #68]	; (8082628 <_GLOBAL__sub_I_SPI+0x4c>)
 80825e2:	4c12      	ldr	r4, [pc, #72]	; (808262c <_GLOBAL__sub_I_SPI+0x50>)
 80825e4:	2100      	movs	r1, #0
 80825e6:	4630      	mov	r0, r6
 80825e8:	f7fe fd62 	bl	80810b0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80825ec:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80825ee:	4e10      	ldr	r6, [pc, #64]	; (8082630 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80825f0:	462a      	mov	r2, r5
 80825f2:	4621      	mov	r1, r4
 80825f4:	f000 f86c 	bl	80826d0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80825f8:	2101      	movs	r1, #1
 80825fa:	4630      	mov	r0, r6
 80825fc:	f7fe fd58 	bl	80810b0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8082600:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8082602:	4e0c      	ldr	r6, [pc, #48]	; (8082634 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8082604:	462a      	mov	r2, r5
 8082606:	4621      	mov	r1, r4
 8082608:	f000 f862 	bl	80826d0 <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808260c:	2102      	movs	r1, #2
 808260e:	4630      	mov	r0, r6
 8082610:	f7fe fd4e 	bl	80810b0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8082614:	462a      	mov	r2, r5
 8082616:	4621      	mov	r1, r4
 8082618:	4630      	mov	r0, r6
 808261a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 808261e:	f000 b857 	b.w	80826d0 <__aeabi_atexit>
 8082622:	bf00      	nop
 8082624:	20000710 	.word	0x20000710
 8082628:	200000b0 	.word	0x200000b0
 808262c:	080810a1 	.word	0x080810a1
 8082630:	20000720 	.word	0x20000720
 8082634:	20000730 	.word	0x20000730

08082638 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 8082638:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 808263a:	4c07      	ldr	r4, [pc, #28]	; (8082658 <_Z21__fetch_global_EEPROMv+0x20>)
 808263c:	6823      	ldr	r3, [r4, #0]
 808263e:	07db      	lsls	r3, r3, #31
 8082640:	d408      	bmi.n	8082654 <_Z21__fetch_global_EEPROMv+0x1c>
 8082642:	4620      	mov	r0, r4
 8082644:	f7fd fd2f 	bl	80800a6 <__cxa_guard_acquire>
 8082648:	b120      	cbz	r0, 8082654 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 808264a:	f7fe fb45 	bl	8080cd8 <HAL_EEPROM_Init>
 808264e:	4620      	mov	r0, r4
 8082650:	f7fd fd2e 	bl	80800b0 <__cxa_guard_release>
	return eeprom;
}
 8082654:	4801      	ldr	r0, [pc, #4]	; (808265c <_Z21__fetch_global_EEPROMv+0x24>)
 8082656:	bd10      	pop	{r4, pc}
 8082658:	20000744 	.word	0x20000744
 808265c:	20000748 	.word	0x20000748

08082660 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8082660:	b513      	push	{r0, r1, r4, lr}
 8082662:	4c08      	ldr	r4, [pc, #32]	; (8082684 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8082664:	2300      	movs	r3, #0
 8082666:	461a      	mov	r2, r3
 8082668:	4619      	mov	r1, r3
 808266a:	9300      	str	r3, [sp, #0]
 808266c:	4620      	mov	r0, r4
 808266e:	f7ff fbfd 	bl	8081e6c <_ZN9IPAddressC1Ehhhh>
 8082672:	4620      	mov	r0, r4
 8082674:	4a04      	ldr	r2, [pc, #16]	; (8082688 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8082676:	4905      	ldr	r1, [pc, #20]	; (808268c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8082678:	b002      	add	sp, #8
 808267a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808267e:	f000 b827 	b.w	80826d0 <__aeabi_atexit>
 8082682:	bf00      	nop
 8082684:	2000074c 	.word	0x2000074c
 8082688:	200000b0 	.word	0x200000b0
 808268c:	08081de5 	.word	0x08081de5

08082690 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 8082690:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 8082692:	4d0b      	ldr	r5, [pc, #44]	; (80826c0 <_Z19__fetch_global_Wirev+0x30>)
 8082694:	6829      	ldr	r1, [r5, #0]
 8082696:	f011 0401 	ands.w	r4, r1, #1
 808269a:	d10f      	bne.n	80826bc <_Z19__fetch_global_Wirev+0x2c>
 808269c:	4628      	mov	r0, r5
 808269e:	f7fd fd02 	bl	80800a6 <__cxa_guard_acquire>
 80826a2:	b158      	cbz	r0, 80826bc <_Z19__fetch_global_Wirev+0x2c>
 80826a4:	4621      	mov	r1, r4
 80826a6:	4807      	ldr	r0, [pc, #28]	; (80826c4 <_Z19__fetch_global_Wirev+0x34>)
 80826a8:	f7ff fe8e 	bl	80823c8 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80826ac:	4628      	mov	r0, r5
 80826ae:	f7fd fcff 	bl	80800b0 <__cxa_guard_release>
 80826b2:	4a05      	ldr	r2, [pc, #20]	; (80826c8 <_Z19__fetch_global_Wirev+0x38>)
 80826b4:	4905      	ldr	r1, [pc, #20]	; (80826cc <_Z19__fetch_global_Wirev+0x3c>)
 80826b6:	4803      	ldr	r0, [pc, #12]	; (80826c4 <_Z19__fetch_global_Wirev+0x34>)
 80826b8:	f000 f80a 	bl	80826d0 <__aeabi_atexit>
	return wire;
}
 80826bc:	4801      	ldr	r0, [pc, #4]	; (80826c4 <_Z19__fetch_global_Wirev+0x34>)
 80826be:	bd38      	pop	{r3, r4, r5, pc}
 80826c0:	20000754 	.word	0x20000754
 80826c4:	20000758 	.word	0x20000758
 80826c8:	200000b0 	.word	0x200000b0
 80826cc:	08082371 	.word	0x08082371

080826d0 <__aeabi_atexit>:
 80826d0:	460b      	mov	r3, r1
 80826d2:	4601      	mov	r1, r0
 80826d4:	4618      	mov	r0, r3
 80826d6:	f001 bb89 	b.w	8083dec <__cxa_atexit>

080826da <_ZdlPvj>:
 80826da:	f7fd bce2 	b.w	80800a2 <_ZdlPv>

080826de <_ZSt25__throw_bad_function_callv>:
 80826de:	b508      	push	{r3, lr}
 80826e0:	f7fe fcc6 	bl	8081070 <abort>

080826e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80826e4:	4b18      	ldr	r3, [pc, #96]	; (8082748 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80826e6:	681a      	ldr	r2, [r3, #0]
 80826e8:	07d1      	lsls	r1, r2, #31
 80826ea:	bf5c      	itt	pl
 80826ec:	2201      	movpl	r2, #1
 80826ee:	601a      	strpl	r2, [r3, #0]
 80826f0:	4b16      	ldr	r3, [pc, #88]	; (808274c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80826f2:	681a      	ldr	r2, [r3, #0]
 80826f4:	07d2      	lsls	r2, r2, #31
 80826f6:	bf5c      	itt	pl
 80826f8:	2201      	movpl	r2, #1
 80826fa:	601a      	strpl	r2, [r3, #0]
 80826fc:	4b14      	ldr	r3, [pc, #80]	; (8082750 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80826fe:	681a      	ldr	r2, [r3, #0]
 8082700:	07d0      	lsls	r0, r2, #31
 8082702:	bf5c      	itt	pl
 8082704:	2201      	movpl	r2, #1
 8082706:	601a      	strpl	r2, [r3, #0]
 8082708:	4b12      	ldr	r3, [pc, #72]	; (8082754 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 808270a:	681a      	ldr	r2, [r3, #0]
 808270c:	07d1      	lsls	r1, r2, #31
 808270e:	bf5c      	itt	pl
 8082710:	2201      	movpl	r2, #1
 8082712:	601a      	strpl	r2, [r3, #0]
 8082714:	4b10      	ldr	r3, [pc, #64]	; (8082758 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8082716:	681a      	ldr	r2, [r3, #0]
 8082718:	07d2      	lsls	r2, r2, #31
 808271a:	bf5c      	itt	pl
 808271c:	2201      	movpl	r2, #1
 808271e:	601a      	strpl	r2, [r3, #0]
 8082720:	4b0e      	ldr	r3, [pc, #56]	; (808275c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8082722:	681a      	ldr	r2, [r3, #0]
 8082724:	07d0      	lsls	r0, r2, #31
 8082726:	bf5c      	itt	pl
 8082728:	2201      	movpl	r2, #1
 808272a:	601a      	strpl	r2, [r3, #0]
 808272c:	4b0c      	ldr	r3, [pc, #48]	; (8082760 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 808272e:	681a      	ldr	r2, [r3, #0]
 8082730:	07d1      	lsls	r1, r2, #31
 8082732:	bf5c      	itt	pl
 8082734:	2201      	movpl	r2, #1
 8082736:	601a      	strpl	r2, [r3, #0]
 8082738:	4b0a      	ldr	r3, [pc, #40]	; (8082764 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 808273a:	681a      	ldr	r2, [r3, #0]
 808273c:	07d2      	lsls	r2, r2, #31
 808273e:	bf5c      	itt	pl
 8082740:	2201      	movpl	r2, #1
 8082742:	601a      	strpl	r2, [r3, #0]
 8082744:	4770      	bx	lr
 8082746:	bf00      	nop
 8082748:	20000788 	.word	0x20000788
 808274c:	20000784 	.word	0x20000784
 8082750:	20000780 	.word	0x20000780
 8082754:	2000077c 	.word	0x2000077c
 8082758:	20000778 	.word	0x20000778
 808275c:	20000774 	.word	0x20000774
 8082760:	20000770 	.word	0x20000770
 8082764:	2000076c 	.word	0x2000076c

08082768 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8082768:	4b24      	ldr	r3, [pc, #144]	; (80827fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 808276a:	681a      	ldr	r2, [r3, #0]
 808276c:	07d0      	lsls	r0, r2, #31
 808276e:	bf5c      	itt	pl
 8082770:	2201      	movpl	r2, #1
 8082772:	601a      	strpl	r2, [r3, #0]
 8082774:	4b22      	ldr	r3, [pc, #136]	; (8082800 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8082776:	681a      	ldr	r2, [r3, #0]
 8082778:	07d1      	lsls	r1, r2, #31
 808277a:	bf5c      	itt	pl
 808277c:	2201      	movpl	r2, #1
 808277e:	601a      	strpl	r2, [r3, #0]
 8082780:	4b20      	ldr	r3, [pc, #128]	; (8082804 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8082782:	681a      	ldr	r2, [r3, #0]
 8082784:	07d2      	lsls	r2, r2, #31
 8082786:	bf5c      	itt	pl
 8082788:	2201      	movpl	r2, #1
 808278a:	601a      	strpl	r2, [r3, #0]
 808278c:	4b1e      	ldr	r3, [pc, #120]	; (8082808 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 808278e:	681a      	ldr	r2, [r3, #0]
 8082790:	07d0      	lsls	r0, r2, #31
 8082792:	bf5c      	itt	pl
 8082794:	2201      	movpl	r2, #1
 8082796:	601a      	strpl	r2, [r3, #0]
 8082798:	4b1c      	ldr	r3, [pc, #112]	; (808280c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 808279a:	681a      	ldr	r2, [r3, #0]
 808279c:	07d1      	lsls	r1, r2, #31
 808279e:	bf5c      	itt	pl
 80827a0:	2201      	movpl	r2, #1
 80827a2:	601a      	strpl	r2, [r3, #0]
 80827a4:	4b1a      	ldr	r3, [pc, #104]	; (8082810 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80827a6:	681a      	ldr	r2, [r3, #0]
 80827a8:	07d2      	lsls	r2, r2, #31
 80827aa:	bf5c      	itt	pl
 80827ac:	2201      	movpl	r2, #1
 80827ae:	601a      	strpl	r2, [r3, #0]
 80827b0:	4b18      	ldr	r3, [pc, #96]	; (8082814 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80827b2:	681a      	ldr	r2, [r3, #0]
 80827b4:	07d0      	lsls	r0, r2, #31
 80827b6:	bf5c      	itt	pl
 80827b8:	2201      	movpl	r2, #1
 80827ba:	601a      	strpl	r2, [r3, #0]
 80827bc:	4b16      	ldr	r3, [pc, #88]	; (8082818 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80827be:	681a      	ldr	r2, [r3, #0]
 80827c0:	07d1      	lsls	r1, r2, #31
 80827c2:	bf5c      	itt	pl
 80827c4:	2201      	movpl	r2, #1
 80827c6:	601a      	strpl	r2, [r3, #0]
 80827c8:	4b14      	ldr	r3, [pc, #80]	; (808281c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80827ca:	681a      	ldr	r2, [r3, #0]
 80827cc:	07d2      	lsls	r2, r2, #31
 80827ce:	bf5c      	itt	pl
 80827d0:	2201      	movpl	r2, #1
 80827d2:	601a      	strpl	r2, [r3, #0]
 80827d4:	4b12      	ldr	r3, [pc, #72]	; (8082820 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80827d6:	681a      	ldr	r2, [r3, #0]
 80827d8:	07d0      	lsls	r0, r2, #31
 80827da:	bf5c      	itt	pl
 80827dc:	2201      	movpl	r2, #1
 80827de:	601a      	strpl	r2, [r3, #0]
 80827e0:	4b10      	ldr	r3, [pc, #64]	; (8082824 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80827e2:	681a      	ldr	r2, [r3, #0]
 80827e4:	07d1      	lsls	r1, r2, #31
 80827e6:	bf5c      	itt	pl
 80827e8:	2201      	movpl	r2, #1
 80827ea:	601a      	strpl	r2, [r3, #0]
 80827ec:	4b0e      	ldr	r3, [pc, #56]	; (8082828 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80827ee:	681a      	ldr	r2, [r3, #0]
 80827f0:	07d2      	lsls	r2, r2, #31
 80827f2:	bf5c      	itt	pl
 80827f4:	2201      	movpl	r2, #1
 80827f6:	601a      	strpl	r2, [r3, #0]
 80827f8:	4770      	bx	lr
 80827fa:	bf00      	nop
 80827fc:	200007b8 	.word	0x200007b8
 8082800:	200007b4 	.word	0x200007b4
 8082804:	200007b0 	.word	0x200007b0
 8082808:	200007ac 	.word	0x200007ac
 808280c:	200007a8 	.word	0x200007a8
 8082810:	200007a4 	.word	0x200007a4
 8082814:	200007a0 	.word	0x200007a0
 8082818:	2000079c 	.word	0x2000079c
 808281c:	20000798 	.word	0x20000798
 8082820:	20000794 	.word	0x20000794
 8082824:	20000790 	.word	0x20000790
 8082828:	2000078c 	.word	0x2000078c

0808282c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 808282c:	4b24      	ldr	r3, [pc, #144]	; (80828c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 808282e:	681a      	ldr	r2, [r3, #0]
 8082830:	07d0      	lsls	r0, r2, #31
 8082832:	bf5c      	itt	pl
 8082834:	2201      	movpl	r2, #1
 8082836:	601a      	strpl	r2, [r3, #0]
 8082838:	4b22      	ldr	r3, [pc, #136]	; (80828c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 808283a:	681a      	ldr	r2, [r3, #0]
 808283c:	07d1      	lsls	r1, r2, #31
 808283e:	bf5c      	itt	pl
 8082840:	2201      	movpl	r2, #1
 8082842:	601a      	strpl	r2, [r3, #0]
 8082844:	4b20      	ldr	r3, [pc, #128]	; (80828c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8082846:	681a      	ldr	r2, [r3, #0]
 8082848:	07d2      	lsls	r2, r2, #31
 808284a:	bf5c      	itt	pl
 808284c:	2201      	movpl	r2, #1
 808284e:	601a      	strpl	r2, [r3, #0]
 8082850:	4b1e      	ldr	r3, [pc, #120]	; (80828cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8082852:	681a      	ldr	r2, [r3, #0]
 8082854:	07d0      	lsls	r0, r2, #31
 8082856:	bf5c      	itt	pl
 8082858:	2201      	movpl	r2, #1
 808285a:	601a      	strpl	r2, [r3, #0]
 808285c:	4b1c      	ldr	r3, [pc, #112]	; (80828d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 808285e:	681a      	ldr	r2, [r3, #0]
 8082860:	07d1      	lsls	r1, r2, #31
 8082862:	bf5c      	itt	pl
 8082864:	2201      	movpl	r2, #1
 8082866:	601a      	strpl	r2, [r3, #0]
 8082868:	4b1a      	ldr	r3, [pc, #104]	; (80828d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 808286a:	681a      	ldr	r2, [r3, #0]
 808286c:	07d2      	lsls	r2, r2, #31
 808286e:	bf5c      	itt	pl
 8082870:	2201      	movpl	r2, #1
 8082872:	601a      	strpl	r2, [r3, #0]
 8082874:	4b18      	ldr	r3, [pc, #96]	; (80828d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8082876:	681a      	ldr	r2, [r3, #0]
 8082878:	07d0      	lsls	r0, r2, #31
 808287a:	bf5c      	itt	pl
 808287c:	2201      	movpl	r2, #1
 808287e:	601a      	strpl	r2, [r3, #0]
 8082880:	4b16      	ldr	r3, [pc, #88]	; (80828dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8082882:	681a      	ldr	r2, [r3, #0]
 8082884:	07d1      	lsls	r1, r2, #31
 8082886:	bf5c      	itt	pl
 8082888:	2201      	movpl	r2, #1
 808288a:	601a      	strpl	r2, [r3, #0]
 808288c:	4b14      	ldr	r3, [pc, #80]	; (80828e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 808288e:	681a      	ldr	r2, [r3, #0]
 8082890:	07d2      	lsls	r2, r2, #31
 8082892:	bf5c      	itt	pl
 8082894:	2201      	movpl	r2, #1
 8082896:	601a      	strpl	r2, [r3, #0]
 8082898:	4b12      	ldr	r3, [pc, #72]	; (80828e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 808289a:	681a      	ldr	r2, [r3, #0]
 808289c:	07d0      	lsls	r0, r2, #31
 808289e:	bf5c      	itt	pl
 80828a0:	2201      	movpl	r2, #1
 80828a2:	601a      	strpl	r2, [r3, #0]
 80828a4:	4b10      	ldr	r3, [pc, #64]	; (80828e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80828a6:	681a      	ldr	r2, [r3, #0]
 80828a8:	07d1      	lsls	r1, r2, #31
 80828aa:	bf5c      	itt	pl
 80828ac:	2201      	movpl	r2, #1
 80828ae:	601a      	strpl	r2, [r3, #0]
 80828b0:	4b0e      	ldr	r3, [pc, #56]	; (80828ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80828b2:	681a      	ldr	r2, [r3, #0]
 80828b4:	07d2      	lsls	r2, r2, #31
 80828b6:	bf5c      	itt	pl
 80828b8:	2201      	movpl	r2, #1
 80828ba:	601a      	strpl	r2, [r3, #0]
 80828bc:	4770      	bx	lr
 80828be:	bf00      	nop
 80828c0:	200007e8 	.word	0x200007e8
 80828c4:	200007e4 	.word	0x200007e4
 80828c8:	200007e0 	.word	0x200007e0
 80828cc:	200007dc 	.word	0x200007dc
 80828d0:	200007d8 	.word	0x200007d8
 80828d4:	200007d4 	.word	0x200007d4
 80828d8:	200007d0 	.word	0x200007d0
 80828dc:	200007cc 	.word	0x200007cc
 80828e0:	200007c8 	.word	0x200007c8
 80828e4:	200007c4 	.word	0x200007c4
 80828e8:	200007c0 	.word	0x200007c0
 80828ec:	200007bc 	.word	0x200007bc

080828f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80828f0:	4b18      	ldr	r3, [pc, #96]	; (8082954 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80828f2:	681a      	ldr	r2, [r3, #0]
 80828f4:	07d1      	lsls	r1, r2, #31
 80828f6:	bf5c      	itt	pl
 80828f8:	2201      	movpl	r2, #1
 80828fa:	601a      	strpl	r2, [r3, #0]
 80828fc:	4b16      	ldr	r3, [pc, #88]	; (8082958 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80828fe:	681a      	ldr	r2, [r3, #0]
 8082900:	07d2      	lsls	r2, r2, #31
 8082902:	bf5c      	itt	pl
 8082904:	2201      	movpl	r2, #1
 8082906:	601a      	strpl	r2, [r3, #0]
 8082908:	4b14      	ldr	r3, [pc, #80]	; (808295c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 808290a:	681a      	ldr	r2, [r3, #0]
 808290c:	07d0      	lsls	r0, r2, #31
 808290e:	bf5c      	itt	pl
 8082910:	2201      	movpl	r2, #1
 8082912:	601a      	strpl	r2, [r3, #0]
 8082914:	4b12      	ldr	r3, [pc, #72]	; (8082960 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8082916:	681a      	ldr	r2, [r3, #0]
 8082918:	07d1      	lsls	r1, r2, #31
 808291a:	bf5c      	itt	pl
 808291c:	2201      	movpl	r2, #1
 808291e:	601a      	strpl	r2, [r3, #0]
 8082920:	4b10      	ldr	r3, [pc, #64]	; (8082964 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8082922:	681a      	ldr	r2, [r3, #0]
 8082924:	07d2      	lsls	r2, r2, #31
 8082926:	bf5c      	itt	pl
 8082928:	2201      	movpl	r2, #1
 808292a:	601a      	strpl	r2, [r3, #0]
 808292c:	4b0e      	ldr	r3, [pc, #56]	; (8082968 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 808292e:	681a      	ldr	r2, [r3, #0]
 8082930:	07d0      	lsls	r0, r2, #31
 8082932:	bf5c      	itt	pl
 8082934:	2201      	movpl	r2, #1
 8082936:	601a      	strpl	r2, [r3, #0]
 8082938:	4b0c      	ldr	r3, [pc, #48]	; (808296c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 808293a:	681a      	ldr	r2, [r3, #0]
 808293c:	07d1      	lsls	r1, r2, #31
 808293e:	bf5c      	itt	pl
 8082940:	2201      	movpl	r2, #1
 8082942:	601a      	strpl	r2, [r3, #0]
 8082944:	4b0a      	ldr	r3, [pc, #40]	; (8082970 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8082946:	681a      	ldr	r2, [r3, #0]
 8082948:	07d2      	lsls	r2, r2, #31
 808294a:	bf5c      	itt	pl
 808294c:	2201      	movpl	r2, #1
 808294e:	601a      	strpl	r2, [r3, #0]
 8082950:	4770      	bx	lr
 8082952:	bf00      	nop
 8082954:	20000808 	.word	0x20000808
 8082958:	20000804 	.word	0x20000804
 808295c:	20000800 	.word	0x20000800
 8082960:	200007fc 	.word	0x200007fc
 8082964:	200007f8 	.word	0x200007f8
 8082968:	200007f4 	.word	0x200007f4
 808296c:	200007f0 	.word	0x200007f0
 8082970:	200007ec 	.word	0x200007ec

08082974 <sqrt>:
 8082974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8082978:	b08b      	sub	sp, #44	; 0x2c
 808297a:	4604      	mov	r4, r0
 808297c:	460d      	mov	r5, r1
 808297e:	f000 f855 	bl	8082a2c <__ieee754_sqrt>
 8082982:	4b28      	ldr	r3, [pc, #160]	; (8082a24 <sqrt+0xb0>)
 8082984:	4606      	mov	r6, r0
 8082986:	f993 a000 	ldrsb.w	sl, [r3]
 808298a:	460f      	mov	r7, r1
 808298c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8082990:	d012      	beq.n	80829b8 <sqrt+0x44>
 8082992:	4622      	mov	r2, r4
 8082994:	462b      	mov	r3, r5
 8082996:	4620      	mov	r0, r4
 8082998:	4629      	mov	r1, r5
 808299a:	f000 fd5f 	bl	808345c <__aeabi_dcmpun>
 808299e:	4683      	mov	fp, r0
 80829a0:	b950      	cbnz	r0, 80829b8 <sqrt+0x44>
 80829a2:	f04f 0800 	mov.w	r8, #0
 80829a6:	f04f 0900 	mov.w	r9, #0
 80829aa:	4620      	mov	r0, r4
 80829ac:	4629      	mov	r1, r5
 80829ae:	4642      	mov	r2, r8
 80829b0:	464b      	mov	r3, r9
 80829b2:	f000 fd2b 	bl	808340c <__aeabi_dcmplt>
 80829b6:	b920      	cbnz	r0, 80829c2 <sqrt+0x4e>
 80829b8:	4630      	mov	r0, r6
 80829ba:	4639      	mov	r1, r7
 80829bc:	b00b      	add	sp, #44	; 0x2c
 80829be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80829c2:	4a19      	ldr	r2, [pc, #100]	; (8082a28 <sqrt+0xb4>)
 80829c4:	2301      	movs	r3, #1
 80829c6:	f8cd b020 	str.w	fp, [sp, #32]
 80829ca:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80829ce:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80829d2:	9201      	str	r2, [sp, #4]
 80829d4:	9300      	str	r3, [sp, #0]
 80829d6:	f1ba 0f00 	cmp.w	sl, #0
 80829da:	d015      	beq.n	8082a08 <sqrt+0x94>
 80829dc:	4642      	mov	r2, r8
 80829de:	464b      	mov	r3, r9
 80829e0:	4640      	mov	r0, r8
 80829e2:	4649      	mov	r1, r9
 80829e4:	f000 fbca 	bl	808317c <__aeabi_ddiv>
 80829e8:	f1ba 0f02 	cmp.w	sl, #2
 80829ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80829f0:	d10c      	bne.n	8082a0c <sqrt+0x98>
 80829f2:	f7fe fb4d 	bl	8081090 <__errno>
 80829f6:	2321      	movs	r3, #33	; 0x21
 80829f8:	6003      	str	r3, [r0, #0]
 80829fa:	9b08      	ldr	r3, [sp, #32]
 80829fc:	b963      	cbnz	r3, 8082a18 <sqrt+0xa4>
 80829fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8082a02:	b00b      	add	sp, #44	; 0x2c
 8082a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082a08:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8082a0c:	4668      	mov	r0, sp
 8082a0e:	f000 f8d1 	bl	8082bb4 <matherr>
 8082a12:	2800      	cmp	r0, #0
 8082a14:	d1f1      	bne.n	80829fa <sqrt+0x86>
 8082a16:	e7ec      	b.n	80829f2 <sqrt+0x7e>
 8082a18:	f7fe fb3a 	bl	8081090 <__errno>
 8082a1c:	9b08      	ldr	r3, [sp, #32]
 8082a1e:	6003      	str	r3, [r0, #0]
 8082a20:	e7ed      	b.n	80829fe <sqrt+0x8a>
 8082a22:	bf00      	nop
 8082a24:	2000000c 	.word	0x2000000c
 8082a28:	08085e84 	.word	0x08085e84

08082a2c <__ieee754_sqrt>:
 8082a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8082a30:	4e5f      	ldr	r6, [pc, #380]	; (8082bb0 <__ieee754_sqrt+0x184>)
 8082a32:	460c      	mov	r4, r1
 8082a34:	46b6      	mov	lr, r6
 8082a36:	400e      	ands	r6, r1
 8082a38:	4576      	cmp	r6, lr
 8082a3a:	4605      	mov	r5, r0
 8082a3c:	f000 8098 	beq.w	8082b70 <__ieee754_sqrt+0x144>
 8082a40:	2900      	cmp	r1, #0
 8082a42:	460b      	mov	r3, r1
 8082a44:	4602      	mov	r2, r0
 8082a46:	dd74      	ble.n	8082b32 <__ieee754_sqrt+0x106>
 8082a48:	ea5f 5e21 	movs.w	lr, r1, asr #20
 8082a4c:	d07f      	beq.n	8082b4e <__ieee754_sqrt+0x122>
 8082a4e:	f2ae 3eff 	subw	lr, lr, #1023	; 0x3ff
 8082a52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8082a56:	f01e 0f01 	tst.w	lr, #1
 8082a5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8082a5e:	d163      	bne.n	8082b28 <__ieee754_sqrt+0xfc>
 8082a60:	2700      	movs	r7, #0
 8082a62:	463e      	mov	r6, r7
 8082a64:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 8082a68:	440b      	add	r3, r1
 8082a6a:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 8082a6e:	0052      	lsls	r2, r2, #1
 8082a70:	2016      	movs	r0, #22
 8082a72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8082a76:	1874      	adds	r4, r6, r1
 8082a78:	429c      	cmp	r4, r3
 8082a7a:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 8082a7e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8082a82:	dc02      	bgt.n	8082a8a <__ieee754_sqrt+0x5e>
 8082a84:	1b1b      	subs	r3, r3, r4
 8082a86:	1866      	adds	r6, r4, r1
 8082a88:	440f      	add	r7, r1
 8082a8a:	3801      	subs	r0, #1
 8082a8c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8082a90:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8082a94:	d1ef      	bne.n	8082a76 <__ieee754_sqrt+0x4a>
 8082a96:	4684      	mov	ip, r0
 8082a98:	2420      	movs	r4, #32
 8082a9a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8082a9e:	e009      	b.n	8082ab4 <__ieee754_sqrt+0x88>
 8082aa0:	d020      	beq.n	8082ae4 <__ieee754_sqrt+0xb8>
 8082aa2:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
 8082aa6:	3c01      	subs	r4, #1
 8082aa8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8082aac:	442b      	add	r3, r5
 8082aae:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8082ab2:	d020      	beq.n	8082af6 <__ieee754_sqrt+0xca>
 8082ab4:	429e      	cmp	r6, r3
 8082ab6:	eb01 050c 	add.w	r5, r1, ip
 8082aba:	daf1      	bge.n	8082aa0 <__ieee754_sqrt+0x74>
 8082abc:	2d00      	cmp	r5, #0
 8082abe:	eb05 0c01 	add.w	ip, r5, r1
 8082ac2:	db09      	blt.n	8082ad8 <__ieee754_sqrt+0xac>
 8082ac4:	46b0      	mov	r8, r6
 8082ac6:	4295      	cmp	r5, r2
 8082ac8:	eba3 0306 	sub.w	r3, r3, r6
 8082acc:	d900      	bls.n	8082ad0 <__ieee754_sqrt+0xa4>
 8082ace:	3b01      	subs	r3, #1
 8082ad0:	4646      	mov	r6, r8
 8082ad2:	1b52      	subs	r2, r2, r5
 8082ad4:	4408      	add	r0, r1
 8082ad6:	e7e4      	b.n	8082aa2 <__ieee754_sqrt+0x76>
 8082ad8:	f1bc 0f00 	cmp.w	ip, #0
 8082adc:	dbf2      	blt.n	8082ac4 <__ieee754_sqrt+0x98>
 8082ade:	f106 0801 	add.w	r8, r6, #1
 8082ae2:	e7f0      	b.n	8082ac6 <__ieee754_sqrt+0x9a>
 8082ae4:	4295      	cmp	r5, r2
 8082ae6:	d817      	bhi.n	8082b18 <__ieee754_sqrt+0xec>
 8082ae8:	2d00      	cmp	r5, #0
 8082aea:	eb05 0c01 	add.w	ip, r5, r1
 8082aee:	db49      	blt.n	8082b84 <__ieee754_sqrt+0x158>
 8082af0:	4698      	mov	r8, r3
 8082af2:	2300      	movs	r3, #0
 8082af4:	e7ec      	b.n	8082ad0 <__ieee754_sqrt+0xa4>
 8082af6:	4313      	orrs	r3, r2
 8082af8:	d110      	bne.n	8082b1c <__ieee754_sqrt+0xf0>
 8082afa:	0840      	lsrs	r0, r0, #1
 8082afc:	107b      	asrs	r3, r7, #1
 8082afe:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8082b02:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8082b06:	07fa      	lsls	r2, r7, #31
 8082b08:	eb03 570e 	add.w	r7, r3, lr, lsl #20
 8082b0c:	4639      	mov	r1, r7
 8082b0e:	bf48      	it	mi
 8082b10:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 8082b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8082b18:	4633      	mov	r3, r6
 8082b1a:	e7c2      	b.n	8082aa2 <__ieee754_sqrt+0x76>
 8082b1c:	1c41      	adds	r1, r0, #1
 8082b1e:	d035      	beq.n	8082b8c <__ieee754_sqrt+0x160>
 8082b20:	f000 0301 	and.w	r3, r0, #1
 8082b24:	4418      	add	r0, r3
 8082b26:	e7e8      	b.n	8082afa <__ieee754_sqrt+0xce>
 8082b28:	005b      	lsls	r3, r3, #1
 8082b2a:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8082b2e:	0052      	lsls	r2, r2, #1
 8082b30:	e796      	b.n	8082a60 <__ieee754_sqrt+0x34>
 8082b32:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8082b36:	4306      	orrs	r6, r0
 8082b38:	d0ec      	beq.n	8082b14 <__ieee754_sqrt+0xe8>
 8082b3a:	bb79      	cbnz	r1, 8082b9c <__ieee754_sqrt+0x170>
 8082b3c:	468e      	mov	lr, r1
 8082b3e:	0ad3      	lsrs	r3, r2, #11
 8082b40:	f1ae 0e15 	sub.w	lr, lr, #21
 8082b44:	0552      	lsls	r2, r2, #21
 8082b46:	2b00      	cmp	r3, #0
 8082b48:	d0f9      	beq.n	8082b3e <__ieee754_sqrt+0x112>
 8082b4a:	02dd      	lsls	r5, r3, #11
 8082b4c:	d421      	bmi.n	8082b92 <__ieee754_sqrt+0x166>
 8082b4e:	2100      	movs	r1, #0
 8082b50:	e000      	b.n	8082b54 <__ieee754_sqrt+0x128>
 8082b52:	4601      	mov	r1, r0
 8082b54:	005b      	lsls	r3, r3, #1
 8082b56:	02dc      	lsls	r4, r3, #11
 8082b58:	f101 0001 	add.w	r0, r1, #1
 8082b5c:	d5f9      	bpl.n	8082b52 <__ieee754_sqrt+0x126>
 8082b5e:	f1c0 0420 	rsb	r4, r0, #32
 8082b62:	fa22 f404 	lsr.w	r4, r2, r4
 8082b66:	4323      	orrs	r3, r4
 8082b68:	ebc1 0e0e 	rsb	lr, r1, lr
 8082b6c:	4082      	lsls	r2, r0
 8082b6e:	e76e      	b.n	8082a4e <__ieee754_sqrt+0x22>
 8082b70:	4602      	mov	r2, r0
 8082b72:	460b      	mov	r3, r1
 8082b74:	f000 f9d8 	bl	8082f28 <__aeabi_dmul>
 8082b78:	462a      	mov	r2, r5
 8082b7a:	4623      	mov	r3, r4
 8082b7c:	f000 f822 	bl	8082bc4 <__adddf3>
 8082b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8082b84:	f1bc 0f00 	cmp.w	ip, #0
 8082b88:	daa9      	bge.n	8082ade <__ieee754_sqrt+0xb2>
 8082b8a:	e7b1      	b.n	8082af0 <__ieee754_sqrt+0xc4>
 8082b8c:	3701      	adds	r7, #1
 8082b8e:	4620      	mov	r0, r4
 8082b90:	e7b4      	b.n	8082afc <__ieee754_sqrt+0xd0>
 8082b92:	2420      	movs	r4, #32
 8082b94:	f04f 31ff 	mov.w	r1, #4294967295
 8082b98:	2000      	movs	r0, #0
 8082b9a:	e7e2      	b.n	8082b62 <__ieee754_sqrt+0x136>
 8082b9c:	4602      	mov	r2, r0
 8082b9e:	460b      	mov	r3, r1
 8082ba0:	f000 f80e 	bl	8082bc0 <__aeabi_dsub>
 8082ba4:	4602      	mov	r2, r0
 8082ba6:	460b      	mov	r3, r1
 8082ba8:	f000 fae8 	bl	808317c <__aeabi_ddiv>
 8082bac:	e7b2      	b.n	8082b14 <__ieee754_sqrt+0xe8>
 8082bae:	bf00      	nop
 8082bb0:	7ff00000 	.word	0x7ff00000

08082bb4 <matherr>:
 8082bb4:	2000      	movs	r0, #0
 8082bb6:	4770      	bx	lr

08082bb8 <__aeabi_drsub>:
 8082bb8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8082bbc:	e002      	b.n	8082bc4 <__adddf3>
 8082bbe:	bf00      	nop

08082bc0 <__aeabi_dsub>:
 8082bc0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08082bc4 <__adddf3>:
 8082bc4:	b530      	push	{r4, r5, lr}
 8082bc6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8082bca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8082bce:	ea94 0f05 	teq	r4, r5
 8082bd2:	bf08      	it	eq
 8082bd4:	ea90 0f02 	teqeq	r0, r2
 8082bd8:	bf1f      	itttt	ne
 8082bda:	ea54 0c00 	orrsne.w	ip, r4, r0
 8082bde:	ea55 0c02 	orrsne.w	ip, r5, r2
 8082be2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8082be6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8082bea:	f000 80e2 	beq.w	8082db2 <__adddf3+0x1ee>
 8082bee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8082bf2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8082bf6:	bfb8      	it	lt
 8082bf8:	426d      	neglt	r5, r5
 8082bfa:	dd0c      	ble.n	8082c16 <__adddf3+0x52>
 8082bfc:	442c      	add	r4, r5
 8082bfe:	ea80 0202 	eor.w	r2, r0, r2
 8082c02:	ea81 0303 	eor.w	r3, r1, r3
 8082c06:	ea82 0000 	eor.w	r0, r2, r0
 8082c0a:	ea83 0101 	eor.w	r1, r3, r1
 8082c0e:	ea80 0202 	eor.w	r2, r0, r2
 8082c12:	ea81 0303 	eor.w	r3, r1, r3
 8082c16:	2d36      	cmp	r5, #54	; 0x36
 8082c18:	bf88      	it	hi
 8082c1a:	bd30      	pophi	{r4, r5, pc}
 8082c1c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8082c20:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8082c24:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8082c28:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8082c2c:	d002      	beq.n	8082c34 <__adddf3+0x70>
 8082c2e:	4240      	negs	r0, r0
 8082c30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8082c34:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8082c38:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8082c3c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8082c40:	d002      	beq.n	8082c48 <__adddf3+0x84>
 8082c42:	4252      	negs	r2, r2
 8082c44:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8082c48:	ea94 0f05 	teq	r4, r5
 8082c4c:	f000 80a7 	beq.w	8082d9e <__adddf3+0x1da>
 8082c50:	f1a4 0401 	sub.w	r4, r4, #1
 8082c54:	f1d5 0e20 	rsbs	lr, r5, #32
 8082c58:	db0d      	blt.n	8082c76 <__adddf3+0xb2>
 8082c5a:	fa02 fc0e 	lsl.w	ip, r2, lr
 8082c5e:	fa22 f205 	lsr.w	r2, r2, r5
 8082c62:	1880      	adds	r0, r0, r2
 8082c64:	f141 0100 	adc.w	r1, r1, #0
 8082c68:	fa03 f20e 	lsl.w	r2, r3, lr
 8082c6c:	1880      	adds	r0, r0, r2
 8082c6e:	fa43 f305 	asr.w	r3, r3, r5
 8082c72:	4159      	adcs	r1, r3
 8082c74:	e00e      	b.n	8082c94 <__adddf3+0xd0>
 8082c76:	f1a5 0520 	sub.w	r5, r5, #32
 8082c7a:	f10e 0e20 	add.w	lr, lr, #32
 8082c7e:	2a01      	cmp	r2, #1
 8082c80:	fa03 fc0e 	lsl.w	ip, r3, lr
 8082c84:	bf28      	it	cs
 8082c86:	f04c 0c02 	orrcs.w	ip, ip, #2
 8082c8a:	fa43 f305 	asr.w	r3, r3, r5
 8082c8e:	18c0      	adds	r0, r0, r3
 8082c90:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8082c94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8082c98:	d507      	bpl.n	8082caa <__adddf3+0xe6>
 8082c9a:	f04f 0e00 	mov.w	lr, #0
 8082c9e:	f1dc 0c00 	rsbs	ip, ip, #0
 8082ca2:	eb7e 0000 	sbcs.w	r0, lr, r0
 8082ca6:	eb6e 0101 	sbc.w	r1, lr, r1
 8082caa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8082cae:	d31b      	bcc.n	8082ce8 <__adddf3+0x124>
 8082cb0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8082cb4:	d30c      	bcc.n	8082cd0 <__adddf3+0x10c>
 8082cb6:	0849      	lsrs	r1, r1, #1
 8082cb8:	ea5f 0030 	movs.w	r0, r0, rrx
 8082cbc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8082cc0:	f104 0401 	add.w	r4, r4, #1
 8082cc4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8082cc8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8082ccc:	f080 809a 	bcs.w	8082e04 <__adddf3+0x240>
 8082cd0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8082cd4:	bf08      	it	eq
 8082cd6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8082cda:	f150 0000 	adcs.w	r0, r0, #0
 8082cde:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8082ce2:	ea41 0105 	orr.w	r1, r1, r5
 8082ce6:	bd30      	pop	{r4, r5, pc}
 8082ce8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8082cec:	4140      	adcs	r0, r0
 8082cee:	eb41 0101 	adc.w	r1, r1, r1
 8082cf2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8082cf6:	f1a4 0401 	sub.w	r4, r4, #1
 8082cfa:	d1e9      	bne.n	8082cd0 <__adddf3+0x10c>
 8082cfc:	f091 0f00 	teq	r1, #0
 8082d00:	bf04      	itt	eq
 8082d02:	4601      	moveq	r1, r0
 8082d04:	2000      	moveq	r0, #0
 8082d06:	fab1 f381 	clz	r3, r1
 8082d0a:	bf08      	it	eq
 8082d0c:	3320      	addeq	r3, #32
 8082d0e:	f1a3 030b 	sub.w	r3, r3, #11
 8082d12:	f1b3 0220 	subs.w	r2, r3, #32
 8082d16:	da0c      	bge.n	8082d32 <__adddf3+0x16e>
 8082d18:	320c      	adds	r2, #12
 8082d1a:	dd08      	ble.n	8082d2e <__adddf3+0x16a>
 8082d1c:	f102 0c14 	add.w	ip, r2, #20
 8082d20:	f1c2 020c 	rsb	r2, r2, #12
 8082d24:	fa01 f00c 	lsl.w	r0, r1, ip
 8082d28:	fa21 f102 	lsr.w	r1, r1, r2
 8082d2c:	e00c      	b.n	8082d48 <__adddf3+0x184>
 8082d2e:	f102 0214 	add.w	r2, r2, #20
 8082d32:	bfd8      	it	le
 8082d34:	f1c2 0c20 	rsble	ip, r2, #32
 8082d38:	fa01 f102 	lsl.w	r1, r1, r2
 8082d3c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8082d40:	bfdc      	itt	le
 8082d42:	ea41 010c 	orrle.w	r1, r1, ip
 8082d46:	4090      	lslle	r0, r2
 8082d48:	1ae4      	subs	r4, r4, r3
 8082d4a:	bfa2      	ittt	ge
 8082d4c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8082d50:	4329      	orrge	r1, r5
 8082d52:	bd30      	popge	{r4, r5, pc}
 8082d54:	ea6f 0404 	mvn.w	r4, r4
 8082d58:	3c1f      	subs	r4, #31
 8082d5a:	da1c      	bge.n	8082d96 <__adddf3+0x1d2>
 8082d5c:	340c      	adds	r4, #12
 8082d5e:	dc0e      	bgt.n	8082d7e <__adddf3+0x1ba>
 8082d60:	f104 0414 	add.w	r4, r4, #20
 8082d64:	f1c4 0220 	rsb	r2, r4, #32
 8082d68:	fa20 f004 	lsr.w	r0, r0, r4
 8082d6c:	fa01 f302 	lsl.w	r3, r1, r2
 8082d70:	ea40 0003 	orr.w	r0, r0, r3
 8082d74:	fa21 f304 	lsr.w	r3, r1, r4
 8082d78:	ea45 0103 	orr.w	r1, r5, r3
 8082d7c:	bd30      	pop	{r4, r5, pc}
 8082d7e:	f1c4 040c 	rsb	r4, r4, #12
 8082d82:	f1c4 0220 	rsb	r2, r4, #32
 8082d86:	fa20 f002 	lsr.w	r0, r0, r2
 8082d8a:	fa01 f304 	lsl.w	r3, r1, r4
 8082d8e:	ea40 0003 	orr.w	r0, r0, r3
 8082d92:	4629      	mov	r1, r5
 8082d94:	bd30      	pop	{r4, r5, pc}
 8082d96:	fa21 f004 	lsr.w	r0, r1, r4
 8082d9a:	4629      	mov	r1, r5
 8082d9c:	bd30      	pop	{r4, r5, pc}
 8082d9e:	f094 0f00 	teq	r4, #0
 8082da2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8082da6:	bf06      	itte	eq
 8082da8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8082dac:	3401      	addeq	r4, #1
 8082dae:	3d01      	subne	r5, #1
 8082db0:	e74e      	b.n	8082c50 <__adddf3+0x8c>
 8082db2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8082db6:	bf18      	it	ne
 8082db8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8082dbc:	d029      	beq.n	8082e12 <__adddf3+0x24e>
 8082dbe:	ea94 0f05 	teq	r4, r5
 8082dc2:	bf08      	it	eq
 8082dc4:	ea90 0f02 	teqeq	r0, r2
 8082dc8:	d005      	beq.n	8082dd6 <__adddf3+0x212>
 8082dca:	ea54 0c00 	orrs.w	ip, r4, r0
 8082dce:	bf04      	itt	eq
 8082dd0:	4619      	moveq	r1, r3
 8082dd2:	4610      	moveq	r0, r2
 8082dd4:	bd30      	pop	{r4, r5, pc}
 8082dd6:	ea91 0f03 	teq	r1, r3
 8082dda:	bf1e      	ittt	ne
 8082ddc:	2100      	movne	r1, #0
 8082dde:	2000      	movne	r0, #0
 8082de0:	bd30      	popne	{r4, r5, pc}
 8082de2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8082de6:	d105      	bne.n	8082df4 <__adddf3+0x230>
 8082de8:	0040      	lsls	r0, r0, #1
 8082dea:	4149      	adcs	r1, r1
 8082dec:	bf28      	it	cs
 8082dee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8082df2:	bd30      	pop	{r4, r5, pc}
 8082df4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8082df8:	bf3c      	itt	cc
 8082dfa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8082dfe:	bd30      	popcc	{r4, r5, pc}
 8082e00:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8082e04:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8082e08:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8082e0c:	f04f 0000 	mov.w	r0, #0
 8082e10:	bd30      	pop	{r4, r5, pc}
 8082e12:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8082e16:	bf1a      	itte	ne
 8082e18:	4619      	movne	r1, r3
 8082e1a:	4610      	movne	r0, r2
 8082e1c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8082e20:	bf1c      	itt	ne
 8082e22:	460b      	movne	r3, r1
 8082e24:	4602      	movne	r2, r0
 8082e26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8082e2a:	bf06      	itte	eq
 8082e2c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8082e30:	ea91 0f03 	teqeq	r1, r3
 8082e34:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8082e38:	bd30      	pop	{r4, r5, pc}
 8082e3a:	bf00      	nop

08082e3c <__aeabi_ui2d>:
 8082e3c:	f090 0f00 	teq	r0, #0
 8082e40:	bf04      	itt	eq
 8082e42:	2100      	moveq	r1, #0
 8082e44:	4770      	bxeq	lr
 8082e46:	b530      	push	{r4, r5, lr}
 8082e48:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8082e4c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8082e50:	f04f 0500 	mov.w	r5, #0
 8082e54:	f04f 0100 	mov.w	r1, #0
 8082e58:	e750      	b.n	8082cfc <__adddf3+0x138>
 8082e5a:	bf00      	nop

08082e5c <__aeabi_i2d>:
 8082e5c:	f090 0f00 	teq	r0, #0
 8082e60:	bf04      	itt	eq
 8082e62:	2100      	moveq	r1, #0
 8082e64:	4770      	bxeq	lr
 8082e66:	b530      	push	{r4, r5, lr}
 8082e68:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8082e6c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8082e70:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8082e74:	bf48      	it	mi
 8082e76:	4240      	negmi	r0, r0
 8082e78:	f04f 0100 	mov.w	r1, #0
 8082e7c:	e73e      	b.n	8082cfc <__adddf3+0x138>
 8082e7e:	bf00      	nop

08082e80 <__aeabi_f2d>:
 8082e80:	0042      	lsls	r2, r0, #1
 8082e82:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8082e86:	ea4f 0131 	mov.w	r1, r1, rrx
 8082e8a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8082e8e:	bf1f      	itttt	ne
 8082e90:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8082e94:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8082e98:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8082e9c:	4770      	bxne	lr
 8082e9e:	f092 0f00 	teq	r2, #0
 8082ea2:	bf14      	ite	ne
 8082ea4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8082ea8:	4770      	bxeq	lr
 8082eaa:	b530      	push	{r4, r5, lr}
 8082eac:	f44f 7460 	mov.w	r4, #896	; 0x380
 8082eb0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8082eb4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8082eb8:	e720      	b.n	8082cfc <__adddf3+0x138>
 8082eba:	bf00      	nop

08082ebc <__aeabi_ul2d>:
 8082ebc:	ea50 0201 	orrs.w	r2, r0, r1
 8082ec0:	bf08      	it	eq
 8082ec2:	4770      	bxeq	lr
 8082ec4:	b530      	push	{r4, r5, lr}
 8082ec6:	f04f 0500 	mov.w	r5, #0
 8082eca:	e00a      	b.n	8082ee2 <__aeabi_l2d+0x16>

08082ecc <__aeabi_l2d>:
 8082ecc:	ea50 0201 	orrs.w	r2, r0, r1
 8082ed0:	bf08      	it	eq
 8082ed2:	4770      	bxeq	lr
 8082ed4:	b530      	push	{r4, r5, lr}
 8082ed6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8082eda:	d502      	bpl.n	8082ee2 <__aeabi_l2d+0x16>
 8082edc:	4240      	negs	r0, r0
 8082ede:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8082ee2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8082ee6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8082eea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8082eee:	f43f aedc 	beq.w	8082caa <__adddf3+0xe6>
 8082ef2:	f04f 0203 	mov.w	r2, #3
 8082ef6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8082efa:	bf18      	it	ne
 8082efc:	3203      	addne	r2, #3
 8082efe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8082f02:	bf18      	it	ne
 8082f04:	3203      	addne	r2, #3
 8082f06:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8082f0a:	f1c2 0320 	rsb	r3, r2, #32
 8082f0e:	fa00 fc03 	lsl.w	ip, r0, r3
 8082f12:	fa20 f002 	lsr.w	r0, r0, r2
 8082f16:	fa01 fe03 	lsl.w	lr, r1, r3
 8082f1a:	ea40 000e 	orr.w	r0, r0, lr
 8082f1e:	fa21 f102 	lsr.w	r1, r1, r2
 8082f22:	4414      	add	r4, r2
 8082f24:	e6c1      	b.n	8082caa <__adddf3+0xe6>
 8082f26:	bf00      	nop

08082f28 <__aeabi_dmul>:
 8082f28:	b570      	push	{r4, r5, r6, lr}
 8082f2a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8082f2e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8082f32:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8082f36:	bf1d      	ittte	ne
 8082f38:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8082f3c:	ea94 0f0c 	teqne	r4, ip
 8082f40:	ea95 0f0c 	teqne	r5, ip
 8082f44:	f000 f8de 	bleq	8083104 <__aeabi_dmul+0x1dc>
 8082f48:	442c      	add	r4, r5
 8082f4a:	ea81 0603 	eor.w	r6, r1, r3
 8082f4e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8082f52:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8082f56:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8082f5a:	bf18      	it	ne
 8082f5c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8082f60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8082f64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8082f68:	d038      	beq.n	8082fdc <__aeabi_dmul+0xb4>
 8082f6a:	fba0 ce02 	umull	ip, lr, r0, r2
 8082f6e:	f04f 0500 	mov.w	r5, #0
 8082f72:	fbe1 e502 	umlal	lr, r5, r1, r2
 8082f76:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8082f7a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8082f7e:	f04f 0600 	mov.w	r6, #0
 8082f82:	fbe1 5603 	umlal	r5, r6, r1, r3
 8082f86:	f09c 0f00 	teq	ip, #0
 8082f8a:	bf18      	it	ne
 8082f8c:	f04e 0e01 	orrne.w	lr, lr, #1
 8082f90:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8082f94:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8082f98:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8082f9c:	d204      	bcs.n	8082fa8 <__aeabi_dmul+0x80>
 8082f9e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8082fa2:	416d      	adcs	r5, r5
 8082fa4:	eb46 0606 	adc.w	r6, r6, r6
 8082fa8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8082fac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8082fb0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8082fb4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8082fb8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8082fbc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8082fc0:	bf88      	it	hi
 8082fc2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8082fc6:	d81e      	bhi.n	8083006 <__aeabi_dmul+0xde>
 8082fc8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8082fcc:	bf08      	it	eq
 8082fce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8082fd2:	f150 0000 	adcs.w	r0, r0, #0
 8082fd6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8082fda:	bd70      	pop	{r4, r5, r6, pc}
 8082fdc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8082fe0:	ea46 0101 	orr.w	r1, r6, r1
 8082fe4:	ea40 0002 	orr.w	r0, r0, r2
 8082fe8:	ea81 0103 	eor.w	r1, r1, r3
 8082fec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8082ff0:	bfc2      	ittt	gt
 8082ff2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8082ff6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8082ffa:	bd70      	popgt	{r4, r5, r6, pc}
 8082ffc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083000:	f04f 0e00 	mov.w	lr, #0
 8083004:	3c01      	subs	r4, #1
 8083006:	f300 80ab 	bgt.w	8083160 <__aeabi_dmul+0x238>
 808300a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 808300e:	bfde      	ittt	le
 8083010:	2000      	movle	r0, #0
 8083012:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8083016:	bd70      	pople	{r4, r5, r6, pc}
 8083018:	f1c4 0400 	rsb	r4, r4, #0
 808301c:	3c20      	subs	r4, #32
 808301e:	da35      	bge.n	808308c <__aeabi_dmul+0x164>
 8083020:	340c      	adds	r4, #12
 8083022:	dc1b      	bgt.n	808305c <__aeabi_dmul+0x134>
 8083024:	f104 0414 	add.w	r4, r4, #20
 8083028:	f1c4 0520 	rsb	r5, r4, #32
 808302c:	fa00 f305 	lsl.w	r3, r0, r5
 8083030:	fa20 f004 	lsr.w	r0, r0, r4
 8083034:	fa01 f205 	lsl.w	r2, r1, r5
 8083038:	ea40 0002 	orr.w	r0, r0, r2
 808303c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8083040:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8083044:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8083048:	fa21 f604 	lsr.w	r6, r1, r4
 808304c:	eb42 0106 	adc.w	r1, r2, r6
 8083050:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083054:	bf08      	it	eq
 8083056:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808305a:	bd70      	pop	{r4, r5, r6, pc}
 808305c:	f1c4 040c 	rsb	r4, r4, #12
 8083060:	f1c4 0520 	rsb	r5, r4, #32
 8083064:	fa00 f304 	lsl.w	r3, r0, r4
 8083068:	fa20 f005 	lsr.w	r0, r0, r5
 808306c:	fa01 f204 	lsl.w	r2, r1, r4
 8083070:	ea40 0002 	orr.w	r0, r0, r2
 8083074:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083078:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808307c:	f141 0100 	adc.w	r1, r1, #0
 8083080:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083084:	bf08      	it	eq
 8083086:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808308a:	bd70      	pop	{r4, r5, r6, pc}
 808308c:	f1c4 0520 	rsb	r5, r4, #32
 8083090:	fa00 f205 	lsl.w	r2, r0, r5
 8083094:	ea4e 0e02 	orr.w	lr, lr, r2
 8083098:	fa20 f304 	lsr.w	r3, r0, r4
 808309c:	fa01 f205 	lsl.w	r2, r1, r5
 80830a0:	ea43 0302 	orr.w	r3, r3, r2
 80830a4:	fa21 f004 	lsr.w	r0, r1, r4
 80830a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80830ac:	fa21 f204 	lsr.w	r2, r1, r4
 80830b0:	ea20 0002 	bic.w	r0, r0, r2
 80830b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80830b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80830bc:	bf08      	it	eq
 80830be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80830c2:	bd70      	pop	{r4, r5, r6, pc}
 80830c4:	f094 0f00 	teq	r4, #0
 80830c8:	d10f      	bne.n	80830ea <__aeabi_dmul+0x1c2>
 80830ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80830ce:	0040      	lsls	r0, r0, #1
 80830d0:	eb41 0101 	adc.w	r1, r1, r1
 80830d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80830d8:	bf08      	it	eq
 80830da:	3c01      	subeq	r4, #1
 80830dc:	d0f7      	beq.n	80830ce <__aeabi_dmul+0x1a6>
 80830de:	ea41 0106 	orr.w	r1, r1, r6
 80830e2:	f095 0f00 	teq	r5, #0
 80830e6:	bf18      	it	ne
 80830e8:	4770      	bxne	lr
 80830ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80830ee:	0052      	lsls	r2, r2, #1
 80830f0:	eb43 0303 	adc.w	r3, r3, r3
 80830f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80830f8:	bf08      	it	eq
 80830fa:	3d01      	subeq	r5, #1
 80830fc:	d0f7      	beq.n	80830ee <__aeabi_dmul+0x1c6>
 80830fe:	ea43 0306 	orr.w	r3, r3, r6
 8083102:	4770      	bx	lr
 8083104:	ea94 0f0c 	teq	r4, ip
 8083108:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808310c:	bf18      	it	ne
 808310e:	ea95 0f0c 	teqne	r5, ip
 8083112:	d00c      	beq.n	808312e <__aeabi_dmul+0x206>
 8083114:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083118:	bf18      	it	ne
 808311a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808311e:	d1d1      	bne.n	80830c4 <__aeabi_dmul+0x19c>
 8083120:	ea81 0103 	eor.w	r1, r1, r3
 8083124:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083128:	f04f 0000 	mov.w	r0, #0
 808312c:	bd70      	pop	{r4, r5, r6, pc}
 808312e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083132:	bf06      	itte	eq
 8083134:	4610      	moveq	r0, r2
 8083136:	4619      	moveq	r1, r3
 8083138:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808313c:	d019      	beq.n	8083172 <__aeabi_dmul+0x24a>
 808313e:	ea94 0f0c 	teq	r4, ip
 8083142:	d102      	bne.n	808314a <__aeabi_dmul+0x222>
 8083144:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8083148:	d113      	bne.n	8083172 <__aeabi_dmul+0x24a>
 808314a:	ea95 0f0c 	teq	r5, ip
 808314e:	d105      	bne.n	808315c <__aeabi_dmul+0x234>
 8083150:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8083154:	bf1c      	itt	ne
 8083156:	4610      	movne	r0, r2
 8083158:	4619      	movne	r1, r3
 808315a:	d10a      	bne.n	8083172 <__aeabi_dmul+0x24a>
 808315c:	ea81 0103 	eor.w	r1, r1, r3
 8083160:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083164:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8083168:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808316c:	f04f 0000 	mov.w	r0, #0
 8083170:	bd70      	pop	{r4, r5, r6, pc}
 8083172:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8083176:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 808317a:	bd70      	pop	{r4, r5, r6, pc}

0808317c <__aeabi_ddiv>:
 808317c:	b570      	push	{r4, r5, r6, lr}
 808317e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083182:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8083186:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808318a:	bf1d      	ittte	ne
 808318c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8083190:	ea94 0f0c 	teqne	r4, ip
 8083194:	ea95 0f0c 	teqne	r5, ip
 8083198:	f000 f8a7 	bleq	80832ea <__aeabi_ddiv+0x16e>
 808319c:	eba4 0405 	sub.w	r4, r4, r5
 80831a0:	ea81 0e03 	eor.w	lr, r1, r3
 80831a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80831a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80831ac:	f000 8088 	beq.w	80832c0 <__aeabi_ddiv+0x144>
 80831b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80831b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80831b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80831bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80831c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80831c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80831c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80831cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80831d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80831d4:	429d      	cmp	r5, r3
 80831d6:	bf08      	it	eq
 80831d8:	4296      	cmpeq	r6, r2
 80831da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80831de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80831e2:	d202      	bcs.n	80831ea <__aeabi_ddiv+0x6e>
 80831e4:	085b      	lsrs	r3, r3, #1
 80831e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80831ea:	1ab6      	subs	r6, r6, r2
 80831ec:	eb65 0503 	sbc.w	r5, r5, r3
 80831f0:	085b      	lsrs	r3, r3, #1
 80831f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80831f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80831fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80831fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8083202:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083206:	bf22      	ittt	cs
 8083208:	1ab6      	subcs	r6, r6, r2
 808320a:	4675      	movcs	r5, lr
 808320c:	ea40 000c 	orrcs.w	r0, r0, ip
 8083210:	085b      	lsrs	r3, r3, #1
 8083212:	ea4f 0232 	mov.w	r2, r2, rrx
 8083216:	ebb6 0e02 	subs.w	lr, r6, r2
 808321a:	eb75 0e03 	sbcs.w	lr, r5, r3
 808321e:	bf22      	ittt	cs
 8083220:	1ab6      	subcs	r6, r6, r2
 8083222:	4675      	movcs	r5, lr
 8083224:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8083228:	085b      	lsrs	r3, r3, #1
 808322a:	ea4f 0232 	mov.w	r2, r2, rrx
 808322e:	ebb6 0e02 	subs.w	lr, r6, r2
 8083232:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083236:	bf22      	ittt	cs
 8083238:	1ab6      	subcs	r6, r6, r2
 808323a:	4675      	movcs	r5, lr
 808323c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8083240:	085b      	lsrs	r3, r3, #1
 8083242:	ea4f 0232 	mov.w	r2, r2, rrx
 8083246:	ebb6 0e02 	subs.w	lr, r6, r2
 808324a:	eb75 0e03 	sbcs.w	lr, r5, r3
 808324e:	bf22      	ittt	cs
 8083250:	1ab6      	subcs	r6, r6, r2
 8083252:	4675      	movcs	r5, lr
 8083254:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8083258:	ea55 0e06 	orrs.w	lr, r5, r6
 808325c:	d018      	beq.n	8083290 <__aeabi_ddiv+0x114>
 808325e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8083262:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8083266:	ea4f 1606 	mov.w	r6, r6, lsl #4
 808326a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 808326e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8083272:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8083276:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 808327a:	d1c0      	bne.n	80831fe <__aeabi_ddiv+0x82>
 808327c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083280:	d10b      	bne.n	808329a <__aeabi_ddiv+0x11e>
 8083282:	ea41 0100 	orr.w	r1, r1, r0
 8083286:	f04f 0000 	mov.w	r0, #0
 808328a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 808328e:	e7b6      	b.n	80831fe <__aeabi_ddiv+0x82>
 8083290:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083294:	bf04      	itt	eq
 8083296:	4301      	orreq	r1, r0
 8083298:	2000      	moveq	r0, #0
 808329a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808329e:	bf88      	it	hi
 80832a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80832a4:	f63f aeaf 	bhi.w	8083006 <__aeabi_dmul+0xde>
 80832a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80832ac:	bf04      	itt	eq
 80832ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80832b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80832b6:	f150 0000 	adcs.w	r0, r0, #0
 80832ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80832be:	bd70      	pop	{r4, r5, r6, pc}
 80832c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80832c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80832c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80832cc:	bfc2      	ittt	gt
 80832ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80832d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80832d6:	bd70      	popgt	{r4, r5, r6, pc}
 80832d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80832dc:	f04f 0e00 	mov.w	lr, #0
 80832e0:	3c01      	subs	r4, #1
 80832e2:	e690      	b.n	8083006 <__aeabi_dmul+0xde>
 80832e4:	ea45 0e06 	orr.w	lr, r5, r6
 80832e8:	e68d      	b.n	8083006 <__aeabi_dmul+0xde>
 80832ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80832ee:	ea94 0f0c 	teq	r4, ip
 80832f2:	bf08      	it	eq
 80832f4:	ea95 0f0c 	teqeq	r5, ip
 80832f8:	f43f af3b 	beq.w	8083172 <__aeabi_dmul+0x24a>
 80832fc:	ea94 0f0c 	teq	r4, ip
 8083300:	d10a      	bne.n	8083318 <__aeabi_ddiv+0x19c>
 8083302:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8083306:	f47f af34 	bne.w	8083172 <__aeabi_dmul+0x24a>
 808330a:	ea95 0f0c 	teq	r5, ip
 808330e:	f47f af25 	bne.w	808315c <__aeabi_dmul+0x234>
 8083312:	4610      	mov	r0, r2
 8083314:	4619      	mov	r1, r3
 8083316:	e72c      	b.n	8083172 <__aeabi_dmul+0x24a>
 8083318:	ea95 0f0c 	teq	r5, ip
 808331c:	d106      	bne.n	808332c <__aeabi_ddiv+0x1b0>
 808331e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8083322:	f43f aefd 	beq.w	8083120 <__aeabi_dmul+0x1f8>
 8083326:	4610      	mov	r0, r2
 8083328:	4619      	mov	r1, r3
 808332a:	e722      	b.n	8083172 <__aeabi_dmul+0x24a>
 808332c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083330:	bf18      	it	ne
 8083332:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083336:	f47f aec5 	bne.w	80830c4 <__aeabi_dmul+0x19c>
 808333a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 808333e:	f47f af0d 	bne.w	808315c <__aeabi_dmul+0x234>
 8083342:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8083346:	f47f aeeb 	bne.w	8083120 <__aeabi_dmul+0x1f8>
 808334a:	e712      	b.n	8083172 <__aeabi_dmul+0x24a>

0808334c <__gedf2>:
 808334c:	f04f 3cff 	mov.w	ip, #4294967295
 8083350:	e006      	b.n	8083360 <__cmpdf2+0x4>
 8083352:	bf00      	nop

08083354 <__ledf2>:
 8083354:	f04f 0c01 	mov.w	ip, #1
 8083358:	e002      	b.n	8083360 <__cmpdf2+0x4>
 808335a:	bf00      	nop

0808335c <__cmpdf2>:
 808335c:	f04f 0c01 	mov.w	ip, #1
 8083360:	f84d cd04 	str.w	ip, [sp, #-4]!
 8083364:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8083368:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808336c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8083370:	bf18      	it	ne
 8083372:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8083376:	d01b      	beq.n	80833b0 <__cmpdf2+0x54>
 8083378:	b001      	add	sp, #4
 808337a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 808337e:	bf0c      	ite	eq
 8083380:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8083384:	ea91 0f03 	teqne	r1, r3
 8083388:	bf02      	ittt	eq
 808338a:	ea90 0f02 	teqeq	r0, r2
 808338e:	2000      	moveq	r0, #0
 8083390:	4770      	bxeq	lr
 8083392:	f110 0f00 	cmn.w	r0, #0
 8083396:	ea91 0f03 	teq	r1, r3
 808339a:	bf58      	it	pl
 808339c:	4299      	cmppl	r1, r3
 808339e:	bf08      	it	eq
 80833a0:	4290      	cmpeq	r0, r2
 80833a2:	bf2c      	ite	cs
 80833a4:	17d8      	asrcs	r0, r3, #31
 80833a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80833aa:	f040 0001 	orr.w	r0, r0, #1
 80833ae:	4770      	bx	lr
 80833b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80833b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80833b8:	d102      	bne.n	80833c0 <__cmpdf2+0x64>
 80833ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80833be:	d107      	bne.n	80833d0 <__cmpdf2+0x74>
 80833c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80833c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80833c8:	d1d6      	bne.n	8083378 <__cmpdf2+0x1c>
 80833ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80833ce:	d0d3      	beq.n	8083378 <__cmpdf2+0x1c>
 80833d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80833d4:	4770      	bx	lr
 80833d6:	bf00      	nop

080833d8 <__aeabi_cdrcmple>:
 80833d8:	4684      	mov	ip, r0
 80833da:	4610      	mov	r0, r2
 80833dc:	4662      	mov	r2, ip
 80833de:	468c      	mov	ip, r1
 80833e0:	4619      	mov	r1, r3
 80833e2:	4663      	mov	r3, ip
 80833e4:	e000      	b.n	80833e8 <__aeabi_cdcmpeq>
 80833e6:	bf00      	nop

080833e8 <__aeabi_cdcmpeq>:
 80833e8:	b501      	push	{r0, lr}
 80833ea:	f7ff ffb7 	bl	808335c <__cmpdf2>
 80833ee:	2800      	cmp	r0, #0
 80833f0:	bf48      	it	mi
 80833f2:	f110 0f00 	cmnmi.w	r0, #0
 80833f6:	bd01      	pop	{r0, pc}

080833f8 <__aeabi_dcmpeq>:
 80833f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80833fc:	f7ff fff4 	bl	80833e8 <__aeabi_cdcmpeq>
 8083400:	bf0c      	ite	eq
 8083402:	2001      	moveq	r0, #1
 8083404:	2000      	movne	r0, #0
 8083406:	f85d fb08 	ldr.w	pc, [sp], #8
 808340a:	bf00      	nop

0808340c <__aeabi_dcmplt>:
 808340c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083410:	f7ff ffea 	bl	80833e8 <__aeabi_cdcmpeq>
 8083414:	bf34      	ite	cc
 8083416:	2001      	movcc	r0, #1
 8083418:	2000      	movcs	r0, #0
 808341a:	f85d fb08 	ldr.w	pc, [sp], #8
 808341e:	bf00      	nop

08083420 <__aeabi_dcmple>:
 8083420:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083424:	f7ff ffe0 	bl	80833e8 <__aeabi_cdcmpeq>
 8083428:	bf94      	ite	ls
 808342a:	2001      	movls	r0, #1
 808342c:	2000      	movhi	r0, #0
 808342e:	f85d fb08 	ldr.w	pc, [sp], #8
 8083432:	bf00      	nop

08083434 <__aeabi_dcmpge>:
 8083434:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083438:	f7ff ffce 	bl	80833d8 <__aeabi_cdrcmple>
 808343c:	bf94      	ite	ls
 808343e:	2001      	movls	r0, #1
 8083440:	2000      	movhi	r0, #0
 8083442:	f85d fb08 	ldr.w	pc, [sp], #8
 8083446:	bf00      	nop

08083448 <__aeabi_dcmpgt>:
 8083448:	f84d ed08 	str.w	lr, [sp, #-8]!
 808344c:	f7ff ffc4 	bl	80833d8 <__aeabi_cdrcmple>
 8083450:	bf34      	ite	cc
 8083452:	2001      	movcc	r0, #1
 8083454:	2000      	movcs	r0, #0
 8083456:	f85d fb08 	ldr.w	pc, [sp], #8
 808345a:	bf00      	nop

0808345c <__aeabi_dcmpun>:
 808345c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8083460:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8083464:	d102      	bne.n	808346c <__aeabi_dcmpun+0x10>
 8083466:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808346a:	d10a      	bne.n	8083482 <__aeabi_dcmpun+0x26>
 808346c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8083470:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8083474:	d102      	bne.n	808347c <__aeabi_dcmpun+0x20>
 8083476:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808347a:	d102      	bne.n	8083482 <__aeabi_dcmpun+0x26>
 808347c:	f04f 0000 	mov.w	r0, #0
 8083480:	4770      	bx	lr
 8083482:	f04f 0001 	mov.w	r0, #1
 8083486:	4770      	bx	lr

08083488 <__aeabi_d2iz>:
 8083488:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808348c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8083490:	d215      	bcs.n	80834be <__aeabi_d2iz+0x36>
 8083492:	d511      	bpl.n	80834b8 <__aeabi_d2iz+0x30>
 8083494:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8083498:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808349c:	d912      	bls.n	80834c4 <__aeabi_d2iz+0x3c>
 808349e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80834a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80834a6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80834aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80834ae:	fa23 f002 	lsr.w	r0, r3, r2
 80834b2:	bf18      	it	ne
 80834b4:	4240      	negne	r0, r0
 80834b6:	4770      	bx	lr
 80834b8:	f04f 0000 	mov.w	r0, #0
 80834bc:	4770      	bx	lr
 80834be:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80834c2:	d105      	bne.n	80834d0 <__aeabi_d2iz+0x48>
 80834c4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80834c8:	bf08      	it	eq
 80834ca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80834ce:	4770      	bx	lr
 80834d0:	f04f 0000 	mov.w	r0, #0
 80834d4:	4770      	bx	lr
 80834d6:	bf00      	nop

080834d8 <__aeabi_d2uiz>:
 80834d8:	004a      	lsls	r2, r1, #1
 80834da:	d211      	bcs.n	8083500 <__aeabi_d2uiz+0x28>
 80834dc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80834e0:	d211      	bcs.n	8083506 <__aeabi_d2uiz+0x2e>
 80834e2:	d50d      	bpl.n	8083500 <__aeabi_d2uiz+0x28>
 80834e4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80834e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80834ec:	d40e      	bmi.n	808350c <__aeabi_d2uiz+0x34>
 80834ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80834f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80834f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80834fa:	fa23 f002 	lsr.w	r0, r3, r2
 80834fe:	4770      	bx	lr
 8083500:	f04f 0000 	mov.w	r0, #0
 8083504:	4770      	bx	lr
 8083506:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808350a:	d102      	bne.n	8083512 <__aeabi_d2uiz+0x3a>
 808350c:	f04f 30ff 	mov.w	r0, #4294967295
 8083510:	4770      	bx	lr
 8083512:	f04f 0000 	mov.w	r0, #0
 8083516:	4770      	bx	lr

08083518 <__aeabi_d2f>:
 8083518:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808351c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8083520:	bf24      	itt	cs
 8083522:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8083526:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 808352a:	d90d      	bls.n	8083548 <__aeabi_d2f+0x30>
 808352c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8083530:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8083534:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8083538:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 808353c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8083540:	bf08      	it	eq
 8083542:	f020 0001 	biceq.w	r0, r0, #1
 8083546:	4770      	bx	lr
 8083548:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 808354c:	d121      	bne.n	8083592 <__aeabi_d2f+0x7a>
 808354e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8083552:	bfbc      	itt	lt
 8083554:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8083558:	4770      	bxlt	lr
 808355a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808355e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8083562:	f1c2 0218 	rsb	r2, r2, #24
 8083566:	f1c2 0c20 	rsb	ip, r2, #32
 808356a:	fa10 f30c 	lsls.w	r3, r0, ip
 808356e:	fa20 f002 	lsr.w	r0, r0, r2
 8083572:	bf18      	it	ne
 8083574:	f040 0001 	orrne.w	r0, r0, #1
 8083578:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808357c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8083580:	fa03 fc0c 	lsl.w	ip, r3, ip
 8083584:	ea40 000c 	orr.w	r0, r0, ip
 8083588:	fa23 f302 	lsr.w	r3, r3, r2
 808358c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8083590:	e7cc      	b.n	808352c <__aeabi_d2f+0x14>
 8083592:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8083596:	d107      	bne.n	80835a8 <__aeabi_d2f+0x90>
 8083598:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 808359c:	bf1e      	ittt	ne
 808359e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80835a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80835a6:	4770      	bxne	lr
 80835a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80835ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80835b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80835b4:	4770      	bx	lr
 80835b6:	bf00      	nop

080835b8 <__aeabi_frsub>:
 80835b8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80835bc:	e002      	b.n	80835c4 <__addsf3>
 80835be:	bf00      	nop

080835c0 <__aeabi_fsub>:
 80835c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080835c4 <__addsf3>:
 80835c4:	0042      	lsls	r2, r0, #1
 80835c6:	bf1f      	itttt	ne
 80835c8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80835cc:	ea92 0f03 	teqne	r2, r3
 80835d0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80835d4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80835d8:	d06a      	beq.n	80836b0 <__addsf3+0xec>
 80835da:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80835de:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80835e2:	bfc1      	itttt	gt
 80835e4:	18d2      	addgt	r2, r2, r3
 80835e6:	4041      	eorgt	r1, r0
 80835e8:	4048      	eorgt	r0, r1
 80835ea:	4041      	eorgt	r1, r0
 80835ec:	bfb8      	it	lt
 80835ee:	425b      	neglt	r3, r3
 80835f0:	2b19      	cmp	r3, #25
 80835f2:	bf88      	it	hi
 80835f4:	4770      	bxhi	lr
 80835f6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80835fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80835fe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8083602:	bf18      	it	ne
 8083604:	4240      	negne	r0, r0
 8083606:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808360a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 808360e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8083612:	bf18      	it	ne
 8083614:	4249      	negne	r1, r1
 8083616:	ea92 0f03 	teq	r2, r3
 808361a:	d03f      	beq.n	808369c <__addsf3+0xd8>
 808361c:	f1a2 0201 	sub.w	r2, r2, #1
 8083620:	fa41 fc03 	asr.w	ip, r1, r3
 8083624:	eb10 000c 	adds.w	r0, r0, ip
 8083628:	f1c3 0320 	rsb	r3, r3, #32
 808362c:	fa01 f103 	lsl.w	r1, r1, r3
 8083630:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8083634:	d502      	bpl.n	808363c <__addsf3+0x78>
 8083636:	4249      	negs	r1, r1
 8083638:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 808363c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8083640:	d313      	bcc.n	808366a <__addsf3+0xa6>
 8083642:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8083646:	d306      	bcc.n	8083656 <__addsf3+0x92>
 8083648:	0840      	lsrs	r0, r0, #1
 808364a:	ea4f 0131 	mov.w	r1, r1, rrx
 808364e:	f102 0201 	add.w	r2, r2, #1
 8083652:	2afe      	cmp	r2, #254	; 0xfe
 8083654:	d251      	bcs.n	80836fa <__addsf3+0x136>
 8083656:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 808365a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808365e:	bf08      	it	eq
 8083660:	f020 0001 	biceq.w	r0, r0, #1
 8083664:	ea40 0003 	orr.w	r0, r0, r3
 8083668:	4770      	bx	lr
 808366a:	0049      	lsls	r1, r1, #1
 808366c:	eb40 0000 	adc.w	r0, r0, r0
 8083670:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8083674:	f1a2 0201 	sub.w	r2, r2, #1
 8083678:	d1ed      	bne.n	8083656 <__addsf3+0x92>
 808367a:	fab0 fc80 	clz	ip, r0
 808367e:	f1ac 0c08 	sub.w	ip, ip, #8
 8083682:	ebb2 020c 	subs.w	r2, r2, ip
 8083686:	fa00 f00c 	lsl.w	r0, r0, ip
 808368a:	bfaa      	itet	ge
 808368c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8083690:	4252      	neglt	r2, r2
 8083692:	4318      	orrge	r0, r3
 8083694:	bfbc      	itt	lt
 8083696:	40d0      	lsrlt	r0, r2
 8083698:	4318      	orrlt	r0, r3
 808369a:	4770      	bx	lr
 808369c:	f092 0f00 	teq	r2, #0
 80836a0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80836a4:	bf06      	itte	eq
 80836a6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80836aa:	3201      	addeq	r2, #1
 80836ac:	3b01      	subne	r3, #1
 80836ae:	e7b5      	b.n	808361c <__addsf3+0x58>
 80836b0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80836b4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80836b8:	bf18      	it	ne
 80836ba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80836be:	d021      	beq.n	8083704 <__addsf3+0x140>
 80836c0:	ea92 0f03 	teq	r2, r3
 80836c4:	d004      	beq.n	80836d0 <__addsf3+0x10c>
 80836c6:	f092 0f00 	teq	r2, #0
 80836ca:	bf08      	it	eq
 80836cc:	4608      	moveq	r0, r1
 80836ce:	4770      	bx	lr
 80836d0:	ea90 0f01 	teq	r0, r1
 80836d4:	bf1c      	itt	ne
 80836d6:	2000      	movne	r0, #0
 80836d8:	4770      	bxne	lr
 80836da:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80836de:	d104      	bne.n	80836ea <__addsf3+0x126>
 80836e0:	0040      	lsls	r0, r0, #1
 80836e2:	bf28      	it	cs
 80836e4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80836e8:	4770      	bx	lr
 80836ea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80836ee:	bf3c      	itt	cc
 80836f0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80836f4:	4770      	bxcc	lr
 80836f6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80836fa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80836fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083702:	4770      	bx	lr
 8083704:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8083708:	bf16      	itet	ne
 808370a:	4608      	movne	r0, r1
 808370c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8083710:	4601      	movne	r1, r0
 8083712:	0242      	lsls	r2, r0, #9
 8083714:	bf06      	itte	eq
 8083716:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 808371a:	ea90 0f01 	teqeq	r0, r1
 808371e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8083722:	4770      	bx	lr

08083724 <__aeabi_ui2f>:
 8083724:	f04f 0300 	mov.w	r3, #0
 8083728:	e004      	b.n	8083734 <__aeabi_i2f+0x8>
 808372a:	bf00      	nop

0808372c <__aeabi_i2f>:
 808372c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8083730:	bf48      	it	mi
 8083732:	4240      	negmi	r0, r0
 8083734:	ea5f 0c00 	movs.w	ip, r0
 8083738:	bf08      	it	eq
 808373a:	4770      	bxeq	lr
 808373c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8083740:	4601      	mov	r1, r0
 8083742:	f04f 0000 	mov.w	r0, #0
 8083746:	e01c      	b.n	8083782 <__aeabi_l2f+0x2a>

08083748 <__aeabi_ul2f>:
 8083748:	ea50 0201 	orrs.w	r2, r0, r1
 808374c:	bf08      	it	eq
 808374e:	4770      	bxeq	lr
 8083750:	f04f 0300 	mov.w	r3, #0
 8083754:	e00a      	b.n	808376c <__aeabi_l2f+0x14>
 8083756:	bf00      	nop

08083758 <__aeabi_l2f>:
 8083758:	ea50 0201 	orrs.w	r2, r0, r1
 808375c:	bf08      	it	eq
 808375e:	4770      	bxeq	lr
 8083760:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8083764:	d502      	bpl.n	808376c <__aeabi_l2f+0x14>
 8083766:	4240      	negs	r0, r0
 8083768:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808376c:	ea5f 0c01 	movs.w	ip, r1
 8083770:	bf02      	ittt	eq
 8083772:	4684      	moveq	ip, r0
 8083774:	4601      	moveq	r1, r0
 8083776:	2000      	moveq	r0, #0
 8083778:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 808377c:	bf08      	it	eq
 808377e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8083782:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8083786:	fabc f28c 	clz	r2, ip
 808378a:	3a08      	subs	r2, #8
 808378c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8083790:	db10      	blt.n	80837b4 <__aeabi_l2f+0x5c>
 8083792:	fa01 fc02 	lsl.w	ip, r1, r2
 8083796:	4463      	add	r3, ip
 8083798:	fa00 fc02 	lsl.w	ip, r0, r2
 808379c:	f1c2 0220 	rsb	r2, r2, #32
 80837a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80837a4:	fa20 f202 	lsr.w	r2, r0, r2
 80837a8:	eb43 0002 	adc.w	r0, r3, r2
 80837ac:	bf08      	it	eq
 80837ae:	f020 0001 	biceq.w	r0, r0, #1
 80837b2:	4770      	bx	lr
 80837b4:	f102 0220 	add.w	r2, r2, #32
 80837b8:	fa01 fc02 	lsl.w	ip, r1, r2
 80837bc:	f1c2 0220 	rsb	r2, r2, #32
 80837c0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80837c4:	fa21 f202 	lsr.w	r2, r1, r2
 80837c8:	eb43 0002 	adc.w	r0, r3, r2
 80837cc:	bf08      	it	eq
 80837ce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80837d2:	4770      	bx	lr

080837d4 <__aeabi_fmul>:
 80837d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80837d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80837dc:	bf1e      	ittt	ne
 80837de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80837e2:	ea92 0f0c 	teqne	r2, ip
 80837e6:	ea93 0f0c 	teqne	r3, ip
 80837ea:	d06f      	beq.n	80838cc <__aeabi_fmul+0xf8>
 80837ec:	441a      	add	r2, r3
 80837ee:	ea80 0c01 	eor.w	ip, r0, r1
 80837f2:	0240      	lsls	r0, r0, #9
 80837f4:	bf18      	it	ne
 80837f6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80837fa:	d01e      	beq.n	808383a <__aeabi_fmul+0x66>
 80837fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8083800:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8083804:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8083808:	fba0 3101 	umull	r3, r1, r0, r1
 808380c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8083810:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8083814:	bf3e      	ittt	cc
 8083816:	0049      	lslcc	r1, r1, #1
 8083818:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 808381c:	005b      	lslcc	r3, r3, #1
 808381e:	ea40 0001 	orr.w	r0, r0, r1
 8083822:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8083826:	2afd      	cmp	r2, #253	; 0xfd
 8083828:	d81d      	bhi.n	8083866 <__aeabi_fmul+0x92>
 808382a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 808382e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8083832:	bf08      	it	eq
 8083834:	f020 0001 	biceq.w	r0, r0, #1
 8083838:	4770      	bx	lr
 808383a:	f090 0f00 	teq	r0, #0
 808383e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8083842:	bf08      	it	eq
 8083844:	0249      	lsleq	r1, r1, #9
 8083846:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808384a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 808384e:	3a7f      	subs	r2, #127	; 0x7f
 8083850:	bfc2      	ittt	gt
 8083852:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8083856:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808385a:	4770      	bxgt	lr
 808385c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083860:	f04f 0300 	mov.w	r3, #0
 8083864:	3a01      	subs	r2, #1
 8083866:	dc5d      	bgt.n	8083924 <__aeabi_fmul+0x150>
 8083868:	f112 0f19 	cmn.w	r2, #25
 808386c:	bfdc      	itt	le
 808386e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8083872:	4770      	bxle	lr
 8083874:	f1c2 0200 	rsb	r2, r2, #0
 8083878:	0041      	lsls	r1, r0, #1
 808387a:	fa21 f102 	lsr.w	r1, r1, r2
 808387e:	f1c2 0220 	rsb	r2, r2, #32
 8083882:	fa00 fc02 	lsl.w	ip, r0, r2
 8083886:	ea5f 0031 	movs.w	r0, r1, rrx
 808388a:	f140 0000 	adc.w	r0, r0, #0
 808388e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8083892:	bf08      	it	eq
 8083894:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8083898:	4770      	bx	lr
 808389a:	f092 0f00 	teq	r2, #0
 808389e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80838a2:	bf02      	ittt	eq
 80838a4:	0040      	lsleq	r0, r0, #1
 80838a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80838aa:	3a01      	subeq	r2, #1
 80838ac:	d0f9      	beq.n	80838a2 <__aeabi_fmul+0xce>
 80838ae:	ea40 000c 	orr.w	r0, r0, ip
 80838b2:	f093 0f00 	teq	r3, #0
 80838b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80838ba:	bf02      	ittt	eq
 80838bc:	0049      	lsleq	r1, r1, #1
 80838be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80838c2:	3b01      	subeq	r3, #1
 80838c4:	d0f9      	beq.n	80838ba <__aeabi_fmul+0xe6>
 80838c6:	ea41 010c 	orr.w	r1, r1, ip
 80838ca:	e78f      	b.n	80837ec <__aeabi_fmul+0x18>
 80838cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80838d0:	ea92 0f0c 	teq	r2, ip
 80838d4:	bf18      	it	ne
 80838d6:	ea93 0f0c 	teqne	r3, ip
 80838da:	d00a      	beq.n	80838f2 <__aeabi_fmul+0x11e>
 80838dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80838e0:	bf18      	it	ne
 80838e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80838e6:	d1d8      	bne.n	808389a <__aeabi_fmul+0xc6>
 80838e8:	ea80 0001 	eor.w	r0, r0, r1
 80838ec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80838f0:	4770      	bx	lr
 80838f2:	f090 0f00 	teq	r0, #0
 80838f6:	bf17      	itett	ne
 80838f8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80838fc:	4608      	moveq	r0, r1
 80838fe:	f091 0f00 	teqne	r1, #0
 8083902:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8083906:	d014      	beq.n	8083932 <__aeabi_fmul+0x15e>
 8083908:	ea92 0f0c 	teq	r2, ip
 808390c:	d101      	bne.n	8083912 <__aeabi_fmul+0x13e>
 808390e:	0242      	lsls	r2, r0, #9
 8083910:	d10f      	bne.n	8083932 <__aeabi_fmul+0x15e>
 8083912:	ea93 0f0c 	teq	r3, ip
 8083916:	d103      	bne.n	8083920 <__aeabi_fmul+0x14c>
 8083918:	024b      	lsls	r3, r1, #9
 808391a:	bf18      	it	ne
 808391c:	4608      	movne	r0, r1
 808391e:	d108      	bne.n	8083932 <__aeabi_fmul+0x15e>
 8083920:	ea80 0001 	eor.w	r0, r0, r1
 8083924:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8083928:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808392c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083930:	4770      	bx	lr
 8083932:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8083936:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 808393a:	4770      	bx	lr

0808393c <__aeabi_fdiv>:
 808393c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083940:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8083944:	bf1e      	ittt	ne
 8083946:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808394a:	ea92 0f0c 	teqne	r2, ip
 808394e:	ea93 0f0c 	teqne	r3, ip
 8083952:	d069      	beq.n	8083a28 <__aeabi_fdiv+0xec>
 8083954:	eba2 0203 	sub.w	r2, r2, r3
 8083958:	ea80 0c01 	eor.w	ip, r0, r1
 808395c:	0249      	lsls	r1, r1, #9
 808395e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8083962:	d037      	beq.n	80839d4 <__aeabi_fdiv+0x98>
 8083964:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8083968:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 808396c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8083970:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8083974:	428b      	cmp	r3, r1
 8083976:	bf38      	it	cc
 8083978:	005b      	lslcc	r3, r3, #1
 808397a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 808397e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8083982:	428b      	cmp	r3, r1
 8083984:	bf24      	itt	cs
 8083986:	1a5b      	subcs	r3, r3, r1
 8083988:	ea40 000c 	orrcs.w	r0, r0, ip
 808398c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8083990:	bf24      	itt	cs
 8083992:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8083996:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808399a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 808399e:	bf24      	itt	cs
 80839a0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80839a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80839a8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80839ac:	bf24      	itt	cs
 80839ae:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80839b2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80839b6:	011b      	lsls	r3, r3, #4
 80839b8:	bf18      	it	ne
 80839ba:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80839be:	d1e0      	bne.n	8083982 <__aeabi_fdiv+0x46>
 80839c0:	2afd      	cmp	r2, #253	; 0xfd
 80839c2:	f63f af50 	bhi.w	8083866 <__aeabi_fmul+0x92>
 80839c6:	428b      	cmp	r3, r1
 80839c8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80839cc:	bf08      	it	eq
 80839ce:	f020 0001 	biceq.w	r0, r0, #1
 80839d2:	4770      	bx	lr
 80839d4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80839d8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80839dc:	327f      	adds	r2, #127	; 0x7f
 80839de:	bfc2      	ittt	gt
 80839e0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80839e4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80839e8:	4770      	bxgt	lr
 80839ea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80839ee:	f04f 0300 	mov.w	r3, #0
 80839f2:	3a01      	subs	r2, #1
 80839f4:	e737      	b.n	8083866 <__aeabi_fmul+0x92>
 80839f6:	f092 0f00 	teq	r2, #0
 80839fa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80839fe:	bf02      	ittt	eq
 8083a00:	0040      	lsleq	r0, r0, #1
 8083a02:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8083a06:	3a01      	subeq	r2, #1
 8083a08:	d0f9      	beq.n	80839fe <__aeabi_fdiv+0xc2>
 8083a0a:	ea40 000c 	orr.w	r0, r0, ip
 8083a0e:	f093 0f00 	teq	r3, #0
 8083a12:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8083a16:	bf02      	ittt	eq
 8083a18:	0049      	lsleq	r1, r1, #1
 8083a1a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8083a1e:	3b01      	subeq	r3, #1
 8083a20:	d0f9      	beq.n	8083a16 <__aeabi_fdiv+0xda>
 8083a22:	ea41 010c 	orr.w	r1, r1, ip
 8083a26:	e795      	b.n	8083954 <__aeabi_fdiv+0x18>
 8083a28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8083a2c:	ea92 0f0c 	teq	r2, ip
 8083a30:	d108      	bne.n	8083a44 <__aeabi_fdiv+0x108>
 8083a32:	0242      	lsls	r2, r0, #9
 8083a34:	f47f af7d 	bne.w	8083932 <__aeabi_fmul+0x15e>
 8083a38:	ea93 0f0c 	teq	r3, ip
 8083a3c:	f47f af70 	bne.w	8083920 <__aeabi_fmul+0x14c>
 8083a40:	4608      	mov	r0, r1
 8083a42:	e776      	b.n	8083932 <__aeabi_fmul+0x15e>
 8083a44:	ea93 0f0c 	teq	r3, ip
 8083a48:	d104      	bne.n	8083a54 <__aeabi_fdiv+0x118>
 8083a4a:	024b      	lsls	r3, r1, #9
 8083a4c:	f43f af4c 	beq.w	80838e8 <__aeabi_fmul+0x114>
 8083a50:	4608      	mov	r0, r1
 8083a52:	e76e      	b.n	8083932 <__aeabi_fmul+0x15e>
 8083a54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8083a58:	bf18      	it	ne
 8083a5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8083a5e:	d1ca      	bne.n	80839f6 <__aeabi_fdiv+0xba>
 8083a60:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8083a64:	f47f af5c 	bne.w	8083920 <__aeabi_fmul+0x14c>
 8083a68:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8083a6c:	f47f af3c 	bne.w	80838e8 <__aeabi_fmul+0x114>
 8083a70:	e75f      	b.n	8083932 <__aeabi_fmul+0x15e>
 8083a72:	bf00      	nop

08083a74 <__aeabi_uldivmod>:
 8083a74:	b953      	cbnz	r3, 8083a8c <__aeabi_uldivmod+0x18>
 8083a76:	b94a      	cbnz	r2, 8083a8c <__aeabi_uldivmod+0x18>
 8083a78:	2900      	cmp	r1, #0
 8083a7a:	bf08      	it	eq
 8083a7c:	2800      	cmpeq	r0, #0
 8083a7e:	bf1c      	itt	ne
 8083a80:	f04f 31ff 	movne.w	r1, #4294967295
 8083a84:	f04f 30ff 	movne.w	r0, #4294967295
 8083a88:	f000 b9a6 	b.w	8083dd8 <__aeabi_idiv0>
 8083a8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8083a90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8083a94:	f000 f82a 	bl	8083aec <__udivmoddi4>
 8083a98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8083a9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8083aa0:	b004      	add	sp, #16
 8083aa2:	4770      	bx	lr

08083aa4 <__aeabi_d2ulz>:
 8083aa4:	b5d0      	push	{r4, r6, r7, lr}
 8083aa6:	2200      	movs	r2, #0
 8083aa8:	4b0e      	ldr	r3, [pc, #56]	; (8083ae4 <__aeabi_d2ulz+0x40>)
 8083aaa:	4606      	mov	r6, r0
 8083aac:	460f      	mov	r7, r1
 8083aae:	f7ff fa3b 	bl	8082f28 <__aeabi_dmul>
 8083ab2:	f7ff fd11 	bl	80834d8 <__aeabi_d2uiz>
 8083ab6:	4604      	mov	r4, r0
 8083ab8:	f7ff f9c0 	bl	8082e3c <__aeabi_ui2d>
 8083abc:	2200      	movs	r2, #0
 8083abe:	4b0a      	ldr	r3, [pc, #40]	; (8083ae8 <__aeabi_d2ulz+0x44>)
 8083ac0:	f7ff fa32 	bl	8082f28 <__aeabi_dmul>
 8083ac4:	4602      	mov	r2, r0
 8083ac6:	460b      	mov	r3, r1
 8083ac8:	4630      	mov	r0, r6
 8083aca:	4639      	mov	r1, r7
 8083acc:	f7ff f878 	bl	8082bc0 <__aeabi_dsub>
 8083ad0:	f7ff fd02 	bl	80834d8 <__aeabi_d2uiz>
 8083ad4:	4623      	mov	r3, r4
 8083ad6:	2200      	movs	r2, #0
 8083ad8:	ea42 0200 	orr.w	r2, r2, r0
 8083adc:	4610      	mov	r0, r2
 8083ade:	4619      	mov	r1, r3
 8083ae0:	bdd0      	pop	{r4, r6, r7, pc}
 8083ae2:	bf00      	nop
 8083ae4:	3df00000 	.word	0x3df00000
 8083ae8:	41f00000 	.word	0x41f00000

08083aec <__udivmoddi4>:
 8083aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8083af0:	468c      	mov	ip, r1
 8083af2:	460c      	mov	r4, r1
 8083af4:	4605      	mov	r5, r0
 8083af6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8083af8:	2b00      	cmp	r3, #0
 8083afa:	d14f      	bne.n	8083b9c <__udivmoddi4+0xb0>
 8083afc:	428a      	cmp	r2, r1
 8083afe:	4617      	mov	r7, r2
 8083b00:	d96b      	bls.n	8083bda <__udivmoddi4+0xee>
 8083b02:	fab2 fe82 	clz	lr, r2
 8083b06:	f1be 0f00 	cmp.w	lr, #0
 8083b0a:	d00b      	beq.n	8083b24 <__udivmoddi4+0x38>
 8083b0c:	f1ce 0520 	rsb	r5, lr, #32
 8083b10:	fa20 f505 	lsr.w	r5, r0, r5
 8083b14:	fa01 f30e 	lsl.w	r3, r1, lr
 8083b18:	ea45 0c03 	orr.w	ip, r5, r3
 8083b1c:	fa02 f70e 	lsl.w	r7, r2, lr
 8083b20:	fa00 f50e 	lsl.w	r5, r0, lr
 8083b24:	0c39      	lsrs	r1, r7, #16
 8083b26:	fbbc f0f1 	udiv	r0, ip, r1
 8083b2a:	b2ba      	uxth	r2, r7
 8083b2c:	fb01 c310 	mls	r3, r1, r0, ip
 8083b30:	fb00 f802 	mul.w	r8, r0, r2
 8083b34:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8083b38:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 8083b3c:	45a0      	cmp	r8, r4
 8083b3e:	d909      	bls.n	8083b54 <__udivmoddi4+0x68>
 8083b40:	19e4      	adds	r4, r4, r7
 8083b42:	f100 33ff 	add.w	r3, r0, #4294967295
 8083b46:	f080 8128 	bcs.w	8083d9a <__udivmoddi4+0x2ae>
 8083b4a:	45a0      	cmp	r8, r4
 8083b4c:	f240 8125 	bls.w	8083d9a <__udivmoddi4+0x2ae>
 8083b50:	3802      	subs	r0, #2
 8083b52:	443c      	add	r4, r7
 8083b54:	ebc8 0404 	rsb	r4, r8, r4
 8083b58:	fbb4 f3f1 	udiv	r3, r4, r1
 8083b5c:	fb01 4c13 	mls	ip, r1, r3, r4
 8083b60:	fb03 f202 	mul.w	r2, r3, r2
 8083b64:	b2ac      	uxth	r4, r5
 8083b66:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 8083b6a:	428a      	cmp	r2, r1
 8083b6c:	d909      	bls.n	8083b82 <__udivmoddi4+0x96>
 8083b6e:	19c9      	adds	r1, r1, r7
 8083b70:	f103 34ff 	add.w	r4, r3, #4294967295
 8083b74:	f080 810f 	bcs.w	8083d96 <__udivmoddi4+0x2aa>
 8083b78:	428a      	cmp	r2, r1
 8083b7a:	f240 810c 	bls.w	8083d96 <__udivmoddi4+0x2aa>
 8083b7e:	3b02      	subs	r3, #2
 8083b80:	4439      	add	r1, r7
 8083b82:	1a8a      	subs	r2, r1, r2
 8083b84:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8083b88:	2100      	movs	r1, #0
 8083b8a:	2e00      	cmp	r6, #0
 8083b8c:	d063      	beq.n	8083c56 <__udivmoddi4+0x16a>
 8083b8e:	fa22 f20e 	lsr.w	r2, r2, lr
 8083b92:	2300      	movs	r3, #0
 8083b94:	e886 000c 	stmia.w	r6, {r2, r3}
 8083b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8083b9c:	428b      	cmp	r3, r1
 8083b9e:	d907      	bls.n	8083bb0 <__udivmoddi4+0xc4>
 8083ba0:	2e00      	cmp	r6, #0
 8083ba2:	d056      	beq.n	8083c52 <__udivmoddi4+0x166>
 8083ba4:	2100      	movs	r1, #0
 8083ba6:	e886 0011 	stmia.w	r6, {r0, r4}
 8083baa:	4608      	mov	r0, r1
 8083bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8083bb0:	fab3 f183 	clz	r1, r3
 8083bb4:	2900      	cmp	r1, #0
 8083bb6:	f040 8093 	bne.w	8083ce0 <__udivmoddi4+0x1f4>
 8083bba:	42a3      	cmp	r3, r4
 8083bbc:	d302      	bcc.n	8083bc4 <__udivmoddi4+0xd8>
 8083bbe:	4282      	cmp	r2, r0
 8083bc0:	f200 80fe 	bhi.w	8083dc0 <__udivmoddi4+0x2d4>
 8083bc4:	1a85      	subs	r5, r0, r2
 8083bc6:	eb64 0303 	sbc.w	r3, r4, r3
 8083bca:	469c      	mov	ip, r3
 8083bcc:	2001      	movs	r0, #1
 8083bce:	2e00      	cmp	r6, #0
 8083bd0:	d041      	beq.n	8083c56 <__udivmoddi4+0x16a>
 8083bd2:	e886 1020 	stmia.w	r6, {r5, ip}
 8083bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8083bda:	b912      	cbnz	r2, 8083be2 <__udivmoddi4+0xf6>
 8083bdc:	2701      	movs	r7, #1
 8083bde:	fbb7 f7f2 	udiv	r7, r7, r2
 8083be2:	fab7 fe87 	clz	lr, r7
 8083be6:	f1be 0f00 	cmp.w	lr, #0
 8083bea:	d136      	bne.n	8083c5a <__udivmoddi4+0x16e>
 8083bec:	1be4      	subs	r4, r4, r7
 8083bee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8083bf2:	fa1f f987 	uxth.w	r9, r7
 8083bf6:	2101      	movs	r1, #1
 8083bf8:	fbb4 f3f8 	udiv	r3, r4, r8
 8083bfc:	fb08 4413 	mls	r4, r8, r3, r4
 8083c00:	fb09 f203 	mul.w	r2, r9, r3
 8083c04:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8083c08:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 8083c0c:	42a2      	cmp	r2, r4
 8083c0e:	d907      	bls.n	8083c20 <__udivmoddi4+0x134>
 8083c10:	19e4      	adds	r4, r4, r7
 8083c12:	f103 30ff 	add.w	r0, r3, #4294967295
 8083c16:	d202      	bcs.n	8083c1e <__udivmoddi4+0x132>
 8083c18:	42a2      	cmp	r2, r4
 8083c1a:	f200 80d3 	bhi.w	8083dc4 <__udivmoddi4+0x2d8>
 8083c1e:	4603      	mov	r3, r0
 8083c20:	1aa4      	subs	r4, r4, r2
 8083c22:	fbb4 f0f8 	udiv	r0, r4, r8
 8083c26:	fb08 4810 	mls	r8, r8, r0, r4
 8083c2a:	fb09 f900 	mul.w	r9, r9, r0
 8083c2e:	b2ac      	uxth	r4, r5
 8083c30:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 8083c34:	4591      	cmp	r9, r2
 8083c36:	d907      	bls.n	8083c48 <__udivmoddi4+0x15c>
 8083c38:	19d2      	adds	r2, r2, r7
 8083c3a:	f100 34ff 	add.w	r4, r0, #4294967295
 8083c3e:	d202      	bcs.n	8083c46 <__udivmoddi4+0x15a>
 8083c40:	4591      	cmp	r9, r2
 8083c42:	f200 80ba 	bhi.w	8083dba <__udivmoddi4+0x2ce>
 8083c46:	4620      	mov	r0, r4
 8083c48:	ebc9 0202 	rsb	r2, r9, r2
 8083c4c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8083c50:	e79b      	b.n	8083b8a <__udivmoddi4+0x9e>
 8083c52:	4631      	mov	r1, r6
 8083c54:	4630      	mov	r0, r6
 8083c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8083c5a:	fa07 f70e 	lsl.w	r7, r7, lr
 8083c5e:	f1ce 0c20 	rsb	ip, lr, #32
 8083c62:	fa24 f30c 	lsr.w	r3, r4, ip
 8083c66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8083c6a:	fbb3 faf8 	udiv	sl, r3, r8
 8083c6e:	fa1f f987 	uxth.w	r9, r7
 8083c72:	fb08 351a 	mls	r5, r8, sl, r3
 8083c76:	fa20 fc0c 	lsr.w	ip, r0, ip
 8083c7a:	fa04 f40e 	lsl.w	r4, r4, lr
 8083c7e:	fb0a fb09 	mul.w	fp, sl, r9
 8083c82:	ea4c 0c04 	orr.w	ip, ip, r4
 8083c86:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8083c8a:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 8083c8e:	459b      	cmp	fp, r3
 8083c90:	fa00 f50e 	lsl.w	r5, r0, lr
 8083c94:	d90a      	bls.n	8083cac <__udivmoddi4+0x1c0>
 8083c96:	19db      	adds	r3, r3, r7
 8083c98:	f10a 32ff 	add.w	r2, sl, #4294967295
 8083c9c:	f080 808b 	bcs.w	8083db6 <__udivmoddi4+0x2ca>
 8083ca0:	459b      	cmp	fp, r3
 8083ca2:	f240 8088 	bls.w	8083db6 <__udivmoddi4+0x2ca>
 8083ca6:	f1aa 0a02 	sub.w	sl, sl, #2
 8083caa:	443b      	add	r3, r7
 8083cac:	ebcb 0303 	rsb	r3, fp, r3
 8083cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8083cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8083cb8:	fb00 f409 	mul.w	r4, r0, r9
 8083cbc:	fa1f fc8c 	uxth.w	ip, ip
 8083cc0:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 8083cc4:	429c      	cmp	r4, r3
 8083cc6:	d907      	bls.n	8083cd8 <__udivmoddi4+0x1ec>
 8083cc8:	19db      	adds	r3, r3, r7
 8083cca:	f100 32ff 	add.w	r2, r0, #4294967295
 8083cce:	d26e      	bcs.n	8083dae <__udivmoddi4+0x2c2>
 8083cd0:	429c      	cmp	r4, r3
 8083cd2:	d96c      	bls.n	8083dae <__udivmoddi4+0x2c2>
 8083cd4:	3802      	subs	r0, #2
 8083cd6:	443b      	add	r3, r7
 8083cd8:	1b1c      	subs	r4, r3, r4
 8083cda:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 8083cde:	e78b      	b.n	8083bf8 <__udivmoddi4+0x10c>
 8083ce0:	f1c1 0e20 	rsb	lr, r1, #32
 8083ce4:	408b      	lsls	r3, r1
 8083ce6:	fa22 fc0e 	lsr.w	ip, r2, lr
 8083cea:	ea4c 0c03 	orr.w	ip, ip, r3
 8083cee:	fa24 f70e 	lsr.w	r7, r4, lr
 8083cf2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8083cf6:	fbb7 faf9 	udiv	sl, r7, r9
 8083cfa:	fa1f f38c 	uxth.w	r3, ip
 8083cfe:	fb09 771a 	mls	r7, r9, sl, r7
 8083d02:	fa20 f80e 	lsr.w	r8, r0, lr
 8083d06:	408c      	lsls	r4, r1
 8083d08:	fb0a f503 	mul.w	r5, sl, r3
 8083d0c:	ea48 0404 	orr.w	r4, r8, r4
 8083d10:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8083d14:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 8083d18:	42bd      	cmp	r5, r7
 8083d1a:	fa02 f201 	lsl.w	r2, r2, r1
 8083d1e:	fa00 fb01 	lsl.w	fp, r0, r1
 8083d22:	d909      	bls.n	8083d38 <__udivmoddi4+0x24c>
 8083d24:	eb17 070c 	adds.w	r7, r7, ip
 8083d28:	f10a 30ff 	add.w	r0, sl, #4294967295
 8083d2c:	d241      	bcs.n	8083db2 <__udivmoddi4+0x2c6>
 8083d2e:	42bd      	cmp	r5, r7
 8083d30:	d93f      	bls.n	8083db2 <__udivmoddi4+0x2c6>
 8083d32:	f1aa 0a02 	sub.w	sl, sl, #2
 8083d36:	4467      	add	r7, ip
 8083d38:	1b7f      	subs	r7, r7, r5
 8083d3a:	fbb7 f5f9 	udiv	r5, r7, r9
 8083d3e:	fb09 7715 	mls	r7, r9, r5, r7
 8083d42:	fb05 f303 	mul.w	r3, r5, r3
 8083d46:	b2a4      	uxth	r4, r4
 8083d48:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8083d4c:	42bb      	cmp	r3, r7
 8083d4e:	d908      	bls.n	8083d62 <__udivmoddi4+0x276>
 8083d50:	eb17 070c 	adds.w	r7, r7, ip
 8083d54:	f105 30ff 	add.w	r0, r5, #4294967295
 8083d58:	d227      	bcs.n	8083daa <__udivmoddi4+0x2be>
 8083d5a:	42bb      	cmp	r3, r7
 8083d5c:	d925      	bls.n	8083daa <__udivmoddi4+0x2be>
 8083d5e:	3d02      	subs	r5, #2
 8083d60:	4467      	add	r7, ip
 8083d62:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 8083d66:	fba0 8902 	umull	r8, r9, r0, r2
 8083d6a:	1aff      	subs	r7, r7, r3
 8083d6c:	454f      	cmp	r7, r9
 8083d6e:	4645      	mov	r5, r8
 8083d70:	464c      	mov	r4, r9
 8083d72:	d314      	bcc.n	8083d9e <__udivmoddi4+0x2b2>
 8083d74:	d029      	beq.n	8083dca <__udivmoddi4+0x2de>
 8083d76:	b366      	cbz	r6, 8083dd2 <__udivmoddi4+0x2e6>
 8083d78:	ebbb 0305 	subs.w	r3, fp, r5
 8083d7c:	eb67 0704 	sbc.w	r7, r7, r4
 8083d80:	fa07 fe0e 	lsl.w	lr, r7, lr
 8083d84:	40cb      	lsrs	r3, r1
 8083d86:	40cf      	lsrs	r7, r1
 8083d88:	ea4e 0303 	orr.w	r3, lr, r3
 8083d8c:	e886 0088 	stmia.w	r6, {r3, r7}
 8083d90:	2100      	movs	r1, #0
 8083d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8083d96:	4623      	mov	r3, r4
 8083d98:	e6f3      	b.n	8083b82 <__udivmoddi4+0x96>
 8083d9a:	4618      	mov	r0, r3
 8083d9c:	e6da      	b.n	8083b54 <__udivmoddi4+0x68>
 8083d9e:	ebb8 0502 	subs.w	r5, r8, r2
 8083da2:	eb69 040c 	sbc.w	r4, r9, ip
 8083da6:	3801      	subs	r0, #1
 8083da8:	e7e5      	b.n	8083d76 <__udivmoddi4+0x28a>
 8083daa:	4605      	mov	r5, r0
 8083dac:	e7d9      	b.n	8083d62 <__udivmoddi4+0x276>
 8083dae:	4610      	mov	r0, r2
 8083db0:	e792      	b.n	8083cd8 <__udivmoddi4+0x1ec>
 8083db2:	4682      	mov	sl, r0
 8083db4:	e7c0      	b.n	8083d38 <__udivmoddi4+0x24c>
 8083db6:	4692      	mov	sl, r2
 8083db8:	e778      	b.n	8083cac <__udivmoddi4+0x1c0>
 8083dba:	3802      	subs	r0, #2
 8083dbc:	443a      	add	r2, r7
 8083dbe:	e743      	b.n	8083c48 <__udivmoddi4+0x15c>
 8083dc0:	4608      	mov	r0, r1
 8083dc2:	e704      	b.n	8083bce <__udivmoddi4+0xe2>
 8083dc4:	3b02      	subs	r3, #2
 8083dc6:	443c      	add	r4, r7
 8083dc8:	e72a      	b.n	8083c20 <__udivmoddi4+0x134>
 8083dca:	45c3      	cmp	fp, r8
 8083dcc:	d3e7      	bcc.n	8083d9e <__udivmoddi4+0x2b2>
 8083dce:	463c      	mov	r4, r7
 8083dd0:	e7d1      	b.n	8083d76 <__udivmoddi4+0x28a>
 8083dd2:	4631      	mov	r1, r6
 8083dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08083dd8 <__aeabi_idiv0>:
 8083dd8:	4770      	bx	lr
 8083dda:	bf00      	nop

08083ddc <atof>:
 8083ddc:	2100      	movs	r1, #0
 8083dde:	f000 beb7 	b.w	8084b50 <strtod>

08083de2 <atol>:
 8083de2:	220a      	movs	r2, #10
 8083de4:	2100      	movs	r1, #0
 8083de6:	f000 bf41 	b.w	8084c6c <strtol>
	...

08083dec <__cxa_atexit>:
 8083dec:	b510      	push	{r4, lr}
 8083dee:	4c05      	ldr	r4, [pc, #20]	; (8083e04 <__cxa_atexit+0x18>)
 8083df0:	4613      	mov	r3, r2
 8083df2:	b12c      	cbz	r4, 8083e00 <__cxa_atexit+0x14>
 8083df4:	460a      	mov	r2, r1
 8083df6:	4601      	mov	r1, r0
 8083df8:	2002      	movs	r0, #2
 8083dfa:	f3af 8000 	nop.w
 8083dfe:	bd10      	pop	{r4, pc}
 8083e00:	4620      	mov	r0, r4
 8083e02:	bd10      	pop	{r4, pc}
 8083e04:	00000000 	.word	0x00000000

08083e08 <_localeconv_r>:
 8083e08:	4800      	ldr	r0, [pc, #0]	; (8083e0c <_localeconv_r+0x4>)
 8083e0a:	4770      	bx	lr
 8083e0c:	20000078 	.word	0x20000078

08083e10 <memcpy>:
 8083e10:	b510      	push	{r4, lr}
 8083e12:	1e43      	subs	r3, r0, #1
 8083e14:	440a      	add	r2, r1
 8083e16:	4291      	cmp	r1, r2
 8083e18:	d004      	beq.n	8083e24 <memcpy+0x14>
 8083e1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8083e1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8083e22:	e7f8      	b.n	8083e16 <memcpy+0x6>
 8083e24:	bd10      	pop	{r4, pc}

08083e26 <memset>:
 8083e26:	4603      	mov	r3, r0
 8083e28:	4402      	add	r2, r0
 8083e2a:	4293      	cmp	r3, r2
 8083e2c:	d002      	beq.n	8083e34 <memset+0xe>
 8083e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8083e32:	e7fa      	b.n	8083e2a <memset+0x4>
 8083e34:	4770      	bx	lr
	...

08083e38 <srand>:
 8083e38:	b538      	push	{r3, r4, r5, lr}
 8083e3a:	4b12      	ldr	r3, [pc, #72]	; (8083e84 <srand+0x4c>)
 8083e3c:	4605      	mov	r5, r0
 8083e3e:	681c      	ldr	r4, [r3, #0]
 8083e40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8083e42:	b9d3      	cbnz	r3, 8083e7a <srand+0x42>
 8083e44:	2018      	movs	r0, #24
 8083e46:	f7fd f8fb 	bl	8081040 <malloc>
 8083e4a:	f243 330e 	movw	r3, #13070	; 0x330e
 8083e4e:	63a0      	str	r0, [r4, #56]	; 0x38
 8083e50:	8003      	strh	r3, [r0, #0]
 8083e52:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8083e56:	8043      	strh	r3, [r0, #2]
 8083e58:	f241 2334 	movw	r3, #4660	; 0x1234
 8083e5c:	8083      	strh	r3, [r0, #4]
 8083e5e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8083e62:	80c3      	strh	r3, [r0, #6]
 8083e64:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8083e68:	8103      	strh	r3, [r0, #8]
 8083e6a:	2305      	movs	r3, #5
 8083e6c:	8143      	strh	r3, [r0, #10]
 8083e6e:	230b      	movs	r3, #11
 8083e70:	8183      	strh	r3, [r0, #12]
 8083e72:	2201      	movs	r2, #1
 8083e74:	2300      	movs	r3, #0
 8083e76:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8083e7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8083e7c:	2200      	movs	r2, #0
 8083e7e:	611d      	str	r5, [r3, #16]
 8083e80:	615a      	str	r2, [r3, #20]
 8083e82:	bd38      	pop	{r3, r4, r5, pc}
 8083e84:	20000074 	.word	0x20000074

08083e88 <strcpy>:
 8083e88:	4603      	mov	r3, r0
 8083e8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8083e8e:	f803 2b01 	strb.w	r2, [r3], #1
 8083e92:	2a00      	cmp	r2, #0
 8083e94:	d1f9      	bne.n	8083e8a <strcpy+0x2>
 8083e96:	4770      	bx	lr

08083e98 <strdup>:
 8083e98:	4b02      	ldr	r3, [pc, #8]	; (8083ea4 <strdup+0xc>)
 8083e9a:	4601      	mov	r1, r0
 8083e9c:	6818      	ldr	r0, [r3, #0]
 8083e9e:	f000 b803 	b.w	8083ea8 <_strdup_r>
 8083ea2:	bf00      	nop
 8083ea4:	20000074 	.word	0x20000074

08083ea8 <_strdup_r>:
 8083ea8:	b570      	push	{r4, r5, r6, lr}
 8083eaa:	4606      	mov	r6, r0
 8083eac:	4608      	mov	r0, r1
 8083eae:	460c      	mov	r4, r1
 8083eb0:	f000 f80d 	bl	8083ece <strlen>
 8083eb4:	1c45      	adds	r5, r0, #1
 8083eb6:	4629      	mov	r1, r5
 8083eb8:	4630      	mov	r0, r6
 8083eba:	f7fd f8e1 	bl	8081080 <_malloc_r>
 8083ebe:	4606      	mov	r6, r0
 8083ec0:	b118      	cbz	r0, 8083eca <_strdup_r+0x22>
 8083ec2:	462a      	mov	r2, r5
 8083ec4:	4621      	mov	r1, r4
 8083ec6:	f7ff ffa3 	bl	8083e10 <memcpy>
 8083eca:	4630      	mov	r0, r6
 8083ecc:	bd70      	pop	{r4, r5, r6, pc}

08083ece <strlen>:
 8083ece:	4603      	mov	r3, r0
 8083ed0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8083ed4:	2a00      	cmp	r2, #0
 8083ed6:	d1fb      	bne.n	8083ed0 <strlen+0x2>
 8083ed8:	1a18      	subs	r0, r3, r0
 8083eda:	3801      	subs	r0, #1
 8083edc:	4770      	bx	lr

08083ede <strncmp>:
 8083ede:	b530      	push	{r4, r5, lr}
 8083ee0:	b182      	cbz	r2, 8083f04 <strncmp+0x26>
 8083ee2:	1e45      	subs	r5, r0, #1
 8083ee4:	3901      	subs	r1, #1
 8083ee6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8083eea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8083eee:	42a3      	cmp	r3, r4
 8083ef0:	d106      	bne.n	8083f00 <strncmp+0x22>
 8083ef2:	43ec      	mvns	r4, r5
 8083ef4:	4414      	add	r4, r2
 8083ef6:	42e0      	cmn	r0, r4
 8083ef8:	d001      	beq.n	8083efe <strncmp+0x20>
 8083efa:	2b00      	cmp	r3, #0
 8083efc:	d1f3      	bne.n	8083ee6 <strncmp+0x8>
 8083efe:	461c      	mov	r4, r3
 8083f00:	1b18      	subs	r0, r3, r4
 8083f02:	bd30      	pop	{r4, r5, pc}
 8083f04:	4610      	mov	r0, r2
 8083f06:	bd30      	pop	{r4, r5, pc}

08083f08 <sulp>:
 8083f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8083f0c:	460f      	mov	r7, r1
 8083f0e:	4690      	mov	r8, r2
 8083f10:	f001 fc98 	bl	8085844 <__ulp>
 8083f14:	4604      	mov	r4, r0
 8083f16:	460d      	mov	r5, r1
 8083f18:	f1b8 0f00 	cmp.w	r8, #0
 8083f1c:	d011      	beq.n	8083f42 <sulp+0x3a>
 8083f1e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8083f22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8083f26:	2b00      	cmp	r3, #0
 8083f28:	dd0b      	ble.n	8083f42 <sulp+0x3a>
 8083f2a:	051b      	lsls	r3, r3, #20
 8083f2c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8083f30:	2400      	movs	r4, #0
 8083f32:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8083f36:	4622      	mov	r2, r4
 8083f38:	462b      	mov	r3, r5
 8083f3a:	f7fe fff5 	bl	8082f28 <__aeabi_dmul>
 8083f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8083f42:	4620      	mov	r0, r4
 8083f44:	4629      	mov	r1, r5
 8083f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8083f4a:	0000      	movs	r0, r0
 8083f4c:	0000      	movs	r0, r0
	...

08083f50 <_strtod_r>:
 8083f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8083f54:	4682      	mov	sl, r0
 8083f56:	460c      	mov	r4, r1
 8083f58:	b09d      	sub	sp, #116	; 0x74
 8083f5a:	2300      	movs	r3, #0
 8083f5c:	9213      	str	r2, [sp, #76]	; 0x4c
 8083f5e:	9318      	str	r3, [sp, #96]	; 0x60
 8083f60:	f04f 0800 	mov.w	r8, #0
 8083f64:	f04f 0900 	mov.w	r9, #0
 8083f68:	9117      	str	r1, [sp, #92]	; 0x5c
 8083f6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8083f6c:	781a      	ldrb	r2, [r3, #0]
 8083f6e:	2a0d      	cmp	r2, #13
 8083f70:	d805      	bhi.n	8083f7e <_strtod_r+0x2e>
 8083f72:	2a09      	cmp	r2, #9
 8083f74:	d213      	bcs.n	8083f9e <_strtod_r+0x4e>
 8083f76:	2a00      	cmp	r2, #0
 8083f78:	f000 81ad 	beq.w	80842d6 <_strtod_r+0x386>
 8083f7c:	e012      	b.n	8083fa4 <_strtod_r+0x54>
 8083f7e:	2a2b      	cmp	r2, #43	; 0x2b
 8083f80:	d004      	beq.n	8083f8c <_strtod_r+0x3c>
 8083f82:	2a2d      	cmp	r2, #45	; 0x2d
 8083f84:	d004      	beq.n	8083f90 <_strtod_r+0x40>
 8083f86:	2a20      	cmp	r2, #32
 8083f88:	d10c      	bne.n	8083fa4 <_strtod_r+0x54>
 8083f8a:	e008      	b.n	8083f9e <_strtod_r+0x4e>
 8083f8c:	2200      	movs	r2, #0
 8083f8e:	e000      	b.n	8083f92 <_strtod_r+0x42>
 8083f90:	2201      	movs	r2, #1
 8083f92:	920c      	str	r2, [sp, #48]	; 0x30
 8083f94:	1c5a      	adds	r2, r3, #1
 8083f96:	9217      	str	r2, [sp, #92]	; 0x5c
 8083f98:	785b      	ldrb	r3, [r3, #1]
 8083f9a:	b92b      	cbnz	r3, 8083fa8 <_strtod_r+0x58>
 8083f9c:	e19b      	b.n	80842d6 <_strtod_r+0x386>
 8083f9e:	3301      	adds	r3, #1
 8083fa0:	9317      	str	r3, [sp, #92]	; 0x5c
 8083fa2:	e7e2      	b.n	8083f6a <_strtod_r+0x1a>
 8083fa4:	2300      	movs	r3, #0
 8083fa6:	930c      	str	r3, [sp, #48]	; 0x30
 8083fa8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8083faa:	782b      	ldrb	r3, [r5, #0]
 8083fac:	2b30      	cmp	r3, #48	; 0x30
 8083fae:	d15c      	bne.n	808406a <_strtod_r+0x11a>
 8083fb0:	786b      	ldrb	r3, [r5, #1]
 8083fb2:	2b58      	cmp	r3, #88	; 0x58
 8083fb4:	d001      	beq.n	8083fba <_strtod_r+0x6a>
 8083fb6:	2b78      	cmp	r3, #120	; 0x78
 8083fb8:	d14c      	bne.n	8084054 <_strtod_r+0x104>
 8083fba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8083fbc:	4aa8      	ldr	r2, [pc, #672]	; (8084260 <_strtod_r+0x310>)
 8083fbe:	9301      	str	r3, [sp, #4]
 8083fc0:	ab18      	add	r3, sp, #96	; 0x60
 8083fc2:	9300      	str	r3, [sp, #0]
 8083fc4:	a917      	add	r1, sp, #92	; 0x5c
 8083fc6:	ab19      	add	r3, sp, #100	; 0x64
 8083fc8:	4650      	mov	r0, sl
 8083fca:	f000 fea4 	bl	8084d16 <__gethex>
 8083fce:	f010 0607 	ands.w	r6, r0, #7
 8083fd2:	4604      	mov	r4, r0
 8083fd4:	f000 8585 	beq.w	8084ae2 <_strtod_r+0xb92>
 8083fd8:	2e06      	cmp	r6, #6
 8083fda:	d105      	bne.n	8083fe8 <_strtod_r+0x98>
 8083fdc:	3501      	adds	r5, #1
 8083fde:	2300      	movs	r3, #0
 8083fe0:	9517      	str	r5, [sp, #92]	; 0x5c
 8083fe2:	930c      	str	r3, [sp, #48]	; 0x30
 8083fe4:	f000 bd7d 	b.w	8084ae2 <_strtod_r+0xb92>
 8083fe8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8083fea:	b13a      	cbz	r2, 8083ffc <_strtod_r+0xac>
 8083fec:	2135      	movs	r1, #53	; 0x35
 8083fee:	a81a      	add	r0, sp, #104	; 0x68
 8083ff0:	f001 fd0f 	bl	8085a12 <__copybits>
 8083ff4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8083ff6:	4650      	mov	r0, sl
 8083ff8:	f001 f994 	bl	8085324 <_Bfree>
 8083ffc:	2e06      	cmp	r6, #6
 8083ffe:	d822      	bhi.n	8084046 <_strtod_r+0xf6>
 8084000:	e8df f006 	tbb	[pc, r6]
 8084004:	18080d04 	.word	0x18080d04
 8084008:	0d1d      	.short	0x0d1d
 808400a:	04          	.byte	0x04
 808400b:	00          	.byte	0x00
 808400c:	f04f 0900 	mov.w	r9, #0
 8084010:	46c8      	mov	r8, r9
 8084012:	e018      	b.n	8084046 <_strtod_r+0xf6>
 8084014:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8084018:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 808401c:	e013      	b.n	8084046 <_strtod_r+0xf6>
 808401e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8084020:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8084022:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8084026:	f202 4233 	addw	r2, r2, #1075	; 0x433
 808402a:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808402e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8084032:	e008      	b.n	8084046 <_strtod_r+0xf6>
 8084034:	f8df 922c 	ldr.w	r9, [pc, #556]	; 8084264 <_strtod_r+0x314>
 8084038:	f04f 0800 	mov.w	r8, #0
 808403c:	e003      	b.n	8084046 <_strtod_r+0xf6>
 808403e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8084042:	f04f 38ff 	mov.w	r8, #4294967295
 8084046:	0721      	lsls	r1, r4, #28
 8084048:	f140 854b 	bpl.w	8084ae2 <_strtod_r+0xb92>
 808404c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8084050:	f000 bd47 	b.w	8084ae2 <_strtod_r+0xb92>
 8084054:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8084056:	1c5a      	adds	r2, r3, #1
 8084058:	9217      	str	r2, [sp, #92]	; 0x5c
 808405a:	785b      	ldrb	r3, [r3, #1]
 808405c:	2b30      	cmp	r3, #48	; 0x30
 808405e:	d0f9      	beq.n	8084054 <_strtod_r+0x104>
 8084060:	2b00      	cmp	r3, #0
 8084062:	f000 853e 	beq.w	8084ae2 <_strtod_r+0xb92>
 8084066:	2301      	movs	r3, #1
 8084068:	e000      	b.n	808406c <_strtod_r+0x11c>
 808406a:	2300      	movs	r3, #0
 808406c:	9305      	str	r3, [sp, #20]
 808406e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8084070:	220a      	movs	r2, #10
 8084072:	9306      	str	r3, [sp, #24]
 8084074:	2300      	movs	r3, #0
 8084076:	469b      	mov	fp, r3
 8084078:	9302      	str	r3, [sp, #8]
 808407a:	9304      	str	r3, [sp, #16]
 808407c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 808407e:	782e      	ldrb	r6, [r5, #0]
 8084080:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8084084:	b2d9      	uxtb	r1, r3
 8084086:	2909      	cmp	r1, #9
 8084088:	d811      	bhi.n	80840ae <_strtod_r+0x15e>
 808408a:	f1bb 0f08 	cmp.w	fp, #8
 808408e:	bfd5      	itete	le
 8084090:	9904      	ldrle	r1, [sp, #16]
 8084092:	9902      	ldrgt	r1, [sp, #8]
 8084094:	fb02 3301 	mlale	r3, r2, r1, r3
 8084098:	fb02 3301 	mlagt	r3, r2, r1, r3
 808409c:	f105 0501 	add.w	r5, r5, #1
 80840a0:	bfd4      	ite	le
 80840a2:	9304      	strle	r3, [sp, #16]
 80840a4:	9302      	strgt	r3, [sp, #8]
 80840a6:	f10b 0b01 	add.w	fp, fp, #1
 80840aa:	9517      	str	r5, [sp, #92]	; 0x5c
 80840ac:	e7e6      	b.n	808407c <_strtod_r+0x12c>
 80840ae:	4650      	mov	r0, sl
 80840b0:	f7ff feaa 	bl	8083e08 <_localeconv_r>
 80840b4:	6807      	ldr	r7, [r0, #0]
 80840b6:	4650      	mov	r0, sl
 80840b8:	f7ff fea6 	bl	8083e08 <_localeconv_r>
 80840bc:	6800      	ldr	r0, [r0, #0]
 80840be:	f7ff ff06 	bl	8083ece <strlen>
 80840c2:	4639      	mov	r1, r7
 80840c4:	4602      	mov	r2, r0
 80840c6:	4628      	mov	r0, r5
 80840c8:	f7ff ff09 	bl	8083ede <strncmp>
 80840cc:	4607      	mov	r7, r0
 80840ce:	b128      	cbz	r0, 80840dc <_strtod_r+0x18c>
 80840d0:	2000      	movs	r0, #0
 80840d2:	4633      	mov	r3, r6
 80840d4:	465d      	mov	r5, fp
 80840d6:	4602      	mov	r2, r0
 80840d8:	4601      	mov	r1, r0
 80840da:	e05a      	b.n	8084192 <_strtod_r+0x242>
 80840dc:	4650      	mov	r0, sl
 80840de:	f7ff fe93 	bl	8083e08 <_localeconv_r>
 80840e2:	6800      	ldr	r0, [r0, #0]
 80840e4:	f7ff fef3 	bl	8083ece <strlen>
 80840e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80840ea:	181a      	adds	r2, r3, r0
 80840ec:	9217      	str	r2, [sp, #92]	; 0x5c
 80840ee:	5c1b      	ldrb	r3, [r3, r0]
 80840f0:	f1bb 0f00 	cmp.w	fp, #0
 80840f4:	d145      	bne.n	8084182 <_strtod_r+0x232>
 80840f6:	4658      	mov	r0, fp
 80840f8:	2b30      	cmp	r3, #48	; 0x30
 80840fa:	d105      	bne.n	8084108 <_strtod_r+0x1b8>
 80840fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80840fe:	3001      	adds	r0, #1
 8084100:	1c5a      	adds	r2, r3, #1
 8084102:	9217      	str	r2, [sp, #92]	; 0x5c
 8084104:	785b      	ldrb	r3, [r3, #1]
 8084106:	e7f7      	b.n	80840f8 <_strtod_r+0x1a8>
 8084108:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 808410c:	2a08      	cmp	r2, #8
 808410e:	d846      	bhi.n	808419e <_strtod_r+0x24e>
 8084110:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8084112:	9206      	str	r2, [sp, #24]
 8084114:	4602      	mov	r2, r0
 8084116:	2000      	movs	r0, #0
 8084118:	4605      	mov	r5, r0
 808411a:	3b30      	subs	r3, #48	; 0x30
 808411c:	f100 0101 	add.w	r1, r0, #1
 8084120:	d029      	beq.n	8084176 <_strtod_r+0x226>
 8084122:	440a      	add	r2, r1
 8084124:	4629      	mov	r1, r5
 8084126:	eb05 0c00 	add.w	ip, r5, r0
 808412a:	260a      	movs	r6, #10
 808412c:	4561      	cmp	r1, ip
 808412e:	d00f      	beq.n	8084150 <_strtod_r+0x200>
 8084130:	3101      	adds	r1, #1
 8084132:	f101 3eff 	add.w	lr, r1, #4294967295
 8084136:	f1be 0f08 	cmp.w	lr, #8
 808413a:	dc03      	bgt.n	8084144 <_strtod_r+0x1f4>
 808413c:	9f04      	ldr	r7, [sp, #16]
 808413e:	4377      	muls	r7, r6
 8084140:	9704      	str	r7, [sp, #16]
 8084142:	e7f3      	b.n	808412c <_strtod_r+0x1dc>
 8084144:	2910      	cmp	r1, #16
 8084146:	bfde      	ittt	le
 8084148:	9f02      	ldrle	r7, [sp, #8]
 808414a:	4377      	mulle	r7, r6
 808414c:	9702      	strle	r7, [sp, #8]
 808414e:	e7ed      	b.n	808412c <_strtod_r+0x1dc>
 8084150:	4428      	add	r0, r5
 8084152:	2808      	cmp	r0, #8
 8084154:	f100 0501 	add.w	r5, r0, #1
 8084158:	dc05      	bgt.n	8084166 <_strtod_r+0x216>
 808415a:	9804      	ldr	r0, [sp, #16]
 808415c:	210a      	movs	r1, #10
 808415e:	fb01 3300 	mla	r3, r1, r0, r3
 8084162:	9304      	str	r3, [sp, #16]
 8084164:	e006      	b.n	8084174 <_strtod_r+0x224>
 8084166:	2d10      	cmp	r5, #16
 8084168:	bfdf      	itttt	le
 808416a:	9802      	ldrle	r0, [sp, #8]
 808416c:	210a      	movle	r1, #10
 808416e:	fb01 3300 	mlale	r3, r1, r0, r3
 8084172:	9302      	strle	r3, [sp, #8]
 8084174:	2100      	movs	r1, #0
 8084176:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8084178:	1c58      	adds	r0, r3, #1
 808417a:	9017      	str	r0, [sp, #92]	; 0x5c
 808417c:	785b      	ldrb	r3, [r3, #1]
 808417e:	4608      	mov	r0, r1
 8084180:	e002      	b.n	8084188 <_strtod_r+0x238>
 8084182:	465d      	mov	r5, fp
 8084184:	4638      	mov	r0, r7
 8084186:	463a      	mov	r2, r7
 8084188:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 808418c:	2909      	cmp	r1, #9
 808418e:	d9c4      	bls.n	808411a <_strtod_r+0x1ca>
 8084190:	2101      	movs	r1, #1
 8084192:	2b65      	cmp	r3, #101	; 0x65
 8084194:	d001      	beq.n	808419a <_strtod_r+0x24a>
 8084196:	2b45      	cmp	r3, #69	; 0x45
 8084198:	d14f      	bne.n	808423a <_strtod_r+0x2ea>
 808419a:	b96d      	cbnz	r5, 80841b8 <_strtod_r+0x268>
 808419c:	e004      	b.n	80841a8 <_strtod_r+0x258>
 808419e:	2b65      	cmp	r3, #101	; 0x65
 80841a0:	f040 84ad 	bne.w	8084afe <_strtod_r+0xbae>
 80841a4:	2200      	movs	r2, #0
 80841a6:	2101      	movs	r1, #1
 80841a8:	b928      	cbnz	r0, 80841b6 <_strtod_r+0x266>
 80841aa:	9b05      	ldr	r3, [sp, #20]
 80841ac:	2b00      	cmp	r3, #0
 80841ae:	f000 8092 	beq.w	80842d6 <_strtod_r+0x386>
 80841b2:	4605      	mov	r5, r0
 80841b4:	e000      	b.n	80841b8 <_strtod_r+0x268>
 80841b6:	2500      	movs	r5, #0
 80841b8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80841ba:	1c63      	adds	r3, r4, #1
 80841bc:	9317      	str	r3, [sp, #92]	; 0x5c
 80841be:	7863      	ldrb	r3, [r4, #1]
 80841c0:	2b2b      	cmp	r3, #43	; 0x2b
 80841c2:	d006      	beq.n	80841d2 <_strtod_r+0x282>
 80841c4:	2b2d      	cmp	r3, #45	; 0x2d
 80841c6:	d002      	beq.n	80841ce <_strtod_r+0x27e>
 80841c8:	2600      	movs	r6, #0
 80841ca:	9603      	str	r6, [sp, #12]
 80841cc:	e006      	b.n	80841dc <_strtod_r+0x28c>
 80841ce:	2301      	movs	r3, #1
 80841d0:	e000      	b.n	80841d4 <_strtod_r+0x284>
 80841d2:	2300      	movs	r3, #0
 80841d4:	9303      	str	r3, [sp, #12]
 80841d6:	1ca3      	adds	r3, r4, #2
 80841d8:	9317      	str	r3, [sp, #92]	; 0x5c
 80841da:	78a3      	ldrb	r3, [r4, #2]
 80841dc:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80841e0:	2e09      	cmp	r6, #9
 80841e2:	d829      	bhi.n	8084238 <_strtod_r+0x2e8>
 80841e4:	2b30      	cmp	r3, #48	; 0x30
 80841e6:	d104      	bne.n	80841f2 <_strtod_r+0x2a2>
 80841e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80841ea:	1c5e      	adds	r6, r3, #1
 80841ec:	9617      	str	r6, [sp, #92]	; 0x5c
 80841ee:	785b      	ldrb	r3, [r3, #1]
 80841f0:	e7f8      	b.n	80841e4 <_strtod_r+0x294>
 80841f2:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 80841f6:	2e08      	cmp	r6, #8
 80841f8:	d81f      	bhi.n	808423a <_strtod_r+0x2ea>
 80841fa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80841fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8084200:	461f      	mov	r7, r3
 8084202:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8084204:	1c5e      	adds	r6, r3, #1
 8084206:	9617      	str	r6, [sp, #92]	; 0x5c
 8084208:	785b      	ldrb	r3, [r3, #1]
 808420a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 808420e:	f1bc 0f09 	cmp.w	ip, #9
 8084212:	d805      	bhi.n	8084220 <_strtod_r+0x2d0>
 8084214:	260a      	movs	r6, #10
 8084216:	fb06 3e0e 	mla	lr, r6, lr, r3
 808421a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 808421e:	e7f0      	b.n	8084202 <_strtod_r+0x2b2>
 8084220:	1bf6      	subs	r6, r6, r7
 8084222:	2e08      	cmp	r6, #8
 8084224:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8084228:	dc02      	bgt.n	8084230 <_strtod_r+0x2e0>
 808422a:	4576      	cmp	r6, lr
 808422c:	bfa8      	it	ge
 808422e:	4676      	movge	r6, lr
 8084230:	9f03      	ldr	r7, [sp, #12]
 8084232:	b11f      	cbz	r7, 808423c <_strtod_r+0x2ec>
 8084234:	4276      	negs	r6, r6
 8084236:	e001      	b.n	808423c <_strtod_r+0x2ec>
 8084238:	9417      	str	r4, [sp, #92]	; 0x5c
 808423a:	2600      	movs	r6, #0
 808423c:	2d00      	cmp	r5, #0
 808423e:	d152      	bne.n	80842e6 <_strtod_r+0x396>
 8084240:	2800      	cmp	r0, #0
 8084242:	f040 844e 	bne.w	8084ae2 <_strtod_r+0xb92>
 8084246:	9a05      	ldr	r2, [sp, #20]
 8084248:	2a00      	cmp	r2, #0
 808424a:	f040 844a 	bne.w	8084ae2 <_strtod_r+0xb92>
 808424e:	2900      	cmp	r1, #0
 8084250:	d141      	bne.n	80842d6 <_strtod_r+0x386>
 8084252:	2b4e      	cmp	r3, #78	; 0x4e
 8084254:	d020      	beq.n	8084298 <_strtod_r+0x348>
 8084256:	dc07      	bgt.n	8084268 <_strtod_r+0x318>
 8084258:	2b49      	cmp	r3, #73	; 0x49
 808425a:	d00a      	beq.n	8084272 <_strtod_r+0x322>
 808425c:	e03b      	b.n	80842d6 <_strtod_r+0x386>
 808425e:	bf00      	nop
 8084260:	08085ffc 	.word	0x08085ffc
 8084264:	7ff00000 	.word	0x7ff00000
 8084268:	2b69      	cmp	r3, #105	; 0x69
 808426a:	d002      	beq.n	8084272 <_strtod_r+0x322>
 808426c:	2b6e      	cmp	r3, #110	; 0x6e
 808426e:	d013      	beq.n	8084298 <_strtod_r+0x348>
 8084270:	e031      	b.n	80842d6 <_strtod_r+0x386>
 8084272:	49aa      	ldr	r1, [pc, #680]	; (808451c <_strtod_r+0x5cc>)
 8084274:	a817      	add	r0, sp, #92	; 0x5c
 8084276:	f000 ff7f 	bl	8085178 <__match>
 808427a:	b360      	cbz	r0, 80842d6 <_strtod_r+0x386>
 808427c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808427e:	49a8      	ldr	r1, [pc, #672]	; (8084520 <_strtod_r+0x5d0>)
 8084280:	3b01      	subs	r3, #1
 8084282:	a817      	add	r0, sp, #92	; 0x5c
 8084284:	9317      	str	r3, [sp, #92]	; 0x5c
 8084286:	f000 ff77 	bl	8085178 <__match>
 808428a:	b910      	cbnz	r0, 8084292 <_strtod_r+0x342>
 808428c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808428e:	3301      	adds	r3, #1
 8084290:	9317      	str	r3, [sp, #92]	; 0x5c
 8084292:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 808453c <_strtod_r+0x5ec>
 8084296:	e01a      	b.n	80842ce <_strtod_r+0x37e>
 8084298:	49a2      	ldr	r1, [pc, #648]	; (8084524 <_strtod_r+0x5d4>)
 808429a:	a817      	add	r0, sp, #92	; 0x5c
 808429c:	f000 ff6c 	bl	8085178 <__match>
 80842a0:	b1c8      	cbz	r0, 80842d6 <_strtod_r+0x386>
 80842a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80842a4:	781b      	ldrb	r3, [r3, #0]
 80842a6:	2b28      	cmp	r3, #40	; 0x28
 80842a8:	d10f      	bne.n	80842ca <_strtod_r+0x37a>
 80842aa:	aa1a      	add	r2, sp, #104	; 0x68
 80842ac:	499e      	ldr	r1, [pc, #632]	; (8084528 <_strtod_r+0x5d8>)
 80842ae:	a817      	add	r0, sp, #92	; 0x5c
 80842b0:	f000 ff75 	bl	808519e <__hexnan>
 80842b4:	2805      	cmp	r0, #5
 80842b6:	d108      	bne.n	80842ca <_strtod_r+0x37a>
 80842b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80842ba:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80842be:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80842c2:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80842c6:	f000 bc0c 	b.w	8084ae2 <_strtod_r+0xb92>
 80842ca:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8084540 <_strtod_r+0x5f0>
 80842ce:	f04f 0800 	mov.w	r8, #0
 80842d2:	f000 bc06 	b.w	8084ae2 <_strtod_r+0xb92>
 80842d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80842d8:	9417      	str	r4, [sp, #92]	; 0x5c
 80842da:	2b00      	cmp	r3, #0
 80842dc:	f000 840c 	beq.w	8084af8 <_strtod_r+0xba8>
 80842e0:	2300      	movs	r3, #0
 80842e2:	930c      	str	r3, [sp, #48]	; 0x30
 80842e4:	e3ff      	b.n	8084ae6 <_strtod_r+0xb96>
 80842e6:	462c      	mov	r4, r5
 80842e8:	f1bb 0f00 	cmp.w	fp, #0
 80842ec:	bf08      	it	eq
 80842ee:	46ab      	moveq	fp, r5
 80842f0:	9804      	ldr	r0, [sp, #16]
 80842f2:	2d10      	cmp	r5, #16
 80842f4:	bfa8      	it	ge
 80842f6:	2410      	movge	r4, #16
 80842f8:	1ab7      	subs	r7, r6, r2
 80842fa:	f7fe fd9f 	bl	8082e3c <__aeabi_ui2d>
 80842fe:	2c09      	cmp	r4, #9
 8084300:	4680      	mov	r8, r0
 8084302:	4689      	mov	r9, r1
 8084304:	dd13      	ble.n	808432e <_strtod_r+0x3de>
 8084306:	4b89      	ldr	r3, [pc, #548]	; (808452c <_strtod_r+0x5dc>)
 8084308:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 808430c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8084310:	f7fe fe0a 	bl	8082f28 <__aeabi_dmul>
 8084314:	4680      	mov	r8, r0
 8084316:	9802      	ldr	r0, [sp, #8]
 8084318:	4689      	mov	r9, r1
 808431a:	f7fe fd8f 	bl	8082e3c <__aeabi_ui2d>
 808431e:	4602      	mov	r2, r0
 8084320:	460b      	mov	r3, r1
 8084322:	4640      	mov	r0, r8
 8084324:	4649      	mov	r1, r9
 8084326:	f7fe fc4d 	bl	8082bc4 <__adddf3>
 808432a:	4680      	mov	r8, r0
 808432c:	4689      	mov	r9, r1
 808432e:	2d0f      	cmp	r5, #15
 8084330:	dc33      	bgt.n	808439a <_strtod_r+0x44a>
 8084332:	2f00      	cmp	r7, #0
 8084334:	f000 83d5 	beq.w	8084ae2 <_strtod_r+0xb92>
 8084338:	dd22      	ble.n	8084380 <_strtod_r+0x430>
 808433a:	2f16      	cmp	r7, #22
 808433c:	dc07      	bgt.n	808434e <_strtod_r+0x3fe>
 808433e:	4d7b      	ldr	r5, [pc, #492]	; (808452c <_strtod_r+0x5dc>)
 8084340:	4642      	mov	r2, r8
 8084342:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 8084346:	464b      	mov	r3, r9
 8084348:	e9d1 0100 	ldrd	r0, r1, [r1]
 808434c:	e013      	b.n	8084376 <_strtod_r+0x426>
 808434e:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8084352:	429f      	cmp	r7, r3
 8084354:	dc21      	bgt.n	808439a <_strtod_r+0x44a>
 8084356:	4c75      	ldr	r4, [pc, #468]	; (808452c <_strtod_r+0x5dc>)
 8084358:	f1c5 050f 	rsb	r5, r5, #15
 808435c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8084360:	1b7d      	subs	r5, r7, r5
 8084362:	4642      	mov	r2, r8
 8084364:	e9d1 0100 	ldrd	r0, r1, [r1]
 8084368:	464b      	mov	r3, r9
 808436a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 808436e:	f7fe fddb 	bl	8082f28 <__aeabi_dmul>
 8084372:	e9d4 2300 	ldrd	r2, r3, [r4]
 8084376:	f7fe fdd7 	bl	8082f28 <__aeabi_dmul>
 808437a:	4680      	mov	r8, r0
 808437c:	4689      	mov	r9, r1
 808437e:	e3b0      	b.n	8084ae2 <_strtod_r+0xb92>
 8084380:	f117 0f16 	cmn.w	r7, #22
 8084384:	db09      	blt.n	808439a <_strtod_r+0x44a>
 8084386:	4d69      	ldr	r5, [pc, #420]	; (808452c <_strtod_r+0x5dc>)
 8084388:	4640      	mov	r0, r8
 808438a:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
 808438e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084392:	4649      	mov	r1, r9
 8084394:	f7fe fef2 	bl	808317c <__aeabi_ddiv>
 8084398:	e7ef      	b.n	808437a <_strtod_r+0x42a>
 808439a:	1b2c      	subs	r4, r5, r4
 808439c:	443c      	add	r4, r7
 808439e:	2c00      	cmp	r4, #0
 80843a0:	dd5d      	ble.n	808445e <_strtod_r+0x50e>
 80843a2:	f014 010f 	ands.w	r1, r4, #15
 80843a6:	d00a      	beq.n	80843be <_strtod_r+0x46e>
 80843a8:	4b60      	ldr	r3, [pc, #384]	; (808452c <_strtod_r+0x5dc>)
 80843aa:	4642      	mov	r2, r8
 80843ac:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80843b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80843b4:	464b      	mov	r3, r9
 80843b6:	f7fe fdb7 	bl	8082f28 <__aeabi_dmul>
 80843ba:	4680      	mov	r8, r0
 80843bc:	4689      	mov	r9, r1
 80843be:	f034 040f 	bics.w	r4, r4, #15
 80843c2:	f000 80c1 	beq.w	8084548 <_strtod_r+0x5f8>
 80843c6:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 80843ca:	dd0f      	ble.n	80843ec <_strtod_r+0x49c>
 80843cc:	f04f 0b00 	mov.w	fp, #0
 80843d0:	f8cd b008 	str.w	fp, [sp, #8]
 80843d4:	f8cd b014 	str.w	fp, [sp, #20]
 80843d8:	f8cd b010 	str.w	fp, [sp, #16]
 80843dc:	2322      	movs	r3, #34	; 0x22
 80843de:	f8ca 3000 	str.w	r3, [sl]
 80843e2:	f8df 9158 	ldr.w	r9, [pc, #344]	; 808453c <_strtod_r+0x5ec>
 80843e6:	f04f 0800 	mov.w	r8, #0
 80843ea:	e189      	b.n	8084700 <_strtod_r+0x7b0>
 80843ec:	4640      	mov	r0, r8
 80843ee:	4649      	mov	r1, r9
 80843f0:	2300      	movs	r3, #0
 80843f2:	4e4f      	ldr	r6, [pc, #316]	; (8084530 <_strtod_r+0x5e0>)
 80843f4:	1124      	asrs	r4, r4, #4
 80843f6:	9302      	str	r3, [sp, #8]
 80843f8:	2c01      	cmp	r4, #1
 80843fa:	dd0c      	ble.n	8084416 <_strtod_r+0x4c6>
 80843fc:	07e2      	lsls	r2, r4, #31
 80843fe:	d504      	bpl.n	808440a <_strtod_r+0x4ba>
 8084400:	e9d6 2300 	ldrd	r2, r3, [r6]
 8084404:	f7fe fd90 	bl	8082f28 <__aeabi_dmul>
 8084408:	2301      	movs	r3, #1
 808440a:	9a02      	ldr	r2, [sp, #8]
 808440c:	1064      	asrs	r4, r4, #1
 808440e:	3201      	adds	r2, #1
 8084410:	9202      	str	r2, [sp, #8]
 8084412:	3608      	adds	r6, #8
 8084414:	e7f0      	b.n	80843f8 <_strtod_r+0x4a8>
 8084416:	b10b      	cbz	r3, 808441c <_strtod_r+0x4cc>
 8084418:	4680      	mov	r8, r0
 808441a:	4689      	mov	r9, r1
 808441c:	4b44      	ldr	r3, [pc, #272]	; (8084530 <_strtod_r+0x5e0>)
 808441e:	9a02      	ldr	r2, [sp, #8]
 8084420:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8084424:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8084428:	e9d1 0100 	ldrd	r0, r1, [r1]
 808442c:	4642      	mov	r2, r8
 808442e:	464b      	mov	r3, r9
 8084430:	f7fe fd7a 	bl	8082f28 <__aeabi_dmul>
 8084434:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8084438:	4689      	mov	r9, r1
 808443a:	460a      	mov	r2, r1
 808443c:	0d1b      	lsrs	r3, r3, #20
 808443e:	493d      	ldr	r1, [pc, #244]	; (8084534 <_strtod_r+0x5e4>)
 8084440:	051b      	lsls	r3, r3, #20
 8084442:	428b      	cmp	r3, r1
 8084444:	4680      	mov	r8, r0
 8084446:	d8c1      	bhi.n	80843cc <_strtod_r+0x47c>
 8084448:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 808444c:	428b      	cmp	r3, r1
 808444e:	bf86      	itte	hi
 8084450:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 8084544 <_strtod_r+0x5f4>
 8084454:	f04f 38ff 	movhi.w	r8, #4294967295
 8084458:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 808445c:	e074      	b.n	8084548 <_strtod_r+0x5f8>
 808445e:	d073      	beq.n	8084548 <_strtod_r+0x5f8>
 8084460:	4264      	negs	r4, r4
 8084462:	f014 020f 	ands.w	r2, r4, #15
 8084466:	d00a      	beq.n	808447e <_strtod_r+0x52e>
 8084468:	4b30      	ldr	r3, [pc, #192]	; (808452c <_strtod_r+0x5dc>)
 808446a:	4640      	mov	r0, r8
 808446c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8084470:	4649      	mov	r1, r9
 8084472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084476:	f7fe fe81 	bl	808317c <__aeabi_ddiv>
 808447a:	4680      	mov	r8, r0
 808447c:	4689      	mov	r9, r1
 808447e:	1124      	asrs	r4, r4, #4
 8084480:	d062      	beq.n	8084548 <_strtod_r+0x5f8>
 8084482:	2c1f      	cmp	r4, #31
 8084484:	dd08      	ble.n	8084498 <_strtod_r+0x548>
 8084486:	f04f 0b00 	mov.w	fp, #0
 808448a:	f8cd b008 	str.w	fp, [sp, #8]
 808448e:	f8cd b014 	str.w	fp, [sp, #20]
 8084492:	f8cd b010 	str.w	fp, [sp, #16]
 8084496:	e12c      	b.n	80846f2 <_strtod_r+0x7a2>
 8084498:	4640      	mov	r0, r8
 808449a:	4649      	mov	r1, r9
 808449c:	f014 0f10 	tst.w	r4, #16
 80844a0:	bf0c      	ite	eq
 80844a2:	2300      	moveq	r3, #0
 80844a4:	236a      	movne	r3, #106	; 0x6a
 80844a6:	4e24      	ldr	r6, [pc, #144]	; (8084538 <_strtod_r+0x5e8>)
 80844a8:	9303      	str	r3, [sp, #12]
 80844aa:	2300      	movs	r3, #0
 80844ac:	2c00      	cmp	r4, #0
 80844ae:	dd09      	ble.n	80844c4 <_strtod_r+0x574>
 80844b0:	07e2      	lsls	r2, r4, #31
 80844b2:	d504      	bpl.n	80844be <_strtod_r+0x56e>
 80844b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80844b8:	f7fe fd36 	bl	8082f28 <__aeabi_dmul>
 80844bc:	2301      	movs	r3, #1
 80844be:	1064      	asrs	r4, r4, #1
 80844c0:	3608      	adds	r6, #8
 80844c2:	e7f3      	b.n	80844ac <_strtod_r+0x55c>
 80844c4:	b10b      	cbz	r3, 80844ca <_strtod_r+0x57a>
 80844c6:	4680      	mov	r8, r0
 80844c8:	4689      	mov	r9, r1
 80844ca:	9b03      	ldr	r3, [sp, #12]
 80844cc:	b1eb      	cbz	r3, 808450a <_strtod_r+0x5ba>
 80844ce:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80844d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80844d6:	2b00      	cmp	r3, #0
 80844d8:	4649      	mov	r1, r9
 80844da:	dd16      	ble.n	808450a <_strtod_r+0x5ba>
 80844dc:	2b1f      	cmp	r3, #31
 80844de:	dd0e      	ble.n	80844fe <_strtod_r+0x5ae>
 80844e0:	2b34      	cmp	r3, #52	; 0x34
 80844e2:	bfde      	ittt	le
 80844e4:	3b20      	suble	r3, #32
 80844e6:	f04f 32ff 	movle.w	r2, #4294967295
 80844ea:	fa02 f303 	lslle.w	r3, r2, r3
 80844ee:	f04f 0800 	mov.w	r8, #0
 80844f2:	bfcc      	ite	gt
 80844f4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80844f8:	ea03 0901 	andle.w	r9, r3, r1
 80844fc:	e005      	b.n	808450a <_strtod_r+0x5ba>
 80844fe:	f04f 32ff 	mov.w	r2, #4294967295
 8084502:	fa02 f303 	lsl.w	r3, r2, r3
 8084506:	ea03 0808 	and.w	r8, r3, r8
 808450a:	2200      	movs	r2, #0
 808450c:	2300      	movs	r3, #0
 808450e:	4640      	mov	r0, r8
 8084510:	4649      	mov	r1, r9
 8084512:	f7fe ff71 	bl	80833f8 <__aeabi_dcmpeq>
 8084516:	2800      	cmp	r0, #0
 8084518:	d1b5      	bne.n	8084486 <_strtod_r+0x536>
 808451a:	e017      	b.n	808454c <_strtod_r+0x5fc>
 808451c:	08086010 	.word	0x08086010
 8084520:	08086013 	.word	0x08086013
 8084524:	08086019 	.word	0x08086019
 8084528:	0808601c 	.word	0x0808601c
 808452c:	08086058 	.word	0x08086058
 8084530:	08086120 	.word	0x08086120
 8084534:	7ca00000 	.word	0x7ca00000
 8084538:	08086030 	.word	0x08086030
 808453c:	7ff00000 	.word	0x7ff00000
 8084540:	fff80000 	.word	0xfff80000
 8084544:	7fefffff 	.word	0x7fefffff
 8084548:	2300      	movs	r3, #0
 808454a:	9303      	str	r3, [sp, #12]
 808454c:	9b04      	ldr	r3, [sp, #16]
 808454e:	465a      	mov	r2, fp
 8084550:	9300      	str	r3, [sp, #0]
 8084552:	9906      	ldr	r1, [sp, #24]
 8084554:	462b      	mov	r3, r5
 8084556:	4650      	mov	r0, sl
 8084558:	f000 ff36 	bl	80853c8 <__s2b>
 808455c:	9005      	str	r0, [sp, #20]
 808455e:	2800      	cmp	r0, #0
 8084560:	f43f af34 	beq.w	80843cc <_strtod_r+0x47c>
 8084564:	2f00      	cmp	r7, #0
 8084566:	f1c7 0300 	rsb	r3, r7, #0
 808456a:	bfa8      	it	ge
 808456c:	2300      	movge	r3, #0
 808456e:	930d      	str	r3, [sp, #52]	; 0x34
 8084570:	f04f 0b00 	mov.w	fp, #0
 8084574:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 8084578:	9312      	str	r3, [sp, #72]	; 0x48
 808457a:	f8cd b008 	str.w	fp, [sp, #8]
 808457e:	9b05      	ldr	r3, [sp, #20]
 8084580:	4650      	mov	r0, sl
 8084582:	6859      	ldr	r1, [r3, #4]
 8084584:	f000 fe99 	bl	80852ba <_Balloc>
 8084588:	9004      	str	r0, [sp, #16]
 808458a:	2800      	cmp	r0, #0
 808458c:	f43f af26 	beq.w	80843dc <_strtod_r+0x48c>
 8084590:	9b05      	ldr	r3, [sp, #20]
 8084592:	300c      	adds	r0, #12
 8084594:	691a      	ldr	r2, [r3, #16]
 8084596:	f103 010c 	add.w	r1, r3, #12
 808459a:	3202      	adds	r2, #2
 808459c:	0092      	lsls	r2, r2, #2
 808459e:	f7ff fc37 	bl	8083e10 <memcpy>
 80845a2:	ab1a      	add	r3, sp, #104	; 0x68
 80845a4:	9301      	str	r3, [sp, #4]
 80845a6:	ab19      	add	r3, sp, #100	; 0x64
 80845a8:	9300      	str	r3, [sp, #0]
 80845aa:	4642      	mov	r2, r8
 80845ac:	464b      	mov	r3, r9
 80845ae:	4650      	mov	r0, sl
 80845b0:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80845b4:	f001 f9b7 	bl	8085926 <__d2b>
 80845b8:	9018      	str	r0, [sp, #96]	; 0x60
 80845ba:	2800      	cmp	r0, #0
 80845bc:	f43f af0e 	beq.w	80843dc <_strtod_r+0x48c>
 80845c0:	2101      	movs	r1, #1
 80845c2:	4650      	mov	r0, sl
 80845c4:	f000 ff8b 	bl	80854de <__i2b>
 80845c8:	9002      	str	r0, [sp, #8]
 80845ca:	2800      	cmp	r0, #0
 80845cc:	f43f af06 	beq.w	80843dc <_strtod_r+0x48c>
 80845d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80845d2:	9903      	ldr	r1, [sp, #12]
 80845d4:	2b00      	cmp	r3, #0
 80845d6:	bfac      	ite	ge
 80845d8:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 80845da:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80845dc:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80845de:	bfac      	ite	ge
 80845e0:	18d6      	addge	r6, r2, r3
 80845e2:	1ad2      	sublt	r2, r2, r3
 80845e4:	eba3 0301 	sub.w	r3, r3, r1
 80845e8:	4423      	add	r3, r4
 80845ea:	49b1      	ldr	r1, [pc, #708]	; (80848b0 <_strtod_r+0x960>)
 80845ec:	f103 33ff 	add.w	r3, r3, #4294967295
 80845f0:	bfac      	ite	ge
 80845f2:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 80845f4:	9e0d      	ldrlt	r6, [sp, #52]	; 0x34
 80845f6:	428b      	cmp	r3, r1
 80845f8:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
 80845fc:	f280 8085 	bge.w	808470a <_strtod_r+0x7ba>
 8084600:	1ac9      	subs	r1, r1, r3
 8084602:	291f      	cmp	r1, #31
 8084604:	bfc8      	it	gt
 8084606:	4dab      	ldrgt	r5, [pc, #684]	; (80848b4 <_strtod_r+0x964>)
 8084608:	f04f 0701 	mov.w	r7, #1
 808460c:	bfd4      	ite	le
 808460e:	fa07 f301 	lslle.w	r3, r7, r1
 8084612:	1aed      	subgt	r5, r5, r3
 8084614:	eba4 0401 	sub.w	r4, r4, r1
 8084618:	bfd9      	ittee	le
 808461a:	9307      	strle	r3, [sp, #28]
 808461c:	2500      	movle	r5, #0
 808461e:	fa07 f505 	lslgt.w	r5, r7, r5
 8084622:	9707      	strgt	r7, [sp, #28]
 8084624:	1937      	adds	r7, r6, r4
 8084626:	9b03      	ldr	r3, [sp, #12]
 8084628:	42be      	cmp	r6, r7
 808462a:	4414      	add	r4, r2
 808462c:	441c      	add	r4, r3
 808462e:	4633      	mov	r3, r6
 8084630:	bfa8      	it	ge
 8084632:	463b      	movge	r3, r7
 8084634:	42a3      	cmp	r3, r4
 8084636:	bfa8      	it	ge
 8084638:	4623      	movge	r3, r4
 808463a:	2b00      	cmp	r3, #0
 808463c:	bfc2      	ittt	gt
 808463e:	1aff      	subgt	r7, r7, r3
 8084640:	1ae4      	subgt	r4, r4, r3
 8084642:	1af6      	subgt	r6, r6, r3
 8084644:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8084646:	2b00      	cmp	r3, #0
 8084648:	d163      	bne.n	8084712 <_strtod_r+0x7c2>
 808464a:	2f00      	cmp	r7, #0
 808464c:	dc7a      	bgt.n	8084744 <_strtod_r+0x7f4>
 808464e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8084650:	2b00      	cmp	r3, #0
 8084652:	f040 8081 	bne.w	8084758 <_strtod_r+0x808>
 8084656:	2c00      	cmp	r4, #0
 8084658:	f300 8088 	bgt.w	808476c <_strtod_r+0x81c>
 808465c:	2e00      	cmp	r6, #0
 808465e:	f300 808f 	bgt.w	8084780 <_strtod_r+0x830>
 8084662:	9a04      	ldr	r2, [sp, #16]
 8084664:	9918      	ldr	r1, [sp, #96]	; 0x60
 8084666:	4650      	mov	r0, sl
 8084668:	f001 f88d 	bl	8085786 <__mdiff>
 808466c:	4683      	mov	fp, r0
 808466e:	2800      	cmp	r0, #0
 8084670:	f43f aeb4 	beq.w	80843dc <_strtod_r+0x48c>
 8084674:	68c3      	ldr	r3, [r0, #12]
 8084676:	2400      	movs	r4, #0
 8084678:	60c4      	str	r4, [r0, #12]
 808467a:	9902      	ldr	r1, [sp, #8]
 808467c:	9306      	str	r3, [sp, #24]
 808467e:	f001 f866 	bl	808574e <__mcmp>
 8084682:	42a0      	cmp	r0, r4
 8084684:	f280 808b 	bge.w	808479e <_strtod_r+0x84e>
 8084688:	9b06      	ldr	r3, [sp, #24]
 808468a:	2b00      	cmp	r3, #0
 808468c:	f040 8202 	bne.w	8084a94 <_strtod_r+0xb44>
 8084690:	f1b8 0f00 	cmp.w	r8, #0
 8084694:	f040 81fe 	bne.w	8084a94 <_strtod_r+0xb44>
 8084698:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808469c:	2b00      	cmp	r3, #0
 808469e:	f040 81f9 	bne.w	8084a94 <_strtod_r+0xb44>
 80846a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80846a6:	0d1b      	lsrs	r3, r3, #20
 80846a8:	051b      	lsls	r3, r3, #20
 80846aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80846ae:	f240 81f1 	bls.w	8084a94 <_strtod_r+0xb44>
 80846b2:	f8db 3014 	ldr.w	r3, [fp, #20]
 80846b6:	2b00      	cmp	r3, #0
 80846b8:	d06c      	beq.n	8084794 <_strtod_r+0x844>
 80846ba:	4659      	mov	r1, fp
 80846bc:	2201      	movs	r2, #1
 80846be:	4650      	mov	r0, sl
 80846c0:	f000 fff4 	bl	80856ac <__lshift>
 80846c4:	9902      	ldr	r1, [sp, #8]
 80846c6:	4683      	mov	fp, r0
 80846c8:	f001 f841 	bl	808574e <__mcmp>
 80846cc:	2800      	cmp	r0, #0
 80846ce:	f340 81e1 	ble.w	8084a94 <_strtod_r+0xb44>
 80846d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80846d6:	9a03      	ldr	r2, [sp, #12]
 80846d8:	0d1b      	lsrs	r3, r3, #20
 80846da:	051b      	lsls	r3, r3, #20
 80846dc:	2a00      	cmp	r2, #0
 80846de:	f000 808d 	beq.w	80847fc <_strtod_r+0x8ac>
 80846e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80846e6:	f300 8089 	bgt.w	80847fc <_strtod_r+0x8ac>
 80846ea:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 80846ee:	f300 81d3 	bgt.w	8084a98 <_strtod_r+0xb48>
 80846f2:	2322      	movs	r3, #34	; 0x22
 80846f4:	f04f 0800 	mov.w	r8, #0
 80846f8:	f04f 0900 	mov.w	r9, #0
 80846fc:	f8ca 3000 	str.w	r3, [sl]
 8084700:	9b05      	ldr	r3, [sp, #20]
 8084702:	2b00      	cmp	r3, #0
 8084704:	f040 81d9 	bne.w	8084aba <_strtod_r+0xb6a>
 8084708:	e1eb      	b.n	8084ae2 <_strtod_r+0xb92>
 808470a:	2301      	movs	r3, #1
 808470c:	2500      	movs	r5, #0
 808470e:	9307      	str	r3, [sp, #28]
 8084710:	e788      	b.n	8084624 <_strtod_r+0x6d4>
 8084712:	461a      	mov	r2, r3
 8084714:	9902      	ldr	r1, [sp, #8]
 8084716:	4650      	mov	r0, sl
 8084718:	f000 ff7a 	bl	8085610 <__pow5mult>
 808471c:	9002      	str	r0, [sp, #8]
 808471e:	2800      	cmp	r0, #0
 8084720:	f43f ae5c 	beq.w	80843dc <_strtod_r+0x48c>
 8084724:	4601      	mov	r1, r0
 8084726:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8084728:	4650      	mov	r0, sl
 808472a:	f000 fee1 	bl	80854f0 <__multiply>
 808472e:	9006      	str	r0, [sp, #24]
 8084730:	2800      	cmp	r0, #0
 8084732:	f43f ae53 	beq.w	80843dc <_strtod_r+0x48c>
 8084736:	9918      	ldr	r1, [sp, #96]	; 0x60
 8084738:	4650      	mov	r0, sl
 808473a:	f000 fdf3 	bl	8085324 <_Bfree>
 808473e:	9b06      	ldr	r3, [sp, #24]
 8084740:	9318      	str	r3, [sp, #96]	; 0x60
 8084742:	e782      	b.n	808464a <_strtod_r+0x6fa>
 8084744:	463a      	mov	r2, r7
 8084746:	9918      	ldr	r1, [sp, #96]	; 0x60
 8084748:	4650      	mov	r0, sl
 808474a:	f000 ffaf 	bl	80856ac <__lshift>
 808474e:	9018      	str	r0, [sp, #96]	; 0x60
 8084750:	2800      	cmp	r0, #0
 8084752:	f47f af7c 	bne.w	808464e <_strtod_r+0x6fe>
 8084756:	e641      	b.n	80843dc <_strtod_r+0x48c>
 8084758:	9a12      	ldr	r2, [sp, #72]	; 0x48
 808475a:	9904      	ldr	r1, [sp, #16]
 808475c:	4650      	mov	r0, sl
 808475e:	f000 ff57 	bl	8085610 <__pow5mult>
 8084762:	9004      	str	r0, [sp, #16]
 8084764:	2800      	cmp	r0, #0
 8084766:	f47f af76 	bne.w	8084656 <_strtod_r+0x706>
 808476a:	e637      	b.n	80843dc <_strtod_r+0x48c>
 808476c:	4622      	mov	r2, r4
 808476e:	9904      	ldr	r1, [sp, #16]
 8084770:	4650      	mov	r0, sl
 8084772:	f000 ff9b 	bl	80856ac <__lshift>
 8084776:	9004      	str	r0, [sp, #16]
 8084778:	2800      	cmp	r0, #0
 808477a:	f47f af6f 	bne.w	808465c <_strtod_r+0x70c>
 808477e:	e62d      	b.n	80843dc <_strtod_r+0x48c>
 8084780:	4632      	mov	r2, r6
 8084782:	9902      	ldr	r1, [sp, #8]
 8084784:	4650      	mov	r0, sl
 8084786:	f000 ff91 	bl	80856ac <__lshift>
 808478a:	9002      	str	r0, [sp, #8]
 808478c:	2800      	cmp	r0, #0
 808478e:	f47f af68 	bne.w	8084662 <_strtod_r+0x712>
 8084792:	e623      	b.n	80843dc <_strtod_r+0x48c>
 8084794:	f8db 3010 	ldr.w	r3, [fp, #16]
 8084798:	2b01      	cmp	r3, #1
 808479a:	dc8e      	bgt.n	80846ba <_strtod_r+0x76a>
 808479c:	e17a      	b.n	8084a94 <_strtod_r+0xb44>
 808479e:	d161      	bne.n	8084864 <_strtod_r+0x914>
 80847a0:	9a06      	ldr	r2, [sp, #24]
 80847a2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80847a6:	b322      	cbz	r2, 80847f2 <_strtod_r+0x8a2>
 80847a8:	4943      	ldr	r1, [pc, #268]	; (80848b8 <_strtod_r+0x968>)
 80847aa:	464a      	mov	r2, r9
 80847ac:	428b      	cmp	r3, r1
 80847ae:	d12e      	bne.n	808480e <_strtod_r+0x8be>
 80847b0:	9b03      	ldr	r3, [sp, #12]
 80847b2:	4641      	mov	r1, r8
 80847b4:	b163      	cbz	r3, 80847d0 <_strtod_r+0x880>
 80847b6:	4b41      	ldr	r3, [pc, #260]	; (80848bc <_strtod_r+0x96c>)
 80847b8:	4013      	ands	r3, r2
 80847ba:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80847be:	d807      	bhi.n	80847d0 <_strtod_r+0x880>
 80847c0:	0d1b      	lsrs	r3, r3, #20
 80847c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80847c6:	f04f 30ff 	mov.w	r0, #4294967295
 80847ca:	fa00 f303 	lsl.w	r3, r0, r3
 80847ce:	e001      	b.n	80847d4 <_strtod_r+0x884>
 80847d0:	f04f 33ff 	mov.w	r3, #4294967295
 80847d4:	428b      	cmp	r3, r1
 80847d6:	d11a      	bne.n	808480e <_strtod_r+0x8be>
 80847d8:	4939      	ldr	r1, [pc, #228]	; (80848c0 <_strtod_r+0x970>)
 80847da:	428a      	cmp	r2, r1
 80847dc:	d102      	bne.n	80847e4 <_strtod_r+0x894>
 80847de:	3301      	adds	r3, #1
 80847e0:	f43f adfc 	beq.w	80843dc <_strtod_r+0x48c>
 80847e4:	4b35      	ldr	r3, [pc, #212]	; (80848bc <_strtod_r+0x96c>)
 80847e6:	f04f 0800 	mov.w	r8, #0
 80847ea:	4013      	ands	r3, r2
 80847ec:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80847f0:	e150      	b.n	8084a94 <_strtod_r+0xb44>
 80847f2:	b963      	cbnz	r3, 808480e <_strtod_r+0x8be>
 80847f4:	f1b8 0f00 	cmp.w	r8, #0
 80847f8:	d109      	bne.n	808480e <_strtod_r+0x8be>
 80847fa:	e76a      	b.n	80846d2 <_strtod_r+0x782>
 80847fc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8084800:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8084804:	f04f 38ff 	mov.w	r8, #4294967295
 8084808:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 808480c:	e142      	b.n	8084a94 <_strtod_r+0xb44>
 808480e:	b115      	cbz	r5, 8084816 <_strtod_r+0x8c6>
 8084810:	ea15 0f09 	tst.w	r5, r9
 8084814:	e002      	b.n	808481c <_strtod_r+0x8cc>
 8084816:	9b07      	ldr	r3, [sp, #28]
 8084818:	ea13 0f08 	tst.w	r3, r8
 808481c:	f000 813a 	beq.w	8084a94 <_strtod_r+0xb44>
 8084820:	9b06      	ldr	r3, [sp, #24]
 8084822:	9a03      	ldr	r2, [sp, #12]
 8084824:	4640      	mov	r0, r8
 8084826:	4649      	mov	r1, r9
 8084828:	b153      	cbz	r3, 8084840 <_strtod_r+0x8f0>
 808482a:	f7ff fb6d 	bl	8083f08 <sulp>
 808482e:	4602      	mov	r2, r0
 8084830:	460b      	mov	r3, r1
 8084832:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8084836:	f7fe f9c5 	bl	8082bc4 <__adddf3>
 808483a:	4680      	mov	r8, r0
 808483c:	4689      	mov	r9, r1
 808483e:	e129      	b.n	8084a94 <_strtod_r+0xb44>
 8084840:	f7ff fb62 	bl	8083f08 <sulp>
 8084844:	4602      	mov	r2, r0
 8084846:	460b      	mov	r3, r1
 8084848:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808484c:	f7fe f9b8 	bl	8082bc0 <__aeabi_dsub>
 8084850:	2200      	movs	r2, #0
 8084852:	2300      	movs	r3, #0
 8084854:	4680      	mov	r8, r0
 8084856:	4689      	mov	r9, r1
 8084858:	f7fe fdce 	bl	80833f8 <__aeabi_dcmpeq>
 808485c:	2800      	cmp	r0, #0
 808485e:	f47f af48 	bne.w	80846f2 <_strtod_r+0x7a2>
 8084862:	e117      	b.n	8084a94 <_strtod_r+0xb44>
 8084864:	9902      	ldr	r1, [sp, #8]
 8084866:	4658      	mov	r0, fp
 8084868:	f001 f8ab 	bl	80859c2 <__ratio>
 808486c:	2200      	movs	r2, #0
 808486e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8084872:	4606      	mov	r6, r0
 8084874:	460f      	mov	r7, r1
 8084876:	f7fe fdd3 	bl	8083420 <__aeabi_dcmple>
 808487a:	2800      	cmp	r0, #0
 808487c:	d03f      	beq.n	80848fe <_strtod_r+0x9ae>
 808487e:	9b06      	ldr	r3, [sp, #24]
 8084880:	b113      	cbz	r3, 8084888 <_strtod_r+0x938>
 8084882:	2600      	movs	r6, #0
 8084884:	4f0f      	ldr	r7, [pc, #60]	; (80848c4 <_strtod_r+0x974>)
 8084886:	e010      	b.n	80848aa <_strtod_r+0x95a>
 8084888:	f1b8 0f00 	cmp.w	r8, #0
 808488c:	d103      	bne.n	8084896 <_strtod_r+0x946>
 808488e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8084892:	b93b      	cbnz	r3, 80848a4 <_strtod_r+0x954>
 8084894:	e01a      	b.n	80848cc <_strtod_r+0x97c>
 8084896:	f1b8 0f01 	cmp.w	r8, #1
 808489a:	d103      	bne.n	80848a4 <_strtod_r+0x954>
 808489c:	f1b9 0f00 	cmp.w	r9, #0
 80848a0:	f43f af27 	beq.w	80846f2 <_strtod_r+0x7a2>
 80848a4:	4f08      	ldr	r7, [pc, #32]	; (80848c8 <_strtod_r+0x978>)
 80848a6:	2600      	movs	r6, #0
 80848a8:	2400      	movs	r4, #0
 80848aa:	4d06      	ldr	r5, [pc, #24]	; (80848c4 <_strtod_r+0x974>)
 80848ac:	e03c      	b.n	8084928 <_strtod_r+0x9d8>
 80848ae:	bf00      	nop
 80848b0:	fffffc02 	.word	0xfffffc02
 80848b4:	fffffbe2 	.word	0xfffffbe2
 80848b8:	000fffff 	.word	0x000fffff
 80848bc:	7ff00000 	.word	0x7ff00000
 80848c0:	7fefffff 	.word	0x7fefffff
 80848c4:	3ff00000 	.word	0x3ff00000
 80848c8:	bff00000 	.word	0xbff00000
 80848cc:	2200      	movs	r2, #0
 80848ce:	4b9a      	ldr	r3, [pc, #616]	; (8084b38 <_strtod_r+0xbe8>)
 80848d0:	4630      	mov	r0, r6
 80848d2:	4639      	mov	r1, r7
 80848d4:	f7fe fd9a 	bl	808340c <__aeabi_dcmplt>
 80848d8:	b940      	cbnz	r0, 80848ec <_strtod_r+0x99c>
 80848da:	2200      	movs	r2, #0
 80848dc:	4b97      	ldr	r3, [pc, #604]	; (8084b3c <_strtod_r+0xbec>)
 80848de:	4630      	mov	r0, r6
 80848e0:	4639      	mov	r1, r7
 80848e2:	f7fe fb21 	bl	8082f28 <__aeabi_dmul>
 80848e6:	4604      	mov	r4, r0
 80848e8:	460d      	mov	r5, r1
 80848ea:	e001      	b.n	80848f0 <_strtod_r+0x9a0>
 80848ec:	9c06      	ldr	r4, [sp, #24]
 80848ee:	4d93      	ldr	r5, [pc, #588]	; (8084b3c <_strtod_r+0xbec>)
 80848f0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80848f4:	9414      	str	r4, [sp, #80]	; 0x50
 80848f6:	9315      	str	r3, [sp, #84]	; 0x54
 80848f8:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 80848fc:	e014      	b.n	8084928 <_strtod_r+0x9d8>
 80848fe:	4b8f      	ldr	r3, [pc, #572]	; (8084b3c <_strtod_r+0xbec>)
 8084900:	2200      	movs	r2, #0
 8084902:	4630      	mov	r0, r6
 8084904:	4639      	mov	r1, r7
 8084906:	f7fe fb0f 	bl	8082f28 <__aeabi_dmul>
 808490a:	9b06      	ldr	r3, [sp, #24]
 808490c:	4604      	mov	r4, r0
 808490e:	460d      	mov	r5, r1
 8084910:	b923      	cbnz	r3, 808491c <_strtod_r+0x9cc>
 8084912:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8084916:	900e      	str	r0, [sp, #56]	; 0x38
 8084918:	930f      	str	r3, [sp, #60]	; 0x3c
 808491a:	e003      	b.n	8084924 <_strtod_r+0x9d4>
 808491c:	4602      	mov	r2, r0
 808491e:	460b      	mov	r3, r1
 8084920:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8084924:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8084928:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808492c:	0d1b      	lsrs	r3, r3, #20
 808492e:	051b      	lsls	r3, r3, #20
 8084930:	9307      	str	r3, [sp, #28]
 8084932:	9a07      	ldr	r2, [sp, #28]
 8084934:	4b82      	ldr	r3, [pc, #520]	; (8084b40 <_strtod_r+0xbf0>)
 8084936:	429a      	cmp	r2, r3
 8084938:	d12b      	bne.n	8084992 <_strtod_r+0xa42>
 808493a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 808493e:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8084942:	4640      	mov	r0, r8
 8084944:	4649      	mov	r1, r9
 8084946:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 808494a:	f000 ff7b 	bl	8085844 <__ulp>
 808494e:	4602      	mov	r2, r0
 8084950:	460b      	mov	r3, r1
 8084952:	4630      	mov	r0, r6
 8084954:	4639      	mov	r1, r7
 8084956:	f7fe fae7 	bl	8082f28 <__aeabi_dmul>
 808495a:	4642      	mov	r2, r8
 808495c:	464b      	mov	r3, r9
 808495e:	f7fe f931 	bl	8082bc4 <__adddf3>
 8084962:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8084966:	0d1b      	lsrs	r3, r3, #20
 8084968:	4a76      	ldr	r2, [pc, #472]	; (8084b44 <_strtod_r+0xbf4>)
 808496a:	051b      	lsls	r3, r3, #20
 808496c:	4293      	cmp	r3, r2
 808496e:	4680      	mov	r8, r0
 8084970:	d90c      	bls.n	808498c <_strtod_r+0xa3c>
 8084972:	4b75      	ldr	r3, [pc, #468]	; (8084b48 <_strtod_r+0xbf8>)
 8084974:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8084976:	429a      	cmp	r2, r3
 8084978:	d103      	bne.n	8084982 <_strtod_r+0xa32>
 808497a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808497c:	3301      	adds	r3, #1
 808497e:	f43f ad2d 	beq.w	80843dc <_strtod_r+0x48c>
 8084982:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8084b48 <_strtod_r+0xbf8>
 8084986:	f04f 38ff 	mov.w	r8, #4294967295
 808498a:	e072      	b.n	8084a72 <_strtod_r+0xb22>
 808498c:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8084990:	e039      	b.n	8084a06 <_strtod_r+0xab6>
 8084992:	9b03      	ldr	r3, [sp, #12]
 8084994:	b33b      	cbz	r3, 80849e6 <_strtod_r+0xa96>
 8084996:	9b07      	ldr	r3, [sp, #28]
 8084998:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 808499c:	d823      	bhi.n	80849e6 <_strtod_r+0xa96>
 808499e:	a35e      	add	r3, pc, #376	; (adr r3, 8084b18 <_strtod_r+0xbc8>)
 80849a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80849a4:	4620      	mov	r0, r4
 80849a6:	4629      	mov	r1, r5
 80849a8:	f7fe fd3a 	bl	8083420 <__aeabi_dcmple>
 80849ac:	b1b8      	cbz	r0, 80849de <_strtod_r+0xa8e>
 80849ae:	4629      	mov	r1, r5
 80849b0:	4620      	mov	r0, r4
 80849b2:	f7fe fd91 	bl	80834d8 <__aeabi_d2uiz>
 80849b6:	2800      	cmp	r0, #0
 80849b8:	bf08      	it	eq
 80849ba:	2001      	moveq	r0, #1
 80849bc:	f7fe fa3e 	bl	8082e3c <__aeabi_ui2d>
 80849c0:	9b06      	ldr	r3, [sp, #24]
 80849c2:	4604      	mov	r4, r0
 80849c4:	460d      	mov	r5, r1
 80849c6:	b923      	cbnz	r3, 80849d2 <_strtod_r+0xa82>
 80849c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80849cc:	9010      	str	r0, [sp, #64]	; 0x40
 80849ce:	9311      	str	r3, [sp, #68]	; 0x44
 80849d0:	e003      	b.n	80849da <_strtod_r+0xa8a>
 80849d2:	4602      	mov	r2, r0
 80849d4:	460b      	mov	r3, r1
 80849d6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80849da:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80849de:	9a07      	ldr	r2, [sp, #28]
 80849e0:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80849e4:	1a9f      	subs	r7, r3, r2
 80849e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80849ea:	f000 ff2b 	bl	8085844 <__ulp>
 80849ee:	4602      	mov	r2, r0
 80849f0:	460b      	mov	r3, r1
 80849f2:	4630      	mov	r0, r6
 80849f4:	4639      	mov	r1, r7
 80849f6:	f7fe fa97 	bl	8082f28 <__aeabi_dmul>
 80849fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80849fe:	f7fe f8e1 	bl	8082bc4 <__adddf3>
 8084a02:	4680      	mov	r8, r0
 8084a04:	4689      	mov	r9, r1
 8084a06:	9b03      	ldr	r3, [sp, #12]
 8084a08:	bb9b      	cbnz	r3, 8084a72 <_strtod_r+0xb22>
 8084a0a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8084a0e:	0d1b      	lsrs	r3, r3, #20
 8084a10:	9a07      	ldr	r2, [sp, #28]
 8084a12:	051b      	lsls	r3, r3, #20
 8084a14:	429a      	cmp	r2, r3
 8084a16:	464e      	mov	r6, r9
 8084a18:	d12b      	bne.n	8084a72 <_strtod_r+0xb22>
 8084a1a:	4629      	mov	r1, r5
 8084a1c:	4620      	mov	r0, r4
 8084a1e:	f7fe fd33 	bl	8083488 <__aeabi_d2iz>
 8084a22:	f7fe fa1b 	bl	8082e5c <__aeabi_i2d>
 8084a26:	460b      	mov	r3, r1
 8084a28:	4602      	mov	r2, r0
 8084a2a:	4629      	mov	r1, r5
 8084a2c:	4620      	mov	r0, r4
 8084a2e:	f7fe f8c7 	bl	8082bc0 <__aeabi_dsub>
 8084a32:	9b06      	ldr	r3, [sp, #24]
 8084a34:	4604      	mov	r4, r0
 8084a36:	460d      	mov	r5, r1
 8084a38:	b92b      	cbnz	r3, 8084a46 <_strtod_r+0xaf6>
 8084a3a:	f1b8 0f00 	cmp.w	r8, #0
 8084a3e:	d102      	bne.n	8084a46 <_strtod_r+0xaf6>
 8084a40:	f3c9 0613 	ubfx	r6, r9, #0, #20
 8084a44:	b17e      	cbz	r6, 8084a66 <_strtod_r+0xb16>
 8084a46:	a336      	add	r3, pc, #216	; (adr r3, 8084b20 <_strtod_r+0xbd0>)
 8084a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084a4c:	4620      	mov	r0, r4
 8084a4e:	4629      	mov	r1, r5
 8084a50:	f7fe fcdc 	bl	808340c <__aeabi_dcmplt>
 8084a54:	bb88      	cbnz	r0, 8084aba <_strtod_r+0xb6a>
 8084a56:	a334      	add	r3, pc, #208	; (adr r3, 8084b28 <_strtod_r+0xbd8>)
 8084a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084a5c:	4620      	mov	r0, r4
 8084a5e:	4629      	mov	r1, r5
 8084a60:	f7fe fcf2 	bl	8083448 <__aeabi_dcmpgt>
 8084a64:	e004      	b.n	8084a70 <_strtod_r+0xb20>
 8084a66:	a332      	add	r3, pc, #200	; (adr r3, 8084b30 <_strtod_r+0xbe0>)
 8084a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084a6c:	f7fe fcce 	bl	808340c <__aeabi_dcmplt>
 8084a70:	bb18      	cbnz	r0, 8084aba <_strtod_r+0xb6a>
 8084a72:	9918      	ldr	r1, [sp, #96]	; 0x60
 8084a74:	4650      	mov	r0, sl
 8084a76:	f000 fc55 	bl	8085324 <_Bfree>
 8084a7a:	9904      	ldr	r1, [sp, #16]
 8084a7c:	4650      	mov	r0, sl
 8084a7e:	f000 fc51 	bl	8085324 <_Bfree>
 8084a82:	9902      	ldr	r1, [sp, #8]
 8084a84:	4650      	mov	r0, sl
 8084a86:	f000 fc4d 	bl	8085324 <_Bfree>
 8084a8a:	4659      	mov	r1, fp
 8084a8c:	4650      	mov	r0, sl
 8084a8e:	f000 fc49 	bl	8085324 <_Bfree>
 8084a92:	e574      	b.n	808457e <_strtod_r+0x62e>
 8084a94:	9b03      	ldr	r3, [sp, #12]
 8084a96:	b183      	cbz	r3, 8084aba <_strtod_r+0xb6a>
 8084a98:	4b2c      	ldr	r3, [pc, #176]	; (8084b4c <_strtod_r+0xbfc>)
 8084a9a:	4640      	mov	r0, r8
 8084a9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8084a9e:	2300      	movs	r3, #0
 8084aa0:	930a      	str	r3, [sp, #40]	; 0x28
 8084aa2:	4649      	mov	r1, r9
 8084aa4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8084aa8:	f7fe fa3e 	bl	8082f28 <__aeabi_dmul>
 8084aac:	4680      	mov	r8, r0
 8084aae:	4689      	mov	r9, r1
 8084ab0:	b919      	cbnz	r1, 8084aba <_strtod_r+0xb6a>
 8084ab2:	b910      	cbnz	r0, 8084aba <_strtod_r+0xb6a>
 8084ab4:	2322      	movs	r3, #34	; 0x22
 8084ab6:	f8ca 3000 	str.w	r3, [sl]
 8084aba:	9918      	ldr	r1, [sp, #96]	; 0x60
 8084abc:	4650      	mov	r0, sl
 8084abe:	f000 fc31 	bl	8085324 <_Bfree>
 8084ac2:	9904      	ldr	r1, [sp, #16]
 8084ac4:	4650      	mov	r0, sl
 8084ac6:	f000 fc2d 	bl	8085324 <_Bfree>
 8084aca:	9902      	ldr	r1, [sp, #8]
 8084acc:	4650      	mov	r0, sl
 8084ace:	f000 fc29 	bl	8085324 <_Bfree>
 8084ad2:	9905      	ldr	r1, [sp, #20]
 8084ad4:	4650      	mov	r0, sl
 8084ad6:	f000 fc25 	bl	8085324 <_Bfree>
 8084ada:	4659      	mov	r1, fp
 8084adc:	4650      	mov	r0, sl
 8084ade:	f000 fc21 	bl	8085324 <_Bfree>
 8084ae2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8084ae4:	b113      	cbz	r3, 8084aec <_strtod_r+0xb9c>
 8084ae6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8084ae8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8084aea:	6013      	str	r3, [r2, #0]
 8084aec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8084aee:	b11b      	cbz	r3, 8084af8 <_strtod_r+0xba8>
 8084af0:	4642      	mov	r2, r8
 8084af2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8084af6:	e007      	b.n	8084b08 <_strtod_r+0xbb8>
 8084af8:	4642      	mov	r2, r8
 8084afa:	464b      	mov	r3, r9
 8084afc:	e004      	b.n	8084b08 <_strtod_r+0xbb8>
 8084afe:	2500      	movs	r5, #0
 8084b00:	462a      	mov	r2, r5
 8084b02:	2101      	movs	r1, #1
 8084b04:	f7ff bb47 	b.w	8084196 <_strtod_r+0x246>
 8084b08:	4610      	mov	r0, r2
 8084b0a:	4619      	mov	r1, r3
 8084b0c:	b01d      	add	sp, #116	; 0x74
 8084b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084b12:	bf00      	nop
 8084b14:	f3af 8000 	nop.w
 8084b18:	ffc00000 	.word	0xffc00000
 8084b1c:	41dfffff 	.word	0x41dfffff
 8084b20:	94a03595 	.word	0x94a03595
 8084b24:	3fdfffff 	.word	0x3fdfffff
 8084b28:	35afe535 	.word	0x35afe535
 8084b2c:	3fe00000 	.word	0x3fe00000
 8084b30:	94a03595 	.word	0x94a03595
 8084b34:	3fcfffff 	.word	0x3fcfffff
 8084b38:	3ff00000 	.word	0x3ff00000
 8084b3c:	3fe00000 	.word	0x3fe00000
 8084b40:	7fe00000 	.word	0x7fe00000
 8084b44:	7c9fffff 	.word	0x7c9fffff
 8084b48:	7fefffff 	.word	0x7fefffff
 8084b4c:	39500000 	.word	0x39500000

08084b50 <strtod>:
 8084b50:	4b02      	ldr	r3, [pc, #8]	; (8084b5c <strtod+0xc>)
 8084b52:	460a      	mov	r2, r1
 8084b54:	4601      	mov	r1, r0
 8084b56:	6818      	ldr	r0, [r3, #0]
 8084b58:	f7ff b9fa 	b.w	8083f50 <_strtod_r>
 8084b5c:	20000074 	.word	0x20000074

08084b60 <_strtol_r>:
 8084b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8084b64:	460f      	mov	r7, r1
 8084b66:	4680      	mov	r8, r0
 8084b68:	483f      	ldr	r0, [pc, #252]	; (8084c68 <_strtol_r+0x108>)
 8084b6a:	f8d0 9000 	ldr.w	r9, [r0]
 8084b6e:	463d      	mov	r5, r7
 8084b70:	f815 4b01 	ldrb.w	r4, [r5], #1
 8084b74:	eb09 0004 	add.w	r0, r9, r4
 8084b78:	7840      	ldrb	r0, [r0, #1]
 8084b7a:	f000 0008 	and.w	r0, r0, #8
 8084b7e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 8084b82:	b108      	cbz	r0, 8084b88 <_strtol_r+0x28>
 8084b84:	462f      	mov	r7, r5
 8084b86:	e7f2      	b.n	8084b6e <_strtol_r+0xe>
 8084b88:	2c2d      	cmp	r4, #45	; 0x2d
 8084b8a:	d103      	bne.n	8084b94 <_strtol_r+0x34>
 8084b8c:	1cbd      	adds	r5, r7, #2
 8084b8e:	787c      	ldrb	r4, [r7, #1]
 8084b90:	2601      	movs	r6, #1
 8084b92:	e003      	b.n	8084b9c <_strtol_r+0x3c>
 8084b94:	2c2b      	cmp	r4, #43	; 0x2b
 8084b96:	bf04      	itt	eq
 8084b98:	787c      	ldrbeq	r4, [r7, #1]
 8084b9a:	1cbd      	addeq	r5, r7, #2
 8084b9c:	b113      	cbz	r3, 8084ba4 <_strtol_r+0x44>
 8084b9e:	2b10      	cmp	r3, #16
 8084ba0:	d10a      	bne.n	8084bb8 <_strtol_r+0x58>
 8084ba2:	e05b      	b.n	8084c5c <_strtol_r+0xfc>
 8084ba4:	2c30      	cmp	r4, #48	; 0x30
 8084ba6:	d157      	bne.n	8084c58 <_strtol_r+0xf8>
 8084ba8:	7828      	ldrb	r0, [r5, #0]
 8084baa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8084bae:	2858      	cmp	r0, #88	; 0x58
 8084bb0:	d14d      	bne.n	8084c4e <_strtol_r+0xee>
 8084bb2:	786c      	ldrb	r4, [r5, #1]
 8084bb4:	2310      	movs	r3, #16
 8084bb6:	3502      	adds	r5, #2
 8084bb8:	2e00      	cmp	r6, #0
 8084bba:	bf14      	ite	ne
 8084bbc:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 8084bc0:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 8084bc4:	fbbc faf3 	udiv	sl, ip, r3
 8084bc8:	2700      	movs	r7, #0
 8084bca:	4638      	mov	r0, r7
 8084bcc:	fb03 cc1a 	mls	ip, r3, sl, ip
 8084bd0:	eb09 0e04 	add.w	lr, r9, r4
 8084bd4:	f89e e001 	ldrb.w	lr, [lr, #1]
 8084bd8:	f01e 0f04 	tst.w	lr, #4
 8084bdc:	d001      	beq.n	8084be2 <_strtol_r+0x82>
 8084bde:	3c30      	subs	r4, #48	; 0x30
 8084be0:	e00b      	b.n	8084bfa <_strtol_r+0x9a>
 8084be2:	f01e 0e03 	ands.w	lr, lr, #3
 8084be6:	d01b      	beq.n	8084c20 <_strtol_r+0xc0>
 8084be8:	f1be 0f01 	cmp.w	lr, #1
 8084bec:	bf0c      	ite	eq
 8084bee:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8084bf2:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8084bf6:	ebce 0404 	rsb	r4, lr, r4
 8084bfa:	42a3      	cmp	r3, r4
 8084bfc:	dd10      	ble.n	8084c20 <_strtol_r+0xc0>
 8084bfe:	f1b7 3fff 	cmp.w	r7, #4294967295
 8084c02:	d00a      	beq.n	8084c1a <_strtol_r+0xba>
 8084c04:	4550      	cmp	r0, sl
 8084c06:	d806      	bhi.n	8084c16 <_strtol_r+0xb6>
 8084c08:	d101      	bne.n	8084c0e <_strtol_r+0xae>
 8084c0a:	4564      	cmp	r4, ip
 8084c0c:	dc03      	bgt.n	8084c16 <_strtol_r+0xb6>
 8084c0e:	fb03 4000 	mla	r0, r3, r0, r4
 8084c12:	2701      	movs	r7, #1
 8084c14:	e001      	b.n	8084c1a <_strtol_r+0xba>
 8084c16:	f04f 37ff 	mov.w	r7, #4294967295
 8084c1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8084c1e:	e7d7      	b.n	8084bd0 <_strtol_r+0x70>
 8084c20:	1c7b      	adds	r3, r7, #1
 8084c22:	d10c      	bne.n	8084c3e <_strtol_r+0xde>
 8084c24:	2e00      	cmp	r6, #0
 8084c26:	f04f 0322 	mov.w	r3, #34	; 0x22
 8084c2a:	bf14      	ite	ne
 8084c2c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8084c30:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8084c34:	f8c8 3000 	str.w	r3, [r8]
 8084c38:	b92a      	cbnz	r2, 8084c46 <_strtol_r+0xe6>
 8084c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8084c3e:	b106      	cbz	r6, 8084c42 <_strtol_r+0xe2>
 8084c40:	4240      	negs	r0, r0
 8084c42:	b172      	cbz	r2, 8084c62 <_strtol_r+0x102>
 8084c44:	b107      	cbz	r7, 8084c48 <_strtol_r+0xe8>
 8084c46:	1e69      	subs	r1, r5, #1
 8084c48:	6011      	str	r1, [r2, #0]
 8084c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8084c4e:	2430      	movs	r4, #48	; 0x30
 8084c50:	2b00      	cmp	r3, #0
 8084c52:	d1b1      	bne.n	8084bb8 <_strtol_r+0x58>
 8084c54:	2308      	movs	r3, #8
 8084c56:	e7af      	b.n	8084bb8 <_strtol_r+0x58>
 8084c58:	230a      	movs	r3, #10
 8084c5a:	e7ad      	b.n	8084bb8 <_strtol_r+0x58>
 8084c5c:	2c30      	cmp	r4, #48	; 0x30
 8084c5e:	d0a3      	beq.n	8084ba8 <_strtol_r+0x48>
 8084c60:	e7aa      	b.n	8084bb8 <_strtol_r+0x58>
 8084c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8084c66:	bf00      	nop
 8084c68:	20000010 	.word	0x20000010

08084c6c <strtol>:
 8084c6c:	4613      	mov	r3, r2
 8084c6e:	460a      	mov	r2, r1
 8084c70:	4601      	mov	r1, r0
 8084c72:	4802      	ldr	r0, [pc, #8]	; (8084c7c <strtol+0x10>)
 8084c74:	6800      	ldr	r0, [r0, #0]
 8084c76:	f7ff bf73 	b.w	8084b60 <_strtol_r>
 8084c7a:	bf00      	nop
 8084c7c:	20000074 	.word	0x20000074

08084c80 <rshift>:
 8084c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8084c82:	6906      	ldr	r6, [r0, #16]
 8084c84:	114b      	asrs	r3, r1, #5
 8084c86:	42b3      	cmp	r3, r6
 8084c88:	f100 0514 	add.w	r5, r0, #20
 8084c8c:	da27      	bge.n	8084cde <rshift+0x5e>
 8084c8e:	f011 011f 	ands.w	r1, r1, #31
 8084c92:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8084c96:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8084c9a:	d101      	bne.n	8084ca0 <rshift+0x20>
 8084c9c:	4629      	mov	r1, r5
 8084c9e:	e016      	b.n	8084cce <rshift+0x4e>
 8084ca0:	1d14      	adds	r4, r2, #4
 8084ca2:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8084ca6:	462b      	mov	r3, r5
 8084ca8:	f1c1 0e20 	rsb	lr, r1, #32
 8084cac:	40ca      	lsrs	r2, r1
 8084cae:	42b4      	cmp	r4, r6
 8084cb0:	d209      	bcs.n	8084cc6 <rshift+0x46>
 8084cb2:	6827      	ldr	r7, [r4, #0]
 8084cb4:	fa07 f70e 	lsl.w	r7, r7, lr
 8084cb8:	433a      	orrs	r2, r7
 8084cba:	f843 2b04 	str.w	r2, [r3], #4
 8084cbe:	f854 2b04 	ldr.w	r2, [r4], #4
 8084cc2:	40ca      	lsrs	r2, r1
 8084cc4:	e7f3      	b.n	8084cae <rshift+0x2e>
 8084cc6:	601a      	str	r2, [r3, #0]
 8084cc8:	b152      	cbz	r2, 8084ce0 <rshift+0x60>
 8084cca:	3304      	adds	r3, #4
 8084ccc:	e008      	b.n	8084ce0 <rshift+0x60>
 8084cce:	42b2      	cmp	r2, r6
 8084cd0:	460b      	mov	r3, r1
 8084cd2:	d205      	bcs.n	8084ce0 <rshift+0x60>
 8084cd4:	f852 3b04 	ldr.w	r3, [r2], #4
 8084cd8:	f841 3b04 	str.w	r3, [r1], #4
 8084cdc:	e7f7      	b.n	8084cce <rshift+0x4e>
 8084cde:	462b      	mov	r3, r5
 8084ce0:	1b5b      	subs	r3, r3, r5
 8084ce2:	109b      	asrs	r3, r3, #2
 8084ce4:	6103      	str	r3, [r0, #16]
 8084ce6:	b903      	cbnz	r3, 8084cea <rshift+0x6a>
 8084ce8:	6143      	str	r3, [r0, #20]
 8084cea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08084cec <__hexdig_fun>:
 8084cec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8084cf0:	2b09      	cmp	r3, #9
 8084cf2:	d801      	bhi.n	8084cf8 <__hexdig_fun+0xc>
 8084cf4:	3820      	subs	r0, #32
 8084cf6:	e00a      	b.n	8084d0e <__hexdig_fun+0x22>
 8084cf8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8084cfc:	2b05      	cmp	r3, #5
 8084cfe:	d801      	bhi.n	8084d04 <__hexdig_fun+0x18>
 8084d00:	3847      	subs	r0, #71	; 0x47
 8084d02:	e004      	b.n	8084d0e <__hexdig_fun+0x22>
 8084d04:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8084d08:	2b05      	cmp	r3, #5
 8084d0a:	d802      	bhi.n	8084d12 <__hexdig_fun+0x26>
 8084d0c:	3827      	subs	r0, #39	; 0x27
 8084d0e:	b2c0      	uxtb	r0, r0
 8084d10:	4770      	bx	lr
 8084d12:	2000      	movs	r0, #0
 8084d14:	4770      	bx	lr

08084d16 <__gethex>:
 8084d16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084d1a:	b08b      	sub	sp, #44	; 0x2c
 8084d1c:	468a      	mov	sl, r1
 8084d1e:	4690      	mov	r8, r2
 8084d20:	9306      	str	r3, [sp, #24]
 8084d22:	9002      	str	r0, [sp, #8]
 8084d24:	f7ff f870 	bl	8083e08 <_localeconv_r>
 8084d28:	6803      	ldr	r3, [r0, #0]
 8084d2a:	f04f 0b00 	mov.w	fp, #0
 8084d2e:	4618      	mov	r0, r3
 8084d30:	9303      	str	r3, [sp, #12]
 8084d32:	f7ff f8cc 	bl	8083ece <strlen>
 8084d36:	9b03      	ldr	r3, [sp, #12]
 8084d38:	9001      	str	r0, [sp, #4]
 8084d3a:	4403      	add	r3, r0
 8084d3c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8084d40:	9307      	str	r3, [sp, #28]
 8084d42:	f8da 3000 	ldr.w	r3, [sl]
 8084d46:	3302      	adds	r3, #2
 8084d48:	461f      	mov	r7, r3
 8084d4a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8084d4e:	2830      	cmp	r0, #48	; 0x30
 8084d50:	d102      	bne.n	8084d58 <__gethex+0x42>
 8084d52:	f10b 0b01 	add.w	fp, fp, #1
 8084d56:	e7f7      	b.n	8084d48 <__gethex+0x32>
 8084d58:	f7ff ffc8 	bl	8084cec <__hexdig_fun>
 8084d5c:	4604      	mov	r4, r0
 8084d5e:	b9e0      	cbnz	r0, 8084d9a <__gethex+0x84>
 8084d60:	9a01      	ldr	r2, [sp, #4]
 8084d62:	9903      	ldr	r1, [sp, #12]
 8084d64:	4638      	mov	r0, r7
 8084d66:	f7ff f8ba 	bl	8083ede <strncmp>
 8084d6a:	2800      	cmp	r0, #0
 8084d6c:	d134      	bne.n	8084dd8 <__gethex+0xc2>
 8084d6e:	9b01      	ldr	r3, [sp, #4]
 8084d70:	5cf8      	ldrb	r0, [r7, r3]
 8084d72:	18fe      	adds	r6, r7, r3
 8084d74:	f7ff ffba 	bl	8084cec <__hexdig_fun>
 8084d78:	b380      	cbz	r0, 8084ddc <__gethex+0xc6>
 8084d7a:	4633      	mov	r3, r6
 8084d7c:	7818      	ldrb	r0, [r3, #0]
 8084d7e:	461f      	mov	r7, r3
 8084d80:	2830      	cmp	r0, #48	; 0x30
 8084d82:	f103 0301 	add.w	r3, r3, #1
 8084d86:	d0f9      	beq.n	8084d7c <__gethex+0x66>
 8084d88:	f7ff ffb0 	bl	8084cec <__hexdig_fun>
 8084d8c:	fab0 f580 	clz	r5, r0
 8084d90:	4634      	mov	r4, r6
 8084d92:	096d      	lsrs	r5, r5, #5
 8084d94:	f04f 0b01 	mov.w	fp, #1
 8084d98:	e001      	b.n	8084d9e <__gethex+0x88>
 8084d9a:	2500      	movs	r5, #0
 8084d9c:	462c      	mov	r4, r5
 8084d9e:	463a      	mov	r2, r7
 8084da0:	4616      	mov	r6, r2
 8084da2:	7830      	ldrb	r0, [r6, #0]
 8084da4:	3201      	adds	r2, #1
 8084da6:	f7ff ffa1 	bl	8084cec <__hexdig_fun>
 8084daa:	2800      	cmp	r0, #0
 8084dac:	d1f8      	bne.n	8084da0 <__gethex+0x8a>
 8084dae:	9a01      	ldr	r2, [sp, #4]
 8084db0:	9903      	ldr	r1, [sp, #12]
 8084db2:	4630      	mov	r0, r6
 8084db4:	f7ff f893 	bl	8083ede <strncmp>
 8084db8:	b950      	cbnz	r0, 8084dd0 <__gethex+0xba>
 8084dba:	b954      	cbnz	r4, 8084dd2 <__gethex+0xbc>
 8084dbc:	9b01      	ldr	r3, [sp, #4]
 8084dbe:	18f4      	adds	r4, r6, r3
 8084dc0:	4622      	mov	r2, r4
 8084dc2:	4616      	mov	r6, r2
 8084dc4:	7830      	ldrb	r0, [r6, #0]
 8084dc6:	3201      	adds	r2, #1
 8084dc8:	f7ff ff90 	bl	8084cec <__hexdig_fun>
 8084dcc:	2800      	cmp	r0, #0
 8084dce:	d1f8      	bne.n	8084dc2 <__gethex+0xac>
 8084dd0:	b134      	cbz	r4, 8084de0 <__gethex+0xca>
 8084dd2:	1ba4      	subs	r4, r4, r6
 8084dd4:	00a4      	lsls	r4, r4, #2
 8084dd6:	e003      	b.n	8084de0 <__gethex+0xca>
 8084dd8:	463e      	mov	r6, r7
 8084dda:	e000      	b.n	8084dde <__gethex+0xc8>
 8084ddc:	4604      	mov	r4, r0
 8084dde:	2501      	movs	r5, #1
 8084de0:	7833      	ldrb	r3, [r6, #0]
 8084de2:	2b50      	cmp	r3, #80	; 0x50
 8084de4:	d001      	beq.n	8084dea <__gethex+0xd4>
 8084de6:	2b70      	cmp	r3, #112	; 0x70
 8084de8:	d12a      	bne.n	8084e40 <__gethex+0x12a>
 8084dea:	7873      	ldrb	r3, [r6, #1]
 8084dec:	2b2b      	cmp	r3, #43	; 0x2b
 8084dee:	d008      	beq.n	8084e02 <__gethex+0xec>
 8084df0:	2b2d      	cmp	r3, #45	; 0x2d
 8084df2:	d003      	beq.n	8084dfc <__gethex+0xe6>
 8084df4:	1c71      	adds	r1, r6, #1
 8084df6:	f04f 0900 	mov.w	r9, #0
 8084dfa:	e005      	b.n	8084e08 <__gethex+0xf2>
 8084dfc:	f04f 0901 	mov.w	r9, #1
 8084e00:	e001      	b.n	8084e06 <__gethex+0xf0>
 8084e02:	f04f 0900 	mov.w	r9, #0
 8084e06:	1cb1      	adds	r1, r6, #2
 8084e08:	7808      	ldrb	r0, [r1, #0]
 8084e0a:	f7ff ff6f 	bl	8084cec <__hexdig_fun>
 8084e0e:	1e43      	subs	r3, r0, #1
 8084e10:	b2db      	uxtb	r3, r3
 8084e12:	2b18      	cmp	r3, #24
 8084e14:	d814      	bhi.n	8084e40 <__gethex+0x12a>
 8084e16:	f1a0 0210 	sub.w	r2, r0, #16
 8084e1a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8084e1e:	f7ff ff65 	bl	8084cec <__hexdig_fun>
 8084e22:	1e43      	subs	r3, r0, #1
 8084e24:	b2db      	uxtb	r3, r3
 8084e26:	2b18      	cmp	r3, #24
 8084e28:	d804      	bhi.n	8084e34 <__gethex+0x11e>
 8084e2a:	230a      	movs	r3, #10
 8084e2c:	fb03 0202 	mla	r2, r3, r2, r0
 8084e30:	3a10      	subs	r2, #16
 8084e32:	e7f2      	b.n	8084e1a <__gethex+0x104>
 8084e34:	f1b9 0f00 	cmp.w	r9, #0
 8084e38:	d000      	beq.n	8084e3c <__gethex+0x126>
 8084e3a:	4252      	negs	r2, r2
 8084e3c:	4414      	add	r4, r2
 8084e3e:	e000      	b.n	8084e42 <__gethex+0x12c>
 8084e40:	4631      	mov	r1, r6
 8084e42:	f8ca 1000 	str.w	r1, [sl]
 8084e46:	b12d      	cbz	r5, 8084e54 <__gethex+0x13e>
 8084e48:	f1bb 0f00 	cmp.w	fp, #0
 8084e4c:	bf14      	ite	ne
 8084e4e:	2000      	movne	r0, #0
 8084e50:	2006      	moveq	r0, #6
 8084e52:	e17c      	b.n	808514e <__gethex+0x438>
 8084e54:	4629      	mov	r1, r5
 8084e56:	1bf3      	subs	r3, r6, r7
 8084e58:	3b01      	subs	r3, #1
 8084e5a:	2b07      	cmp	r3, #7
 8084e5c:	dd02      	ble.n	8084e64 <__gethex+0x14e>
 8084e5e:	3101      	adds	r1, #1
 8084e60:	105b      	asrs	r3, r3, #1
 8084e62:	e7fa      	b.n	8084e5a <__gethex+0x144>
 8084e64:	9802      	ldr	r0, [sp, #8]
 8084e66:	f000 fa28 	bl	80852ba <_Balloc>
 8084e6a:	f04f 0900 	mov.w	r9, #0
 8084e6e:	4605      	mov	r5, r0
 8084e70:	46cb      	mov	fp, r9
 8084e72:	9b01      	ldr	r3, [sp, #4]
 8084e74:	f100 0a14 	add.w	sl, r0, #20
 8084e78:	f1c3 0301 	rsb	r3, r3, #1
 8084e7c:	f8cd a010 	str.w	sl, [sp, #16]
 8084e80:	9308      	str	r3, [sp, #32]
 8084e82:	42b7      	cmp	r7, r6
 8084e84:	d22f      	bcs.n	8084ee6 <__gethex+0x1d0>
 8084e86:	1e73      	subs	r3, r6, #1
 8084e88:	9305      	str	r3, [sp, #20]
 8084e8a:	9a07      	ldr	r2, [sp, #28]
 8084e8c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8084e90:	4293      	cmp	r3, r2
 8084e92:	d00b      	beq.n	8084eac <__gethex+0x196>
 8084e94:	f1bb 0f20 	cmp.w	fp, #32
 8084e98:	d116      	bne.n	8084ec8 <__gethex+0x1b2>
 8084e9a:	9b04      	ldr	r3, [sp, #16]
 8084e9c:	f8c3 9000 	str.w	r9, [r3]
 8084ea0:	3304      	adds	r3, #4
 8084ea2:	f04f 0900 	mov.w	r9, #0
 8084ea6:	9304      	str	r3, [sp, #16]
 8084ea8:	46cb      	mov	fp, r9
 8084eaa:	e00d      	b.n	8084ec8 <__gethex+0x1b2>
 8084eac:	9b05      	ldr	r3, [sp, #20]
 8084eae:	9a08      	ldr	r2, [sp, #32]
 8084eb0:	4413      	add	r3, r2
 8084eb2:	429f      	cmp	r7, r3
 8084eb4:	d8ee      	bhi.n	8084e94 <__gethex+0x17e>
 8084eb6:	4618      	mov	r0, r3
 8084eb8:	9a01      	ldr	r2, [sp, #4]
 8084eba:	9903      	ldr	r1, [sp, #12]
 8084ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8084ebe:	f7ff f80e 	bl	8083ede <strncmp>
 8084ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8084ec4:	b168      	cbz	r0, 8084ee2 <__gethex+0x1cc>
 8084ec6:	e7e5      	b.n	8084e94 <__gethex+0x17e>
 8084ec8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8084ecc:	f7ff ff0e 	bl	8084cec <__hexdig_fun>
 8084ed0:	f000 000f 	and.w	r0, r0, #15
 8084ed4:	fa00 f00b 	lsl.w	r0, r0, fp
 8084ed8:	9b05      	ldr	r3, [sp, #20]
 8084eda:	ea49 0900 	orr.w	r9, r9, r0
 8084ede:	f10b 0b04 	add.w	fp, fp, #4
 8084ee2:	461e      	mov	r6, r3
 8084ee4:	e7cd      	b.n	8084e82 <__gethex+0x16c>
 8084ee6:	9804      	ldr	r0, [sp, #16]
 8084ee8:	f840 9b04 	str.w	r9, [r0], #4
 8084eec:	ebca 0000 	rsb	r0, sl, r0
 8084ef0:	1080      	asrs	r0, r0, #2
 8084ef2:	6128      	str	r0, [r5, #16]
 8084ef4:	0147      	lsls	r7, r0, #5
 8084ef6:	4648      	mov	r0, r9
 8084ef8:	f000 faa4 	bl	8085444 <__hi0bits>
 8084efc:	f8d8 6000 	ldr.w	r6, [r8]
 8084f00:	1a38      	subs	r0, r7, r0
 8084f02:	42b0      	cmp	r0, r6
 8084f04:	dd26      	ble.n	8084f54 <__gethex+0x23e>
 8084f06:	1b87      	subs	r7, r0, r6
 8084f08:	4639      	mov	r1, r7
 8084f0a:	4628      	mov	r0, r5
 8084f0c:	f000 fd9b 	bl	8085a46 <__any_on>
 8084f10:	b1c8      	cbz	r0, 8084f46 <__gethex+0x230>
 8084f12:	1e7b      	subs	r3, r7, #1
 8084f14:	1159      	asrs	r1, r3, #5
 8084f16:	f003 021f 	and.w	r2, r3, #31
 8084f1a:	f04f 0901 	mov.w	r9, #1
 8084f1e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8084f22:	fa09 f202 	lsl.w	r2, r9, r2
 8084f26:	420a      	tst	r2, r1
 8084f28:	d00e      	beq.n	8084f48 <__gethex+0x232>
 8084f2a:	454b      	cmp	r3, r9
 8084f2c:	dc02      	bgt.n	8084f34 <__gethex+0x21e>
 8084f2e:	f04f 0902 	mov.w	r9, #2
 8084f32:	e009      	b.n	8084f48 <__gethex+0x232>
 8084f34:	1eb9      	subs	r1, r7, #2
 8084f36:	4628      	mov	r0, r5
 8084f38:	f000 fd85 	bl	8085a46 <__any_on>
 8084f3c:	2800      	cmp	r0, #0
 8084f3e:	d0f6      	beq.n	8084f2e <__gethex+0x218>
 8084f40:	f04f 0903 	mov.w	r9, #3
 8084f44:	e000      	b.n	8084f48 <__gethex+0x232>
 8084f46:	4681      	mov	r9, r0
 8084f48:	4639      	mov	r1, r7
 8084f4a:	4628      	mov	r0, r5
 8084f4c:	f7ff fe98 	bl	8084c80 <rshift>
 8084f50:	443c      	add	r4, r7
 8084f52:	e00c      	b.n	8084f6e <__gethex+0x258>
 8084f54:	da09      	bge.n	8084f6a <__gethex+0x254>
 8084f56:	1a37      	subs	r7, r6, r0
 8084f58:	4629      	mov	r1, r5
 8084f5a:	463a      	mov	r2, r7
 8084f5c:	9802      	ldr	r0, [sp, #8]
 8084f5e:	f000 fba5 	bl	80856ac <__lshift>
 8084f62:	4605      	mov	r5, r0
 8084f64:	1be4      	subs	r4, r4, r7
 8084f66:	f100 0a14 	add.w	sl, r0, #20
 8084f6a:	f04f 0900 	mov.w	r9, #0
 8084f6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8084f72:	429c      	cmp	r4, r3
 8084f74:	dd08      	ble.n	8084f88 <__gethex+0x272>
 8084f76:	9802      	ldr	r0, [sp, #8]
 8084f78:	4629      	mov	r1, r5
 8084f7a:	f000 f9d3 	bl	8085324 <_Bfree>
 8084f7e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8084f80:	2300      	movs	r3, #0
 8084f82:	6013      	str	r3, [r2, #0]
 8084f84:	20a3      	movs	r0, #163	; 0xa3
 8084f86:	e0e2      	b.n	808514e <__gethex+0x438>
 8084f88:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8084f8c:	4284      	cmp	r4, r0
 8084f8e:	da53      	bge.n	8085038 <__gethex+0x322>
 8084f90:	1b04      	subs	r4, r0, r4
 8084f92:	42a6      	cmp	r6, r4
 8084f94:	dc2e      	bgt.n	8084ff4 <__gethex+0x2de>
 8084f96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8084f9a:	2b02      	cmp	r3, #2
 8084f9c:	d01a      	beq.n	8084fd4 <__gethex+0x2be>
 8084f9e:	2b03      	cmp	r3, #3
 8084fa0:	d01c      	beq.n	8084fdc <__gethex+0x2c6>
 8084fa2:	2b01      	cmp	r3, #1
 8084fa4:	d11d      	bne.n	8084fe2 <__gethex+0x2cc>
 8084fa6:	42a6      	cmp	r6, r4
 8084fa8:	d11b      	bne.n	8084fe2 <__gethex+0x2cc>
 8084faa:	2e01      	cmp	r6, #1
 8084fac:	dc0b      	bgt.n	8084fc6 <__gethex+0x2b0>
 8084fae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8084fb2:	9a06      	ldr	r2, [sp, #24]
 8084fb4:	2062      	movs	r0, #98	; 0x62
 8084fb6:	6013      	str	r3, [r2, #0]
 8084fb8:	2301      	movs	r3, #1
 8084fba:	612b      	str	r3, [r5, #16]
 8084fbc:	f8ca 3000 	str.w	r3, [sl]
 8084fc0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8084fc2:	601d      	str	r5, [r3, #0]
 8084fc4:	e0c3      	b.n	808514e <__gethex+0x438>
 8084fc6:	1e71      	subs	r1, r6, #1
 8084fc8:	4628      	mov	r0, r5
 8084fca:	f000 fd3c 	bl	8085a46 <__any_on>
 8084fce:	2800      	cmp	r0, #0
 8084fd0:	d1ed      	bne.n	8084fae <__gethex+0x298>
 8084fd2:	e006      	b.n	8084fe2 <__gethex+0x2cc>
 8084fd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8084fd6:	2b00      	cmp	r3, #0
 8084fd8:	d0e9      	beq.n	8084fae <__gethex+0x298>
 8084fda:	e002      	b.n	8084fe2 <__gethex+0x2cc>
 8084fdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8084fde:	2b00      	cmp	r3, #0
 8084fe0:	d1e5      	bne.n	8084fae <__gethex+0x298>
 8084fe2:	9802      	ldr	r0, [sp, #8]
 8084fe4:	4629      	mov	r1, r5
 8084fe6:	f000 f99d 	bl	8085324 <_Bfree>
 8084fea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8084fec:	2300      	movs	r3, #0
 8084fee:	6013      	str	r3, [r2, #0]
 8084ff0:	2050      	movs	r0, #80	; 0x50
 8084ff2:	e0ac      	b.n	808514e <__gethex+0x438>
 8084ff4:	1e67      	subs	r7, r4, #1
 8084ff6:	f1b9 0f00 	cmp.w	r9, #0
 8084ffa:	d106      	bne.n	808500a <__gethex+0x2f4>
 8084ffc:	b13f      	cbz	r7, 808500e <__gethex+0x2f8>
 8084ffe:	4639      	mov	r1, r7
 8085000:	4628      	mov	r0, r5
 8085002:	f000 fd20 	bl	8085a46 <__any_on>
 8085006:	4681      	mov	r9, r0
 8085008:	e001      	b.n	808500e <__gethex+0x2f8>
 808500a:	f04f 0901 	mov.w	r9, #1
 808500e:	117a      	asrs	r2, r7, #5
 8085010:	2301      	movs	r3, #1
 8085012:	f007 071f 	and.w	r7, r7, #31
 8085016:	fa03 f707 	lsl.w	r7, r3, r7
 808501a:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 808501e:	4621      	mov	r1, r4
 8085020:	421f      	tst	r7, r3
 8085022:	4628      	mov	r0, r5
 8085024:	bf18      	it	ne
 8085026:	f049 0902 	orrne.w	r9, r9, #2
 808502a:	1b36      	subs	r6, r6, r4
 808502c:	f7ff fe28 	bl	8084c80 <rshift>
 8085030:	2702      	movs	r7, #2
 8085032:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8085036:	e000      	b.n	808503a <__gethex+0x324>
 8085038:	2701      	movs	r7, #1
 808503a:	f1b9 0f00 	cmp.w	r9, #0
 808503e:	f000 8081 	beq.w	8085144 <__gethex+0x42e>
 8085042:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8085046:	2b02      	cmp	r3, #2
 8085048:	d00e      	beq.n	8085068 <__gethex+0x352>
 808504a:	2b03      	cmp	r3, #3
 808504c:	d010      	beq.n	8085070 <__gethex+0x35a>
 808504e:	2b01      	cmp	r3, #1
 8085050:	d176      	bne.n	8085140 <__gethex+0x42a>
 8085052:	f019 0f02 	tst.w	r9, #2
 8085056:	d073      	beq.n	8085140 <__gethex+0x42a>
 8085058:	f8da 0000 	ldr.w	r0, [sl]
 808505c:	ea49 0900 	orr.w	r9, r9, r0
 8085060:	f019 0f01 	tst.w	r9, #1
 8085064:	d107      	bne.n	8085076 <__gethex+0x360>
 8085066:	e06b      	b.n	8085140 <__gethex+0x42a>
 8085068:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808506a:	f1c3 0301 	rsb	r3, r3, #1
 808506e:	9315      	str	r3, [sp, #84]	; 0x54
 8085070:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8085072:	2b00      	cmp	r3, #0
 8085074:	d064      	beq.n	8085140 <__gethex+0x42a>
 8085076:	f8d5 a010 	ldr.w	sl, [r5, #16]
 808507a:	f105 0314 	add.w	r3, r5, #20
 808507e:	ea4f 098a 	mov.w	r9, sl, lsl #2
 8085082:	eb03 0109 	add.w	r1, r3, r9
 8085086:	2000      	movs	r0, #0
 8085088:	681a      	ldr	r2, [r3, #0]
 808508a:	f1b2 3fff 	cmp.w	r2, #4294967295
 808508e:	d002      	beq.n	8085096 <__gethex+0x380>
 8085090:	3201      	adds	r2, #1
 8085092:	601a      	str	r2, [r3, #0]
 8085094:	e020      	b.n	80850d8 <__gethex+0x3c2>
 8085096:	f843 0b04 	str.w	r0, [r3], #4
 808509a:	4299      	cmp	r1, r3
 808509c:	d8f4      	bhi.n	8085088 <__gethex+0x372>
 808509e:	68ab      	ldr	r3, [r5, #8]
 80850a0:	459a      	cmp	sl, r3
 80850a2:	db12      	blt.n	80850ca <__gethex+0x3b4>
 80850a4:	6869      	ldr	r1, [r5, #4]
 80850a6:	9802      	ldr	r0, [sp, #8]
 80850a8:	3101      	adds	r1, #1
 80850aa:	f000 f906 	bl	80852ba <_Balloc>
 80850ae:	4683      	mov	fp, r0
 80850b0:	692a      	ldr	r2, [r5, #16]
 80850b2:	f105 010c 	add.w	r1, r5, #12
 80850b6:	3202      	adds	r2, #2
 80850b8:	0092      	lsls	r2, r2, #2
 80850ba:	300c      	adds	r0, #12
 80850bc:	f7fe fea8 	bl	8083e10 <memcpy>
 80850c0:	4629      	mov	r1, r5
 80850c2:	9802      	ldr	r0, [sp, #8]
 80850c4:	f000 f92e 	bl	8085324 <_Bfree>
 80850c8:	465d      	mov	r5, fp
 80850ca:	692b      	ldr	r3, [r5, #16]
 80850cc:	1c5a      	adds	r2, r3, #1
 80850ce:	612a      	str	r2, [r5, #16]
 80850d0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80850d4:	2201      	movs	r2, #1
 80850d6:	615a      	str	r2, [r3, #20]
 80850d8:	2f02      	cmp	r7, #2
 80850da:	f105 0214 	add.w	r2, r5, #20
 80850de:	d111      	bne.n	8085104 <__gethex+0x3ee>
 80850e0:	f8d8 3000 	ldr.w	r3, [r8]
 80850e4:	3b01      	subs	r3, #1
 80850e6:	429e      	cmp	r6, r3
 80850e8:	d127      	bne.n	808513a <__gethex+0x424>
 80850ea:	1171      	asrs	r1, r6, #5
 80850ec:	2301      	movs	r3, #1
 80850ee:	f006 061f 	and.w	r6, r6, #31
 80850f2:	fa03 f606 	lsl.w	r6, r3, r6
 80850f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80850fa:	421e      	tst	r6, r3
 80850fc:	bf0c      	ite	eq
 80850fe:	2702      	moveq	r7, #2
 8085100:	2701      	movne	r7, #1
 8085102:	e01a      	b.n	808513a <__gethex+0x424>
 8085104:	692b      	ldr	r3, [r5, #16]
 8085106:	459a      	cmp	sl, r3
 8085108:	da0a      	bge.n	8085120 <__gethex+0x40a>
 808510a:	2101      	movs	r1, #1
 808510c:	4628      	mov	r0, r5
 808510e:	f7ff fdb7 	bl	8084c80 <rshift>
 8085112:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8085116:	3401      	adds	r4, #1
 8085118:	429c      	cmp	r4, r3
 808511a:	f73f af2c 	bgt.w	8084f76 <__gethex+0x260>
 808511e:	e00b      	b.n	8085138 <__gethex+0x422>
 8085120:	f016 061f 	ands.w	r6, r6, #31
 8085124:	d008      	beq.n	8085138 <__gethex+0x422>
 8085126:	4491      	add	r9, r2
 8085128:	f859 0c04 	ldr.w	r0, [r9, #-4]
 808512c:	f000 f98a 	bl	8085444 <__hi0bits>
 8085130:	f1c6 0620 	rsb	r6, r6, #32
 8085134:	42b0      	cmp	r0, r6
 8085136:	dbe8      	blt.n	808510a <__gethex+0x3f4>
 8085138:	2701      	movs	r7, #1
 808513a:	f047 0720 	orr.w	r7, r7, #32
 808513e:	e001      	b.n	8085144 <__gethex+0x42e>
 8085140:	f047 0710 	orr.w	r7, r7, #16
 8085144:	4638      	mov	r0, r7
 8085146:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8085148:	601d      	str	r5, [r3, #0]
 808514a:	9b06      	ldr	r3, [sp, #24]
 808514c:	601c      	str	r4, [r3, #0]
 808514e:	b00b      	add	sp, #44	; 0x2c
 8085150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08085154 <L_shift>:
 8085154:	f1c2 0208 	rsb	r2, r2, #8
 8085158:	0092      	lsls	r2, r2, #2
 808515a:	b570      	push	{r4, r5, r6, lr}
 808515c:	f1c2 0620 	rsb	r6, r2, #32
 8085160:	6843      	ldr	r3, [r0, #4]
 8085162:	6805      	ldr	r5, [r0, #0]
 8085164:	fa03 f406 	lsl.w	r4, r3, r6
 8085168:	432c      	orrs	r4, r5
 808516a:	40d3      	lsrs	r3, r2
 808516c:	6004      	str	r4, [r0, #0]
 808516e:	f840 3f04 	str.w	r3, [r0, #4]!
 8085172:	4288      	cmp	r0, r1
 8085174:	d3f4      	bcc.n	8085160 <L_shift+0xc>
 8085176:	bd70      	pop	{r4, r5, r6, pc}

08085178 <__match>:
 8085178:	b530      	push	{r4, r5, lr}
 808517a:	6803      	ldr	r3, [r0, #0]
 808517c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8085180:	3301      	adds	r3, #1
 8085182:	b14c      	cbz	r4, 8085198 <__match+0x20>
 8085184:	781a      	ldrb	r2, [r3, #0]
 8085186:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 808518a:	2d19      	cmp	r5, #25
 808518c:	bf98      	it	ls
 808518e:	3220      	addls	r2, #32
 8085190:	42a2      	cmp	r2, r4
 8085192:	d0f3      	beq.n	808517c <__match+0x4>
 8085194:	2000      	movs	r0, #0
 8085196:	bd30      	pop	{r4, r5, pc}
 8085198:	6003      	str	r3, [r0, #0]
 808519a:	2001      	movs	r0, #1
 808519c:	bd30      	pop	{r4, r5, pc}

0808519e <__hexnan>:
 808519e:	680b      	ldr	r3, [r1, #0]
 80851a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80851a4:	115e      	asrs	r6, r3, #5
 80851a6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80851aa:	f013 031f 	ands.w	r3, r3, #31
 80851ae:	bf18      	it	ne
 80851b0:	3604      	addne	r6, #4
 80851b2:	1f35      	subs	r5, r6, #4
 80851b4:	4617      	mov	r7, r2
 80851b6:	2200      	movs	r2, #0
 80851b8:	4682      	mov	sl, r0
 80851ba:	46a8      	mov	r8, r5
 80851bc:	462c      	mov	r4, r5
 80851be:	4691      	mov	r9, r2
 80851c0:	b085      	sub	sp, #20
 80851c2:	f8d0 b000 	ldr.w	fp, [r0]
 80851c6:	9301      	str	r3, [sp, #4]
 80851c8:	f846 2c04 	str.w	r2, [r6, #-4]
 80851cc:	9200      	str	r2, [sp, #0]
 80851ce:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 80851d2:	2900      	cmp	r1, #0
 80851d4:	d03c      	beq.n	8085250 <__hexnan+0xb2>
 80851d6:	4608      	mov	r0, r1
 80851d8:	9203      	str	r2, [sp, #12]
 80851da:	9102      	str	r1, [sp, #8]
 80851dc:	f7ff fd86 	bl	8084cec <__hexdig_fun>
 80851e0:	9a03      	ldr	r2, [sp, #12]
 80851e2:	bb00      	cbnz	r0, 8085226 <__hexnan+0x88>
 80851e4:	9902      	ldr	r1, [sp, #8]
 80851e6:	2920      	cmp	r1, #32
 80851e8:	d816      	bhi.n	8085218 <__hexnan+0x7a>
 80851ea:	9b00      	ldr	r3, [sp, #0]
 80851ec:	4599      	cmp	r9, r3
 80851ee:	ddee      	ble.n	80851ce <__hexnan+0x30>
 80851f0:	4544      	cmp	r4, r8
 80851f2:	d205      	bcs.n	8085200 <__hexnan+0x62>
 80851f4:	2a07      	cmp	r2, #7
 80851f6:	dc03      	bgt.n	8085200 <__hexnan+0x62>
 80851f8:	4641      	mov	r1, r8
 80851fa:	4620      	mov	r0, r4
 80851fc:	f7ff ffaa 	bl	8085154 <L_shift>
 8085200:	42bc      	cmp	r4, r7
 8085202:	d923      	bls.n	808524c <__hexnan+0xae>
 8085204:	2300      	movs	r3, #0
 8085206:	f1a4 0804 	sub.w	r8, r4, #4
 808520a:	f844 3c04 	str.w	r3, [r4, #-4]
 808520e:	f8cd 9000 	str.w	r9, [sp]
 8085212:	4644      	mov	r4, r8
 8085214:	461a      	mov	r2, r3
 8085216:	e7da      	b.n	80851ce <__hexnan+0x30>
 8085218:	2929      	cmp	r1, #41	; 0x29
 808521a:	d148      	bne.n	80852ae <__hexnan+0x110>
 808521c:	f10b 0301 	add.w	r3, fp, #1
 8085220:	f8ca 3000 	str.w	r3, [sl]
 8085224:	e014      	b.n	8085250 <__hexnan+0xb2>
 8085226:	3201      	adds	r2, #1
 8085228:	2a08      	cmp	r2, #8
 808522a:	f109 0901 	add.w	r9, r9, #1
 808522e:	dd06      	ble.n	808523e <__hexnan+0xa0>
 8085230:	42bc      	cmp	r4, r7
 8085232:	d9cc      	bls.n	80851ce <__hexnan+0x30>
 8085234:	2300      	movs	r3, #0
 8085236:	f844 3c04 	str.w	r3, [r4, #-4]
 808523a:	2201      	movs	r2, #1
 808523c:	3c04      	subs	r4, #4
 808523e:	6821      	ldr	r1, [r4, #0]
 8085240:	f000 000f 	and.w	r0, r0, #15
 8085244:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 8085248:	6020      	str	r0, [r4, #0]
 808524a:	e7c0      	b.n	80851ce <__hexnan+0x30>
 808524c:	2208      	movs	r2, #8
 808524e:	e7be      	b.n	80851ce <__hexnan+0x30>
 8085250:	f1b9 0f00 	cmp.w	r9, #0
 8085254:	d02b      	beq.n	80852ae <__hexnan+0x110>
 8085256:	4544      	cmp	r4, r8
 8085258:	d205      	bcs.n	8085266 <__hexnan+0xc8>
 808525a:	2a07      	cmp	r2, #7
 808525c:	dc03      	bgt.n	8085266 <__hexnan+0xc8>
 808525e:	4641      	mov	r1, r8
 8085260:	4620      	mov	r0, r4
 8085262:	f7ff ff77 	bl	8085154 <L_shift>
 8085266:	42bc      	cmp	r4, r7
 8085268:	d90c      	bls.n	8085284 <__hexnan+0xe6>
 808526a:	463b      	mov	r3, r7
 808526c:	f854 2b04 	ldr.w	r2, [r4], #4
 8085270:	42a5      	cmp	r5, r4
 8085272:	f843 2b04 	str.w	r2, [r3], #4
 8085276:	d2f9      	bcs.n	808526c <__hexnan+0xce>
 8085278:	2200      	movs	r2, #0
 808527a:	f843 2b04 	str.w	r2, [r3], #4
 808527e:	429d      	cmp	r5, r3
 8085280:	d2fb      	bcs.n	808527a <__hexnan+0xdc>
 8085282:	e00b      	b.n	808529c <__hexnan+0xfe>
 8085284:	9b01      	ldr	r3, [sp, #4]
 8085286:	b14b      	cbz	r3, 808529c <__hexnan+0xfe>
 8085288:	f1c3 0220 	rsb	r2, r3, #32
 808528c:	f04f 33ff 	mov.w	r3, #4294967295
 8085290:	40d3      	lsrs	r3, r2
 8085292:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8085296:	4013      	ands	r3, r2
 8085298:	f846 3c04 	str.w	r3, [r6, #-4]
 808529c:	682b      	ldr	r3, [r5, #0]
 808529e:	b943      	cbnz	r3, 80852b2 <__hexnan+0x114>
 80852a0:	42bd      	cmp	r5, r7
 80852a2:	d102      	bne.n	80852aa <__hexnan+0x10c>
 80852a4:	2301      	movs	r3, #1
 80852a6:	602b      	str	r3, [r5, #0]
 80852a8:	e003      	b.n	80852b2 <__hexnan+0x114>
 80852aa:	3d04      	subs	r5, #4
 80852ac:	e7f6      	b.n	808529c <__hexnan+0xfe>
 80852ae:	2004      	movs	r0, #4
 80852b0:	e000      	b.n	80852b4 <__hexnan+0x116>
 80852b2:	2005      	movs	r0, #5
 80852b4:	b005      	add	sp, #20
 80852b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080852ba <_Balloc>:
 80852ba:	b570      	push	{r4, r5, r6, lr}
 80852bc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80852be:	4604      	mov	r4, r0
 80852c0:	460e      	mov	r6, r1
 80852c2:	b93d      	cbnz	r5, 80852d4 <_Balloc+0x1a>
 80852c4:	2010      	movs	r0, #16
 80852c6:	f7fb febb 	bl	8081040 <malloc>
 80852ca:	6260      	str	r0, [r4, #36]	; 0x24
 80852cc:	6045      	str	r5, [r0, #4]
 80852ce:	6085      	str	r5, [r0, #8]
 80852d0:	6005      	str	r5, [r0, #0]
 80852d2:	60c5      	str	r5, [r0, #12]
 80852d4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80852d6:	68eb      	ldr	r3, [r5, #12]
 80852d8:	b143      	cbz	r3, 80852ec <_Balloc+0x32>
 80852da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80852dc:	68db      	ldr	r3, [r3, #12]
 80852de:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80852e2:	b178      	cbz	r0, 8085304 <_Balloc+0x4a>
 80852e4:	6802      	ldr	r2, [r0, #0]
 80852e6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80852ea:	e017      	b.n	808531c <_Balloc+0x62>
 80852ec:	2221      	movs	r2, #33	; 0x21
 80852ee:	2104      	movs	r1, #4
 80852f0:	4620      	mov	r0, r4
 80852f2:	f000 fbca 	bl	8085a8a <_calloc_r>
 80852f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80852f8:	60e8      	str	r0, [r5, #12]
 80852fa:	68db      	ldr	r3, [r3, #12]
 80852fc:	2b00      	cmp	r3, #0
 80852fe:	d1ec      	bne.n	80852da <_Balloc+0x20>
 8085300:	2000      	movs	r0, #0
 8085302:	bd70      	pop	{r4, r5, r6, pc}
 8085304:	2101      	movs	r1, #1
 8085306:	fa01 f506 	lsl.w	r5, r1, r6
 808530a:	1d6a      	adds	r2, r5, #5
 808530c:	0092      	lsls	r2, r2, #2
 808530e:	4620      	mov	r0, r4
 8085310:	f000 fbbb 	bl	8085a8a <_calloc_r>
 8085314:	2800      	cmp	r0, #0
 8085316:	d0f3      	beq.n	8085300 <_Balloc+0x46>
 8085318:	6046      	str	r6, [r0, #4]
 808531a:	6085      	str	r5, [r0, #8]
 808531c:	2300      	movs	r3, #0
 808531e:	6103      	str	r3, [r0, #16]
 8085320:	60c3      	str	r3, [r0, #12]
 8085322:	bd70      	pop	{r4, r5, r6, pc}

08085324 <_Bfree>:
 8085324:	b570      	push	{r4, r5, r6, lr}
 8085326:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8085328:	4606      	mov	r6, r0
 808532a:	460d      	mov	r5, r1
 808532c:	b93c      	cbnz	r4, 808533e <_Bfree+0x1a>
 808532e:	2010      	movs	r0, #16
 8085330:	f7fb fe86 	bl	8081040 <malloc>
 8085334:	6270      	str	r0, [r6, #36]	; 0x24
 8085336:	6044      	str	r4, [r0, #4]
 8085338:	6084      	str	r4, [r0, #8]
 808533a:	6004      	str	r4, [r0, #0]
 808533c:	60c4      	str	r4, [r0, #12]
 808533e:	b13d      	cbz	r5, 8085350 <_Bfree+0x2c>
 8085340:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8085342:	686a      	ldr	r2, [r5, #4]
 8085344:	68db      	ldr	r3, [r3, #12]
 8085346:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 808534a:	6029      	str	r1, [r5, #0]
 808534c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8085350:	bd70      	pop	{r4, r5, r6, pc}

08085352 <__multadd>:
 8085352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8085356:	4606      	mov	r6, r0
 8085358:	460c      	mov	r4, r1
 808535a:	690d      	ldr	r5, [r1, #16]
 808535c:	461f      	mov	r7, r3
 808535e:	f101 0e14 	add.w	lr, r1, #20
 8085362:	2300      	movs	r3, #0
 8085364:	f8de 0000 	ldr.w	r0, [lr]
 8085368:	3301      	adds	r3, #1
 808536a:	b281      	uxth	r1, r0
 808536c:	fb02 7101 	mla	r1, r2, r1, r7
 8085370:	0c00      	lsrs	r0, r0, #16
 8085372:	0c0f      	lsrs	r7, r1, #16
 8085374:	fb02 7000 	mla	r0, r2, r0, r7
 8085378:	b289      	uxth	r1, r1
 808537a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 808537e:	429d      	cmp	r5, r3
 8085380:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8085384:	f84e 1b04 	str.w	r1, [lr], #4
 8085388:	dcec      	bgt.n	8085364 <__multadd+0x12>
 808538a:	b1d7      	cbz	r7, 80853c2 <__multadd+0x70>
 808538c:	68a3      	ldr	r3, [r4, #8]
 808538e:	429d      	cmp	r5, r3
 8085390:	db12      	blt.n	80853b8 <__multadd+0x66>
 8085392:	6861      	ldr	r1, [r4, #4]
 8085394:	4630      	mov	r0, r6
 8085396:	3101      	adds	r1, #1
 8085398:	f7ff ff8f 	bl	80852ba <_Balloc>
 808539c:	4680      	mov	r8, r0
 808539e:	6922      	ldr	r2, [r4, #16]
 80853a0:	f104 010c 	add.w	r1, r4, #12
 80853a4:	3202      	adds	r2, #2
 80853a6:	0092      	lsls	r2, r2, #2
 80853a8:	300c      	adds	r0, #12
 80853aa:	f7fe fd31 	bl	8083e10 <memcpy>
 80853ae:	4621      	mov	r1, r4
 80853b0:	4630      	mov	r0, r6
 80853b2:	f7ff ffb7 	bl	8085324 <_Bfree>
 80853b6:	4644      	mov	r4, r8
 80853b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80853bc:	3501      	adds	r5, #1
 80853be:	615f      	str	r7, [r3, #20]
 80853c0:	6125      	str	r5, [r4, #16]
 80853c2:	4620      	mov	r0, r4
 80853c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080853c8 <__s2b>:
 80853c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80853cc:	4606      	mov	r6, r0
 80853ce:	4615      	mov	r5, r2
 80853d0:	461f      	mov	r7, r3
 80853d2:	2209      	movs	r2, #9
 80853d4:	3308      	adds	r3, #8
 80853d6:	460c      	mov	r4, r1
 80853d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80853dc:	2100      	movs	r1, #0
 80853de:	2201      	movs	r2, #1
 80853e0:	429a      	cmp	r2, r3
 80853e2:	da02      	bge.n	80853ea <__s2b+0x22>
 80853e4:	0052      	lsls	r2, r2, #1
 80853e6:	3101      	adds	r1, #1
 80853e8:	e7fa      	b.n	80853e0 <__s2b+0x18>
 80853ea:	4630      	mov	r0, r6
 80853ec:	f7ff ff65 	bl	80852ba <_Balloc>
 80853f0:	9b08      	ldr	r3, [sp, #32]
 80853f2:	2d09      	cmp	r5, #9
 80853f4:	6143      	str	r3, [r0, #20]
 80853f6:	f04f 0301 	mov.w	r3, #1
 80853fa:	6103      	str	r3, [r0, #16]
 80853fc:	dd11      	ble.n	8085422 <__s2b+0x5a>
 80853fe:	f104 0809 	add.w	r8, r4, #9
 8085402:	46c1      	mov	r9, r8
 8085404:	442c      	add	r4, r5
 8085406:	f819 3b01 	ldrb.w	r3, [r9], #1
 808540a:	4601      	mov	r1, r0
 808540c:	3b30      	subs	r3, #48	; 0x30
 808540e:	220a      	movs	r2, #10
 8085410:	4630      	mov	r0, r6
 8085412:	f7ff ff9e 	bl	8085352 <__multadd>
 8085416:	45a1      	cmp	r9, r4
 8085418:	d1f5      	bne.n	8085406 <__s2b+0x3e>
 808541a:	eb08 0405 	add.w	r4, r8, r5
 808541e:	3c08      	subs	r4, #8
 8085420:	e001      	b.n	8085426 <__s2b+0x5e>
 8085422:	340a      	adds	r4, #10
 8085424:	2509      	movs	r5, #9
 8085426:	1b2d      	subs	r5, r5, r4
 8085428:	1963      	adds	r3, r4, r5
 808542a:	429f      	cmp	r7, r3
 808542c:	dd08      	ble.n	8085440 <__s2b+0x78>
 808542e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8085432:	4601      	mov	r1, r0
 8085434:	3b30      	subs	r3, #48	; 0x30
 8085436:	220a      	movs	r2, #10
 8085438:	4630      	mov	r0, r6
 808543a:	f7ff ff8a 	bl	8085352 <__multadd>
 808543e:	e7f3      	b.n	8085428 <__s2b+0x60>
 8085440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08085444 <__hi0bits>:
 8085444:	0c03      	lsrs	r3, r0, #16
 8085446:	041b      	lsls	r3, r3, #16
 8085448:	b913      	cbnz	r3, 8085450 <__hi0bits+0xc>
 808544a:	0400      	lsls	r0, r0, #16
 808544c:	2310      	movs	r3, #16
 808544e:	e000      	b.n	8085452 <__hi0bits+0xe>
 8085450:	2300      	movs	r3, #0
 8085452:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8085456:	bf04      	itt	eq
 8085458:	0200      	lsleq	r0, r0, #8
 808545a:	3308      	addeq	r3, #8
 808545c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8085460:	bf04      	itt	eq
 8085462:	0100      	lsleq	r0, r0, #4
 8085464:	3304      	addeq	r3, #4
 8085466:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 808546a:	bf04      	itt	eq
 808546c:	0080      	lsleq	r0, r0, #2
 808546e:	3302      	addeq	r3, #2
 8085470:	2800      	cmp	r0, #0
 8085472:	db03      	blt.n	808547c <__hi0bits+0x38>
 8085474:	0042      	lsls	r2, r0, #1
 8085476:	d503      	bpl.n	8085480 <__hi0bits+0x3c>
 8085478:	1c58      	adds	r0, r3, #1
 808547a:	4770      	bx	lr
 808547c:	4618      	mov	r0, r3
 808547e:	4770      	bx	lr
 8085480:	2020      	movs	r0, #32
 8085482:	4770      	bx	lr

08085484 <__lo0bits>:
 8085484:	6803      	ldr	r3, [r0, #0]
 8085486:	f013 0207 	ands.w	r2, r3, #7
 808548a:	d00b      	beq.n	80854a4 <__lo0bits+0x20>
 808548c:	07d9      	lsls	r1, r3, #31
 808548e:	d422      	bmi.n	80854d6 <__lo0bits+0x52>
 8085490:	079a      	lsls	r2, r3, #30
 8085492:	bf4b      	itete	mi
 8085494:	085b      	lsrmi	r3, r3, #1
 8085496:	089b      	lsrpl	r3, r3, #2
 8085498:	6003      	strmi	r3, [r0, #0]
 808549a:	6003      	strpl	r3, [r0, #0]
 808549c:	bf4c      	ite	mi
 808549e:	2001      	movmi	r0, #1
 80854a0:	2002      	movpl	r0, #2
 80854a2:	4770      	bx	lr
 80854a4:	b299      	uxth	r1, r3
 80854a6:	b909      	cbnz	r1, 80854ac <__lo0bits+0x28>
 80854a8:	0c1b      	lsrs	r3, r3, #16
 80854aa:	2210      	movs	r2, #16
 80854ac:	f013 0fff 	tst.w	r3, #255	; 0xff
 80854b0:	bf04      	itt	eq
 80854b2:	0a1b      	lsreq	r3, r3, #8
 80854b4:	3208      	addeq	r2, #8
 80854b6:	0719      	lsls	r1, r3, #28
 80854b8:	bf04      	itt	eq
 80854ba:	091b      	lsreq	r3, r3, #4
 80854bc:	3204      	addeq	r2, #4
 80854be:	0799      	lsls	r1, r3, #30
 80854c0:	bf04      	itt	eq
 80854c2:	089b      	lsreq	r3, r3, #2
 80854c4:	3202      	addeq	r2, #2
 80854c6:	07d9      	lsls	r1, r3, #31
 80854c8:	d402      	bmi.n	80854d0 <__lo0bits+0x4c>
 80854ca:	085b      	lsrs	r3, r3, #1
 80854cc:	d005      	beq.n	80854da <__lo0bits+0x56>
 80854ce:	3201      	adds	r2, #1
 80854d0:	6003      	str	r3, [r0, #0]
 80854d2:	4610      	mov	r0, r2
 80854d4:	4770      	bx	lr
 80854d6:	2000      	movs	r0, #0
 80854d8:	4770      	bx	lr
 80854da:	2020      	movs	r0, #32
 80854dc:	4770      	bx	lr

080854de <__i2b>:
 80854de:	b510      	push	{r4, lr}
 80854e0:	460c      	mov	r4, r1
 80854e2:	2101      	movs	r1, #1
 80854e4:	f7ff fee9 	bl	80852ba <_Balloc>
 80854e8:	2201      	movs	r2, #1
 80854ea:	6144      	str	r4, [r0, #20]
 80854ec:	6102      	str	r2, [r0, #16]
 80854ee:	bd10      	pop	{r4, pc}

080854f0 <__multiply>:
 80854f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80854f4:	4614      	mov	r4, r2
 80854f6:	690a      	ldr	r2, [r1, #16]
 80854f8:	6923      	ldr	r3, [r4, #16]
 80854fa:	4688      	mov	r8, r1
 80854fc:	429a      	cmp	r2, r3
 80854fe:	bfbe      	ittt	lt
 8085500:	460b      	movlt	r3, r1
 8085502:	46a0      	movlt	r8, r4
 8085504:	461c      	movlt	r4, r3
 8085506:	f8d8 7010 	ldr.w	r7, [r8, #16]
 808550a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 808550e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8085512:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8085516:	eb07 0609 	add.w	r6, r7, r9
 808551a:	429e      	cmp	r6, r3
 808551c:	bfc8      	it	gt
 808551e:	3101      	addgt	r1, #1
 8085520:	f7ff fecb 	bl	80852ba <_Balloc>
 8085524:	f100 0514 	add.w	r5, r0, #20
 8085528:	462b      	mov	r3, r5
 808552a:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 808552e:	2200      	movs	r2, #0
 8085530:	4563      	cmp	r3, ip
 8085532:	d202      	bcs.n	808553a <__multiply+0x4a>
 8085534:	f843 2b04 	str.w	r2, [r3], #4
 8085538:	e7fa      	b.n	8085530 <__multiply+0x40>
 808553a:	f104 0214 	add.w	r2, r4, #20
 808553e:	f108 0114 	add.w	r1, r8, #20
 8085542:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8085546:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 808554a:	9300      	str	r3, [sp, #0]
 808554c:	9b00      	ldr	r3, [sp, #0]
 808554e:	9201      	str	r2, [sp, #4]
 8085550:	4293      	cmp	r3, r2
 8085552:	d957      	bls.n	8085604 <__multiply+0x114>
 8085554:	f8b2 b000 	ldrh.w	fp, [r2]
 8085558:	f1bb 0f00 	cmp.w	fp, #0
 808555c:	d023      	beq.n	80855a6 <__multiply+0xb6>
 808555e:	4689      	mov	r9, r1
 8085560:	46ae      	mov	lr, r5
 8085562:	f04f 0800 	mov.w	r8, #0
 8085566:	f859 4b04 	ldr.w	r4, [r9], #4
 808556a:	f8be a000 	ldrh.w	sl, [lr]
 808556e:	b2a3      	uxth	r3, r4
 8085570:	fb0b a303 	mla	r3, fp, r3, sl
 8085574:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8085578:	f8de 4000 	ldr.w	r4, [lr]
 808557c:	4443      	add	r3, r8
 808557e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8085582:	fb0b 840a 	mla	r4, fp, sl, r8
 8085586:	46f2      	mov	sl, lr
 8085588:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 808558c:	b29b      	uxth	r3, r3
 808558e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8085592:	454f      	cmp	r7, r9
 8085594:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8085598:	f84a 3b04 	str.w	r3, [sl], #4
 808559c:	d901      	bls.n	80855a2 <__multiply+0xb2>
 808559e:	46d6      	mov	lr, sl
 80855a0:	e7e1      	b.n	8085566 <__multiply+0x76>
 80855a2:	f8ce 8004 	str.w	r8, [lr, #4]
 80855a6:	9b01      	ldr	r3, [sp, #4]
 80855a8:	3204      	adds	r2, #4
 80855aa:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80855ae:	f1ba 0f00 	cmp.w	sl, #0
 80855b2:	d021      	beq.n	80855f8 <__multiply+0x108>
 80855b4:	462c      	mov	r4, r5
 80855b6:	4689      	mov	r9, r1
 80855b8:	682b      	ldr	r3, [r5, #0]
 80855ba:	f04f 0800 	mov.w	r8, #0
 80855be:	f8b9 e000 	ldrh.w	lr, [r9]
 80855c2:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 80855c6:	b29b      	uxth	r3, r3
 80855c8:	fb0a be0e 	mla	lr, sl, lr, fp
 80855cc:	46a3      	mov	fp, r4
 80855ce:	44f0      	add	r8, lr
 80855d0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80855d4:	f84b 3b04 	str.w	r3, [fp], #4
 80855d8:	f859 3b04 	ldr.w	r3, [r9], #4
 80855dc:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 80855e0:	0c1b      	lsrs	r3, r3, #16
 80855e2:	fb0a e303 	mla	r3, sl, r3, lr
 80855e6:	454f      	cmp	r7, r9
 80855e8:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 80855ec:	ea4f 4813 	mov.w	r8, r3, lsr #16
 80855f0:	d901      	bls.n	80855f6 <__multiply+0x106>
 80855f2:	465c      	mov	r4, fp
 80855f4:	e7e3      	b.n	80855be <__multiply+0xce>
 80855f6:	6063      	str	r3, [r4, #4]
 80855f8:	3504      	adds	r5, #4
 80855fa:	e7a7      	b.n	808554c <__multiply+0x5c>
 80855fc:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8085600:	b913      	cbnz	r3, 8085608 <__multiply+0x118>
 8085602:	3e01      	subs	r6, #1
 8085604:	2e00      	cmp	r6, #0
 8085606:	dcf9      	bgt.n	80855fc <__multiply+0x10c>
 8085608:	6106      	str	r6, [r0, #16]
 808560a:	b003      	add	sp, #12
 808560c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08085610 <__pow5mult>:
 8085610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8085614:	4615      	mov	r5, r2
 8085616:	f012 0203 	ands.w	r2, r2, #3
 808561a:	4606      	mov	r6, r0
 808561c:	460f      	mov	r7, r1
 808561e:	d007      	beq.n	8085630 <__pow5mult+0x20>
 8085620:	4c21      	ldr	r4, [pc, #132]	; (80856a8 <__pow5mult+0x98>)
 8085622:	3a01      	subs	r2, #1
 8085624:	2300      	movs	r3, #0
 8085626:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 808562a:	f7ff fe92 	bl	8085352 <__multadd>
 808562e:	4607      	mov	r7, r0
 8085630:	10ad      	asrs	r5, r5, #2
 8085632:	d036      	beq.n	80856a2 <__pow5mult+0x92>
 8085634:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8085636:	b93c      	cbnz	r4, 8085648 <__pow5mult+0x38>
 8085638:	2010      	movs	r0, #16
 808563a:	f7fb fd01 	bl	8081040 <malloc>
 808563e:	6270      	str	r0, [r6, #36]	; 0x24
 8085640:	6044      	str	r4, [r0, #4]
 8085642:	6084      	str	r4, [r0, #8]
 8085644:	6004      	str	r4, [r0, #0]
 8085646:	60c4      	str	r4, [r0, #12]
 8085648:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 808564c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8085650:	b94c      	cbnz	r4, 8085666 <__pow5mult+0x56>
 8085652:	f240 2171 	movw	r1, #625	; 0x271
 8085656:	4630      	mov	r0, r6
 8085658:	f7ff ff41 	bl	80854de <__i2b>
 808565c:	4604      	mov	r4, r0
 808565e:	2300      	movs	r3, #0
 8085660:	f8c8 0008 	str.w	r0, [r8, #8]
 8085664:	6003      	str	r3, [r0, #0]
 8085666:	f04f 0800 	mov.w	r8, #0
 808566a:	07eb      	lsls	r3, r5, #31
 808566c:	d50a      	bpl.n	8085684 <__pow5mult+0x74>
 808566e:	4639      	mov	r1, r7
 8085670:	4622      	mov	r2, r4
 8085672:	4630      	mov	r0, r6
 8085674:	f7ff ff3c 	bl	80854f0 <__multiply>
 8085678:	4681      	mov	r9, r0
 808567a:	4639      	mov	r1, r7
 808567c:	4630      	mov	r0, r6
 808567e:	f7ff fe51 	bl	8085324 <_Bfree>
 8085682:	464f      	mov	r7, r9
 8085684:	106d      	asrs	r5, r5, #1
 8085686:	d00c      	beq.n	80856a2 <__pow5mult+0x92>
 8085688:	6820      	ldr	r0, [r4, #0]
 808568a:	b108      	cbz	r0, 8085690 <__pow5mult+0x80>
 808568c:	4604      	mov	r4, r0
 808568e:	e7ec      	b.n	808566a <__pow5mult+0x5a>
 8085690:	4622      	mov	r2, r4
 8085692:	4621      	mov	r1, r4
 8085694:	4630      	mov	r0, r6
 8085696:	f7ff ff2b 	bl	80854f0 <__multiply>
 808569a:	6020      	str	r0, [r4, #0]
 808569c:	f8c0 8000 	str.w	r8, [r0]
 80856a0:	e7f4      	b.n	808568c <__pow5mult+0x7c>
 80856a2:	4638      	mov	r0, r7
 80856a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80856a8:	08086148 	.word	0x08086148

080856ac <__lshift>:
 80856ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80856b0:	460c      	mov	r4, r1
 80856b2:	4607      	mov	r7, r0
 80856b4:	4691      	mov	r9, r2
 80856b6:	6926      	ldr	r6, [r4, #16]
 80856b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80856bc:	4456      	add	r6, sl
 80856be:	6849      	ldr	r1, [r1, #4]
 80856c0:	68a3      	ldr	r3, [r4, #8]
 80856c2:	1c75      	adds	r5, r6, #1
 80856c4:	42ab      	cmp	r3, r5
 80856c6:	da02      	bge.n	80856ce <__lshift+0x22>
 80856c8:	3101      	adds	r1, #1
 80856ca:	005b      	lsls	r3, r3, #1
 80856cc:	e7fa      	b.n	80856c4 <__lshift+0x18>
 80856ce:	4638      	mov	r0, r7
 80856d0:	f7ff fdf3 	bl	80852ba <_Balloc>
 80856d4:	2300      	movs	r3, #0
 80856d6:	4680      	mov	r8, r0
 80856d8:	461a      	mov	r2, r3
 80856da:	f100 0114 	add.w	r1, r0, #20
 80856de:	4553      	cmp	r3, sl
 80856e0:	da03      	bge.n	80856ea <__lshift+0x3e>
 80856e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80856e6:	3301      	adds	r3, #1
 80856e8:	e7f9      	b.n	80856de <__lshift+0x32>
 80856ea:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 80856ee:	6920      	ldr	r0, [r4, #16]
 80856f0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80856f4:	f019 091f 	ands.w	r9, r9, #31
 80856f8:	f104 0114 	add.w	r1, r4, #20
 80856fc:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8085700:	d014      	beq.n	808572c <__lshift+0x80>
 8085702:	f1c9 0c20 	rsb	ip, r9, #32
 8085706:	2200      	movs	r2, #0
 8085708:	6808      	ldr	r0, [r1, #0]
 808570a:	469a      	mov	sl, r3
 808570c:	fa00 f009 	lsl.w	r0, r0, r9
 8085710:	4302      	orrs	r2, r0
 8085712:	f843 2b04 	str.w	r2, [r3], #4
 8085716:	f851 2b04 	ldr.w	r2, [r1], #4
 808571a:	458e      	cmp	lr, r1
 808571c:	fa22 f20c 	lsr.w	r2, r2, ip
 8085720:	d8f2      	bhi.n	8085708 <__lshift+0x5c>
 8085722:	f8ca 2004 	str.w	r2, [sl, #4]
 8085726:	b142      	cbz	r2, 808573a <__lshift+0x8e>
 8085728:	1cb5      	adds	r5, r6, #2
 808572a:	e006      	b.n	808573a <__lshift+0x8e>
 808572c:	3b04      	subs	r3, #4
 808572e:	f851 2b04 	ldr.w	r2, [r1], #4
 8085732:	458e      	cmp	lr, r1
 8085734:	f843 2f04 	str.w	r2, [r3, #4]!
 8085738:	d8f9      	bhi.n	808572e <__lshift+0x82>
 808573a:	3d01      	subs	r5, #1
 808573c:	4638      	mov	r0, r7
 808573e:	f8c8 5010 	str.w	r5, [r8, #16]
 8085742:	4621      	mov	r1, r4
 8085744:	f7ff fdee 	bl	8085324 <_Bfree>
 8085748:	4640      	mov	r0, r8
 808574a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808574e <__mcmp>:
 808574e:	6903      	ldr	r3, [r0, #16]
 8085750:	690a      	ldr	r2, [r1, #16]
 8085752:	b510      	push	{r4, lr}
 8085754:	1a9b      	subs	r3, r3, r2
 8085756:	d111      	bne.n	808577c <__mcmp+0x2e>
 8085758:	0092      	lsls	r2, r2, #2
 808575a:	3014      	adds	r0, #20
 808575c:	3114      	adds	r1, #20
 808575e:	1883      	adds	r3, r0, r2
 8085760:	440a      	add	r2, r1
 8085762:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8085766:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 808576a:	428c      	cmp	r4, r1
 808576c:	d002      	beq.n	8085774 <__mcmp+0x26>
 808576e:	d307      	bcc.n	8085780 <__mcmp+0x32>
 8085770:	2001      	movs	r0, #1
 8085772:	bd10      	pop	{r4, pc}
 8085774:	4298      	cmp	r0, r3
 8085776:	d3f4      	bcc.n	8085762 <__mcmp+0x14>
 8085778:	2000      	movs	r0, #0
 808577a:	bd10      	pop	{r4, pc}
 808577c:	4618      	mov	r0, r3
 808577e:	bd10      	pop	{r4, pc}
 8085780:	f04f 30ff 	mov.w	r0, #4294967295
 8085784:	bd10      	pop	{r4, pc}

08085786 <__mdiff>:
 8085786:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808578a:	460c      	mov	r4, r1
 808578c:	4607      	mov	r7, r0
 808578e:	4611      	mov	r1, r2
 8085790:	4620      	mov	r0, r4
 8085792:	4615      	mov	r5, r2
 8085794:	f7ff ffdb 	bl	808574e <__mcmp>
 8085798:	1e06      	subs	r6, r0, #0
 808579a:	d108      	bne.n	80857ae <__mdiff+0x28>
 808579c:	4631      	mov	r1, r6
 808579e:	4638      	mov	r0, r7
 80857a0:	f7ff fd8b 	bl	80852ba <_Balloc>
 80857a4:	2301      	movs	r3, #1
 80857a6:	6103      	str	r3, [r0, #16]
 80857a8:	6146      	str	r6, [r0, #20]
 80857aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80857ae:	bfbc      	itt	lt
 80857b0:	4623      	movlt	r3, r4
 80857b2:	462c      	movlt	r4, r5
 80857b4:	4638      	mov	r0, r7
 80857b6:	6861      	ldr	r1, [r4, #4]
 80857b8:	bfba      	itte	lt
 80857ba:	461d      	movlt	r5, r3
 80857bc:	2601      	movlt	r6, #1
 80857be:	2600      	movge	r6, #0
 80857c0:	f7ff fd7b 	bl	80852ba <_Balloc>
 80857c4:	692b      	ldr	r3, [r5, #16]
 80857c6:	60c6      	str	r6, [r0, #12]
 80857c8:	6926      	ldr	r6, [r4, #16]
 80857ca:	f105 0914 	add.w	r9, r5, #20
 80857ce:	f104 0114 	add.w	r1, r4, #20
 80857d2:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 80857d6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80857da:	f100 0514 	add.w	r5, r0, #20
 80857de:	f04f 0c00 	mov.w	ip, #0
 80857e2:	f851 2b04 	ldr.w	r2, [r1], #4
 80857e6:	f859 4b04 	ldr.w	r4, [r9], #4
 80857ea:	b293      	uxth	r3, r2
 80857ec:	449c      	add	ip, r3
 80857ee:	b2a3      	uxth	r3, r4
 80857f0:	0c24      	lsrs	r4, r4, #16
 80857f2:	ebc3 030c 	rsb	r3, r3, ip
 80857f6:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 80857fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80857fe:	b29b      	uxth	r3, r3
 8085800:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8085804:	45c8      	cmp	r8, r9
 8085806:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 808580a:	468e      	mov	lr, r1
 808580c:	f845 2b04 	str.w	r2, [r5], #4
 8085810:	d8e7      	bhi.n	80857e2 <__mdiff+0x5c>
 8085812:	45be      	cmp	lr, r7
 8085814:	d20e      	bcs.n	8085834 <__mdiff+0xae>
 8085816:	f85e 1b04 	ldr.w	r1, [lr], #4
 808581a:	b28a      	uxth	r2, r1
 808581c:	4462      	add	r2, ip
 808581e:	1413      	asrs	r3, r2, #16
 8085820:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 8085824:	b292      	uxth	r2, r2
 8085826:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 808582a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 808582e:	f845 2b04 	str.w	r2, [r5], #4
 8085832:	e7ee      	b.n	8085812 <__mdiff+0x8c>
 8085834:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8085838:	b90b      	cbnz	r3, 808583e <__mdiff+0xb8>
 808583a:	3e01      	subs	r6, #1
 808583c:	e7fa      	b.n	8085834 <__mdiff+0xae>
 808583e:	6106      	str	r6, [r0, #16]
 8085840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08085844 <__ulp>:
 8085844:	4b10      	ldr	r3, [pc, #64]	; (8085888 <__ulp+0x44>)
 8085846:	400b      	ands	r3, r1
 8085848:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 808584c:	2b00      	cmp	r3, #0
 808584e:	dd02      	ble.n	8085856 <__ulp+0x12>
 8085850:	2000      	movs	r0, #0
 8085852:	4619      	mov	r1, r3
 8085854:	4770      	bx	lr
 8085856:	425b      	negs	r3, r3
 8085858:	151b      	asrs	r3, r3, #20
 808585a:	2b13      	cmp	r3, #19
 808585c:	f04f 0000 	mov.w	r0, #0
 8085860:	f04f 0100 	mov.w	r1, #0
 8085864:	dc04      	bgt.n	8085870 <__ulp+0x2c>
 8085866:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 808586a:	fa42 f103 	asr.w	r1, r2, r3
 808586e:	4770      	bx	lr
 8085870:	3b14      	subs	r3, #20
 8085872:	2b1e      	cmp	r3, #30
 8085874:	f04f 0201 	mov.w	r2, #1
 8085878:	bfce      	itee	gt
 808587a:	4613      	movgt	r3, r2
 808587c:	f1c3 031f 	rsble	r3, r3, #31
 8085880:	fa02 f303 	lslle.w	r3, r2, r3
 8085884:	4618      	mov	r0, r3
 8085886:	4770      	bx	lr
 8085888:	7ff00000 	.word	0x7ff00000

0808588c <__b2d>:
 808588c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808588e:	6905      	ldr	r5, [r0, #16]
 8085890:	f100 0614 	add.w	r6, r0, #20
 8085894:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8085898:	f855 4c04 	ldr.w	r4, [r5, #-4]
 808589c:	1f2f      	subs	r7, r5, #4
 808589e:	4620      	mov	r0, r4
 80858a0:	f7ff fdd0 	bl	8085444 <__hi0bits>
 80858a4:	f1c0 0320 	rsb	r3, r0, #32
 80858a8:	280a      	cmp	r0, #10
 80858aa:	600b      	str	r3, [r1, #0]
 80858ac:	dc14      	bgt.n	80858d8 <__b2d+0x4c>
 80858ae:	f1c0 0e0b 	rsb	lr, r0, #11
 80858b2:	fa24 f10e 	lsr.w	r1, r4, lr
 80858b6:	42be      	cmp	r6, r7
 80858b8:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 80858bc:	bf34      	ite	cc
 80858be:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80858c2:	2100      	movcs	r1, #0
 80858c4:	3015      	adds	r0, #21
 80858c6:	fa04 f000 	lsl.w	r0, r4, r0
 80858ca:	fa21 f10e 	lsr.w	r1, r1, lr
 80858ce:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80858d2:	ea40 0201 	orr.w	r2, r0, r1
 80858d6:	e023      	b.n	8085920 <__b2d+0x94>
 80858d8:	42be      	cmp	r6, r7
 80858da:	bf3a      	itte	cc
 80858dc:	f1a5 0708 	subcc.w	r7, r5, #8
 80858e0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80858e4:	2100      	movcs	r1, #0
 80858e6:	380b      	subs	r0, #11
 80858e8:	d015      	beq.n	8085916 <__b2d+0x8a>
 80858ea:	4084      	lsls	r4, r0
 80858ec:	f1c0 0520 	rsb	r5, r0, #32
 80858f0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80858f4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80858f8:	42b7      	cmp	r7, r6
 80858fa:	fa21 fe05 	lsr.w	lr, r1, r5
 80858fe:	ea44 030e 	orr.w	r3, r4, lr
 8085902:	bf8c      	ite	hi
 8085904:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 8085908:	2400      	movls	r4, #0
 808590a:	fa01 f000 	lsl.w	r0, r1, r0
 808590e:	40ec      	lsrs	r4, r5
 8085910:	ea40 0204 	orr.w	r2, r0, r4
 8085914:	e004      	b.n	8085920 <__b2d+0x94>
 8085916:	460a      	mov	r2, r1
 8085918:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 808591c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8085920:	4610      	mov	r0, r2
 8085922:	4619      	mov	r1, r3
 8085924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08085926 <__d2b>:
 8085926:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 808592a:	461c      	mov	r4, r3
 808592c:	2101      	movs	r1, #1
 808592e:	4690      	mov	r8, r2
 8085930:	9e08      	ldr	r6, [sp, #32]
 8085932:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8085934:	f7ff fcc1 	bl	80852ba <_Balloc>
 8085938:	f3c4 0213 	ubfx	r2, r4, #0, #20
 808593c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8085940:	4607      	mov	r7, r0
 8085942:	b10c      	cbz	r4, 8085948 <__d2b+0x22>
 8085944:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8085948:	9201      	str	r2, [sp, #4]
 808594a:	f1b8 0f00 	cmp.w	r8, #0
 808594e:	d019      	beq.n	8085984 <__d2b+0x5e>
 8085950:	a802      	add	r0, sp, #8
 8085952:	f840 8d08 	str.w	r8, [r0, #-8]!
 8085956:	f7ff fd95 	bl	8085484 <__lo0bits>
 808595a:	9b00      	ldr	r3, [sp, #0]
 808595c:	b148      	cbz	r0, 8085972 <__d2b+0x4c>
 808595e:	9a01      	ldr	r2, [sp, #4]
 8085960:	f1c0 0120 	rsb	r1, r0, #32
 8085964:	fa02 f101 	lsl.w	r1, r2, r1
 8085968:	430b      	orrs	r3, r1
 808596a:	40c2      	lsrs	r2, r0
 808596c:	617b      	str	r3, [r7, #20]
 808596e:	9201      	str	r2, [sp, #4]
 8085970:	e000      	b.n	8085974 <__d2b+0x4e>
 8085972:	617b      	str	r3, [r7, #20]
 8085974:	9b01      	ldr	r3, [sp, #4]
 8085976:	2b00      	cmp	r3, #0
 8085978:	bf14      	ite	ne
 808597a:	2102      	movne	r1, #2
 808597c:	2101      	moveq	r1, #1
 808597e:	61bb      	str	r3, [r7, #24]
 8085980:	6139      	str	r1, [r7, #16]
 8085982:	e007      	b.n	8085994 <__d2b+0x6e>
 8085984:	a801      	add	r0, sp, #4
 8085986:	f7ff fd7d 	bl	8085484 <__lo0bits>
 808598a:	9b01      	ldr	r3, [sp, #4]
 808598c:	2101      	movs	r1, #1
 808598e:	617b      	str	r3, [r7, #20]
 8085990:	6139      	str	r1, [r7, #16]
 8085992:	3020      	adds	r0, #32
 8085994:	b134      	cbz	r4, 80859a4 <__d2b+0x7e>
 8085996:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 808599a:	4404      	add	r4, r0
 808599c:	6034      	str	r4, [r6, #0]
 808599e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80859a2:	e009      	b.n	80859b8 <__d2b+0x92>
 80859a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80859a8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80859ac:	6030      	str	r0, [r6, #0]
 80859ae:	6918      	ldr	r0, [r3, #16]
 80859b0:	f7ff fd48 	bl	8085444 <__hi0bits>
 80859b4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80859b8:	6028      	str	r0, [r5, #0]
 80859ba:	4638      	mov	r0, r7
 80859bc:	b002      	add	sp, #8
 80859be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080859c2 <__ratio>:
 80859c2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80859c6:	4688      	mov	r8, r1
 80859c8:	4669      	mov	r1, sp
 80859ca:	4681      	mov	r9, r0
 80859cc:	f7ff ff5e 	bl	808588c <__b2d>
 80859d0:	460d      	mov	r5, r1
 80859d2:	4604      	mov	r4, r0
 80859d4:	a901      	add	r1, sp, #4
 80859d6:	4640      	mov	r0, r8
 80859d8:	f7ff ff58 	bl	808588c <__b2d>
 80859dc:	460f      	mov	r7, r1
 80859de:	4606      	mov	r6, r0
 80859e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80859e4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80859e8:	4620      	mov	r0, r4
 80859ea:	1a9a      	subs	r2, r3, r2
 80859ec:	e89d 000a 	ldmia.w	sp, {r1, r3}
 80859f0:	1ac9      	subs	r1, r1, r3
 80859f2:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 80859f6:	2b00      	cmp	r3, #0
 80859f8:	bfcc      	ite	gt
 80859fa:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 80859fe:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 8085a02:	4632      	mov	r2, r6
 8085a04:	463b      	mov	r3, r7
 8085a06:	4629      	mov	r1, r5
 8085a08:	f7fd fbb8 	bl	808317c <__aeabi_ddiv>
 8085a0c:	b003      	add	sp, #12
 8085a0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08085a12 <__copybits>:
 8085a12:	3901      	subs	r1, #1
 8085a14:	b510      	push	{r4, lr}
 8085a16:	1149      	asrs	r1, r1, #5
 8085a18:	6914      	ldr	r4, [r2, #16]
 8085a1a:	3101      	adds	r1, #1
 8085a1c:	f102 0314 	add.w	r3, r2, #20
 8085a20:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8085a24:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8085a28:	42a3      	cmp	r3, r4
 8085a2a:	4602      	mov	r2, r0
 8085a2c:	d204      	bcs.n	8085a38 <__copybits+0x26>
 8085a2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8085a32:	f840 2b04 	str.w	r2, [r0], #4
 8085a36:	e7f7      	b.n	8085a28 <__copybits+0x16>
 8085a38:	2300      	movs	r3, #0
 8085a3a:	428a      	cmp	r2, r1
 8085a3c:	d202      	bcs.n	8085a44 <__copybits+0x32>
 8085a3e:	f842 3b04 	str.w	r3, [r2], #4
 8085a42:	e7fa      	b.n	8085a3a <__copybits+0x28>
 8085a44:	bd10      	pop	{r4, pc}

08085a46 <__any_on>:
 8085a46:	f100 0214 	add.w	r2, r0, #20
 8085a4a:	6900      	ldr	r0, [r0, #16]
 8085a4c:	114b      	asrs	r3, r1, #5
 8085a4e:	4298      	cmp	r0, r3
 8085a50:	b510      	push	{r4, lr}
 8085a52:	db0c      	blt.n	8085a6e <__any_on+0x28>
 8085a54:	dd0c      	ble.n	8085a70 <__any_on+0x2a>
 8085a56:	f011 011f 	ands.w	r1, r1, #31
 8085a5a:	d009      	beq.n	8085a70 <__any_on+0x2a>
 8085a5c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8085a60:	fa24 f001 	lsr.w	r0, r4, r1
 8085a64:	fa00 f101 	lsl.w	r1, r0, r1
 8085a68:	428c      	cmp	r4, r1
 8085a6a:	d10c      	bne.n	8085a86 <__any_on+0x40>
 8085a6c:	e000      	b.n	8085a70 <__any_on+0x2a>
 8085a6e:	4603      	mov	r3, r0
 8085a70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8085a74:	4293      	cmp	r3, r2
 8085a76:	d904      	bls.n	8085a82 <__any_on+0x3c>
 8085a78:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8085a7c:	2900      	cmp	r1, #0
 8085a7e:	d0f9      	beq.n	8085a74 <__any_on+0x2e>
 8085a80:	e001      	b.n	8085a86 <__any_on+0x40>
 8085a82:	2000      	movs	r0, #0
 8085a84:	bd10      	pop	{r4, pc}
 8085a86:	2001      	movs	r0, #1
 8085a88:	bd10      	pop	{r4, pc}

08085a8a <_calloc_r>:
 8085a8a:	b538      	push	{r3, r4, r5, lr}
 8085a8c:	fb02 f401 	mul.w	r4, r2, r1
 8085a90:	4621      	mov	r1, r4
 8085a92:	f7fb faf5 	bl	8081080 <_malloc_r>
 8085a96:	4605      	mov	r5, r0
 8085a98:	b118      	cbz	r0, 8085aa2 <_calloc_r+0x18>
 8085a9a:	4622      	mov	r2, r4
 8085a9c:	2100      	movs	r1, #0
 8085a9e:	f7fe f9c2 	bl	8083e26 <memset>
 8085aa2:	4628      	mov	r0, r5
 8085aa4:	bd38      	pop	{r3, r4, r5, pc}

08085aa6 <link_code_end>:
	...

08085aa8 <dynalib_user>:
 8085aa8:	0021 0808 0061 0808 008d 0808 0091 0808     !...a...........
 8085ab8:	0000 0000                                   ....

08085abc <_ZTV5Timer>:
	...
 8085ac4:	0199 0808 01e1 0808 0105 0808 7244 6579     ............Drye
 8085ad4:	2072 2000 6e69 4120 616c 6d72 4400 7972     r . in Alarm.Dry
 8085ae4:	7265 415f 616c 6d72 0073 5220 7365 7465     er_Alarms. Reset
 8085af4:	5200 6d65 746f 2065 7244 6579 2072 6c41     .Remote Dryer Al
 8085b04:	7261 206d 2000 6552 6573 2074 6553 746e     arm . Reset Sent
 8085b14:	4100 616c 6d72 4320 756f 746e 6820 7361     .Alarm Count has
 8085b24:	6220 6565 206e 7075 6164 6574 2064 6f74      been updated to
 8085b34:	0020 654d 7373 6761 7365 5200 6c65 7961      .Messages.Relay
 8085b44:	4320 756f 746e 6820 7361 6220 6565 206e      Count has been 
 8085b54:	7075 6164 6574 2064 6f74 0020 6d41 2070     updated to .Amp 
 8085b64:	6c43 6d61 2070 6f43 6e75 2074 6168 2073     Clamp Count has 
 8085b74:	6562 6e65 7520 6470 7461 6465 7420 206f     been updated to 
 8085b84:	4300 6c61 6269 6172 6974 6e6f 6820 7361     .Calibration has
 8085b94:	6220 6565 206e 7075 6164 6574 2064 6f74      been updated to
 8085ba4:	0020 6552 6573 5f74 7244 6579 0072 6c41      .Reset_Dryer.Al
 8085bb4:	7261 5f6d 6f43 6e75 0074 6c43 6d61 5f70     arm_Count.Clamp_
 8085bc4:	6f43 6e75 0074 6552 616c 5f79 6f43 6e75     Count.Relay_Coun
 8085bd4:	0074 6843 6e61 6567 435f 6c61 6269 6172     t.Change_Calibra
 8085be4:	6974 6e6f 5300 6769 616e 5f6c 7453 6572     tion.Signal_Stre
 8085bf4:	676e 6874 4100 706d 005f 1b1a 1d1c 0b0a     ngth.Amp_.......
 8085c04:	1110 211e 2322 0000 0001 0002 0003 0000     ...!"#..........

08085c14 <_ZTV8SPIClass>:
	...
 8085c1c:	10a1 0808 10a3 0808 6162 6475 5300 7265     ........baud.Ser
 8085c2c:	6169 006c 5355 5342 7265 6169 316c 7400     ial.USBSerial1.t
 8085c3c:	7079 0065 6170 6172 006d 6d63 0064 6469     ype.param.cmd.id
 8085c4c:	6800 646e 7300 7274 006d 6966 746c 6c00     .hnd.strm.filt.l
 8085c5c:	6c76 6100 6464 6148 646e 656c 0072 6572     vl.addHandler.re
 8085c6c:	6f6d 6576 6148 646e 656c 0072 6e65 6d75     moveHandler.enum
 8085c7c:	6148 646e 656c 7372 4a00 4f53 534e 7274     Handlers.JSONStr
 8085c8c:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
 8085c9c:	0070 3025 3031 2075 5d00 0020 6425 2c00     p.%010u .] .%d.,
 8085cac:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
 8085cbc:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
 8085ccc:	0a0d 6c00 006e 6e66 6300 646f 0065 6564     ...ln.fn.code.de
 8085cdc:	6174 6c69 6e00 6e6f 0065 7274 6361 0065     tail.none.trace.
 8085cec:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
 8085cfc:	6170 696e 0063 6c61 006c 005a 2b25 3330     panic.all.Z.%+03
 8085d0c:	3a64 3025 7532 2500 2d59 6d25 252d 5464     d:%02u.%Y-%m-%dT
 8085d1c:	4825 253a 3a4d 5325 7a25 6100 6373 6974     %H:%M:%S%z.ascti
 8085d2c:	656d 0000                                   me..

08085d30 <_ZTV14CellularSignal>:
	...
 8085d38:	15ad 0808 162f 0808 15af 0808 166d 0808     ..../.......m...
 8085d48:	15b5 0808 163d 0808 15d9 0808 15fd 0808     ....=...........
 8085d58:	fffc ffff 0000 0000 1627 0808               ........'...

08085d64 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8085d6c:	1805 0808 180b 0808 184f 0808 1819 0808     ........O.......
 8085d7c:	1807 0808                                   ....

08085d80 <_ZTV9IPAddress>:
	...
 8085d88:	1df5 0808 1de5 0808 1de7 0808               ............

08085d94 <_ZTV9USBSerial>:
	...
 8085d9c:	1e89 0808 1ed9 0808 1ee7 0808 1441 0808     ............A...
 8085dac:	1ec5 0808 1e8b 0808 1ea1 0808 1ed3 0808     ................
 8085dbc:	1eb7 0808 1e85 0808                         ........

08085dc4 <_ZTVN5spark13CellularClassE>:
	...
 8085dcc:	2197 0808 218d 0808 2183 0808 20f5 0808     .!...!...!... ..
 8085ddc:	2177 0808 216b 0808 215f 0808 2157 0808     w!..k!.._!..W!..
 8085dec:	214d 0808 2143 0808 20ff 0808               M!..C!... ..

08085df8 <_ZTV11USARTSerial>:
	...
 8085e00:	2245 0808 2295 0808 22a3 0808 1441 0808     E"..."..."..A...
 8085e10:	2259 0808 227b 0808 2267 0808 228f 0808     Y"..{"..g"..."..
 8085e20:	2247 0808 224b 0808                         G"..K"..

08085e28 <_ZTV7TwoWire>:
	...
 8085e30:	2371 0808 23bb 0808 2393 0808 2373 0808     q#...#...#..s#..
 8085e40:	239b 0808 23a3 0808 23ab 0808 23b3 0808     .#...#...#...#..

08085e50 <_ZTVN5spark12NetworkClassE>:
	...
 8085e58:	23f5 0808 23ff 0808 2409 0808 2413 0808     .#...#...$...$..
 8085e68:	241d 0808 2429 0808 2435 0808 2441 0808     .$..)$..5$..A$..
 8085e78:	2449 0808 2453 0808 245d 0808 7173 7472     I$..S$..]$..sqrt
 8085e88:	0000 0000                                   ....

08085e8c <_ctype_>:
 8085e8c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8085e9c:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8085eac:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8085ebc:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8085ecc:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8085edc:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8085eec:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8085efc:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8085f0c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

08085f90 <__sf_fake_stdin>:
	...

08085fb0 <__sf_fake_stdout>:
	...

08085fd0 <__sf_fake_stderr>:
	...
 8085ff0:	0043 4f50 4953 0058 002e 0000               C.POSIX.....

08085ffc <fpi.5342>:
 8085ffc:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 808600c:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.

0808601c <fpinan.5378>:
 808601c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 808602c:	0000 0000                                   ....

08086030 <tinytens>:
 8086030:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 8086040:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 8086050:	6f43 64ac 0628 1168                         Co.d(.h.

08086058 <__mprec_tens>:
 8086058:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 8086068:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 8086078:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 8086088:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 8086098:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 80860a8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 80860b8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 80860c8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 80860d8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 80860e8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 80860f8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8086108:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8086118:	9db4 79d9 7843 44ea                         ...yCx.D

08086120 <__mprec_bigtens>:
 8086120:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 8086130:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 8086140:	bf3c 7f73 4fdd 7515                         <.s..O.u

08086148 <p05.5385>:
 8086148:	0005 0000 0019 0000 007d 0000               ........}...

08086154 <link_const_variable_data_end>:
 8086154:	080807c1 	.word	0x080807c1
 8086158:	080809bd 	.word	0x080809bd
 808615c:	08080b71 	.word	0x08080b71
 8086160:	08080be5 	.word	0x08080be5
 8086164:	080810e1 	.word	0x080810e1
 8086168:	08081541 	.word	0x08081541
 808616c:	08081551 	.word	0x08081551
 8086170:	08081591 	.word	0x08081591
 8086174:	08082215 	.word	0x08082215
 8086178:	080824a9 	.word	0x080824a9
 808617c:	080825dd 	.word	0x080825dd
 8086180:	08082661 	.word	0x08082661
 8086184:	080826e5 	.word	0x080826e5
 8086188:	08082769 	.word	0x08082769
 808618c:	0808282d 	.word	0x0808282d
 8086190:	080828f1 	.word	0x080828f1

08086194 <link_constructors_end>:
	...
